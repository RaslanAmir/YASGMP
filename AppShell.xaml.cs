using System;
using System.Threading.Tasks;
using Microsoft.Maui.ApplicationModel;
using Microsoft.Maui.Controls;

namespace YasGMP
{
    /// <summary>
    /// <b>AppShell</b> — centralizes routes and toolbar navigation (Hot Reload–safe, idempotent registrations).
    /// </summary>
    public partial class AppShell : Shell
    {
        private static class AppRoutes
        {
            // Home
            public const string Dashboard      = "routes/dashboard";

            // Operations
            public const string WorkOrders     = "routes/workorders";
            public const string Machines       = "routes/machines";
            public const string Parts          = "routes/parts";
            public const string Suppliers      = "routes/suppliers";
            public const string Components     = "routes/components";
            public const string External       = "routes/externalservicers";
            public const string Ppm            = "routes/ppm";
            public const string Calibrations   = "routes/calibrations";

            // Quality / Compliance
            public const string Capa           = "routes/capa";
            public const string Validation     = "routes/validation";
            public const string AuditDashboard = "routes/auditdashboard";
            public const string AuditLog       = "routes/auditlog";
            public const string Debug          = "routes/debug";
            public const string LogViewer      = "routes/logviewer";
            public const string Health         = "routes/health";

            // Admin
            public const string Users          = "routes/users";
            public const string Rbac           = "routes/rbac";
            public const string AdminPanel     = "routes/adminpanel";
            public const string Rollback       = "routes/rollbackpreview";

            // Optional
            public const string Main           = "routes/main";
            public const string Login          = "routes/login";
        }

        private static readonly object RoutesLock = new();
        private static bool _routesRegistered;

        public AppShell()
        {
            InitializeComponent();   // generated by MAUI XAML build
            EnsureRoutesRegistered();
        }

        /// <summary>Ensures all routes are registered exactly once (thread-safe).</summary>
        public static void EnsureRoutesRegistered()
        {
            if (_routesRegistered) return;

            lock (RoutesLock)
            {
                if (_routesRegistered) return;
                try { RegisterRoutes(); }
                finally { _routesRegistered = true; }
            }
        }

        private static void RegisterRoutes()
        {
            // Resolve types from this assembly first (reliable), then fallback to Type.GetType.
            static void Register(string route, string typeName)
            {
                if (string.IsNullOrWhiteSpace(route) || string.IsNullOrWhiteSpace(typeName))
                    return;

                var asm = typeof(AppShell).Assembly;
                var candidates = new[]
                {
                    $"YasGMP.Views.{typeName}",
                    $"YasGMP.Pages.{typeName}",
                    $"YasGMP.{typeName}"
                };

                Type? t = null;
                foreach (var qn in candidates)
                {
                    t = asm.GetType(qn) ?? Type.GetType(qn);
                    if (t != null) break;
                }

                try { Routing.RegisterRoute(route, t ?? typeof(ContentPage)); }
                catch { /* ignore duplicate registrations */ }
            }

            // Home
            Register(AppRoutes.Dashboard, "DashboardPage");

            // Operations (note: plural WorkOrdersPage)
            Register(AppRoutes.WorkOrders,   "WorkOrdersPage");
            Register(AppRoutes.Machines,     "MachinesPage");
            Register(AppRoutes.Parts,        "PartsPage");
            Register(AppRoutes.Suppliers,    "SuppliersPage");
            Register(AppRoutes.Components,   "ComponentsPage");
            Register(AppRoutes.External,     "ExternalServicersPage");
            Register(AppRoutes.Ppm,          "PpmPage");
            Register(AppRoutes.Calibrations, "CalibrationsPage");

            // Quality / Compliance
            Register(AppRoutes.Capa,           "CapaPage");
            Register(AppRoutes.Validation,     "ValidationPage");
            Register(AppRoutes.AuditDashboard, "AuditDashboardPage");
            Register(AppRoutes.AuditLog,       "AuditLogPage");
            Register(AppRoutes.Debug,          "DebugDashboardPage");
            Register(AppRoutes.LogViewer,      "LogViewerPage");
            Register(AppRoutes.Health,         "HealthPage");

            // Admin
            Register(AppRoutes.Users,      "UsersPage");
            Register(AppRoutes.Rbac,       "UserRolePermissionPage");
            Register(AppRoutes.AdminPanel, "AdminPanelPage");
            Register(AppRoutes.Rollback,   "RollbackPreviewPage");

            // Optional
            Register(AppRoutes.Main,  "MainPage");
            Register(AppRoutes.Login, "LoginPage");
        }

        // ======================= Toolbar navigation =======================

        private static async Task GoAsync(string route)
        {
            if (string.IsNullOrWhiteSpace(route)) return;

            EnsureRoutesRegistered();

            if (Shell.Current is not null)
            {
                await Shell.Current.GoToAsync(route).ConfigureAwait(false);
                return;
            }

            await MainThread.InvokeOnMainThreadAsync(async () =>
            {
                try
                {
                    var page = Application.Current?.MainPage;
                    if (page != null)
                        await page.DisplayAlert("Navigation unavailable",
                            $"Shell is not active. Could not navigate to '{route}'.", "OK");
                }
                catch { /* swallow */ }
            });
        }

        // Home
        private async void OnToolbarGoDashboard (object sender, EventArgs e) => await GoAsync(AppRoutes.Dashboard);

        // Operations
        private async void OnToolbarGoWorkOrders(object sender, EventArgs e) => await GoAsync(AppRoutes.WorkOrders);
        private async void OnToolbarGoMachines  (object sender, EventArgs e) => await GoAsync(AppRoutes.Machines);
        private async void OnToolbarGoParts     (object sender, EventArgs e) => await GoAsync(AppRoutes.Parts);
        private async void OnToolbarGoSuppliers (object sender, EventArgs e) => await GoAsync(AppRoutes.Suppliers);
        private async void OnToolbarGoComponents(object sender, EventArgs e) => await GoAsync(AppRoutes.Components);
        private async void OnToolbarGoExternal  (object sender, EventArgs e) => await GoAsync(AppRoutes.External);
        private async void OnToolbarGoPpm       (object sender, EventArgs e) => await GoAsync(AppRoutes.Ppm);
        private async void OnToolbarGoCalibrations(object sender, EventArgs e) => await GoAsync(AppRoutes.Calibrations);

        // Quality
        private async void OnToolbarGoCapa      (object sender, EventArgs e) => await GoAsync(AppRoutes.Capa);
        private async void OnToolbarGoValidation(object sender, EventArgs e) => await GoAsync(AppRoutes.Validation);
        private async void OnToolbarGoAuditDash (object sender, EventArgs e) => await GoAsync(AppRoutes.AuditDashboard);
        private async void OnToolbarGoAuditLog  (object sender, EventArgs e) => await GoAsync(AppRoutes.AuditLog);

        // Admin
        private async void OnToolbarGoUsers     (object sender, EventArgs e) => await GoAsync(AppRoutes.Users);
        private async void OnToolbarGoRbac      (object sender, EventArgs e) => await GoAsync(AppRoutes.Rbac);
        private async void OnToolbarGoAdmin     (object sender, EventArgs e) => await GoAsync(AppRoutes.AdminPanel);
        private async void OnToolbarGoRollback  (object sender, EventArgs e) => await GoAsync(AppRoutes.Rollback);

        // Debug
        private async void OnToolbarGoDebug     (object sender, EventArgs e) => await GoAsync(AppRoutes.Debug);
    }
}
