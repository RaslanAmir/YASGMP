// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YasGMP.Data;

#nullable disable

namespace YasGmp.EfMigrations.Migrations
{
    [DbContext(typeof(YasGmpDbContext))]
    partial class YasGmpDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("int");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("PermissionsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("PermissionRole");
                });

            modelBuilder.Entity("PermissionUser", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("PermissionsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("PermissionUser");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("YasGMP.Models.AdminActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("activity");

                    b.Property<DateTime>("ActivityTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("activity_time");

                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<int?>("AffectedRecordId")
                        .HasColumnType("int")
                        .HasColumnName("affected_record_id");

                    b.Property<string>("AffectedTable")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("affected_table");

                    b.Property<int>("ChangeVersion")
                        .HasColumnType("int")
                        .HasColumnName("change_version");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("details");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("device_name");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("digital_signature");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("note");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("session_id");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId")
                        .HasDatabaseName("fk_adminact_user");

                    b.HasIndex("UserId");

                    b.ToTable("admin_activity_log", (string)null);
                });

            modelBuilder.Entity("YasGMP.Models.ApiAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("action");

                    b.Property<int?>("ApiKeyId")
                        .HasColumnType("int")
                        .HasColumnName("api_key_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Details")
                        .HasColumnType("longtext")
                        .HasColumnName("details");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<string>("RequestDetails")
                        .HasColumnType("longtext")
                        .HasColumnName("request_details");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("api_audit_log");
                });

            modelBuilder.Entity("YasGMP.Models.ApiKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("key_value");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_used_at");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("key_value");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("fk_apikey_owner");

                    b.ToTable("api_keys", (string)null);
                });

            modelBuilder.Entity("YasGMP.Models.ApiUsageLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiKeyId")
                        .HasColumnType("int")
                        .HasColumnName("api_key_id");

                    b.Property<DateTime>("CallTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("call_time");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("DurationMs")
                        .HasColumnType("int")
                        .HasColumnName("duration_ms");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("endpoint");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("longtext")
                        .HasColumnName("error_message");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("method");

                    b.Property<string>("Params")
                        .HasColumnType("longtext")
                        .HasColumnName("params");

                    b.Property<int>("ResponseCode")
                        .HasColumnType("int")
                        .HasColumnName("response_code");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<bool>("Success")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("success");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ApiKeyId");

                    b.HasIndex("UserId");

                    b.ToTable("api_usage_log");
                });

            modelBuilder.Entity("YasGMP.Models.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AiScore")
                        .HasColumnType("double")
                        .HasColumnName("ai_score");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("approved_at");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int")
                        .HasColumnName("approved_by_id");

                    b.Property<string>("ChainId")
                        .HasColumnType("longtext")
                        .HasColumnName("chain_id");

                    b.Property<int?>("ChangeControlId")
                        .HasColumnType("int");

                    b.Property<int>("ChangeVersion")
                        .HasColumnType("int")
                        .HasColumnName("change_version");

                    b.Property<int?>("DeviationId")
                        .HasColumnType("int");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("device_info");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("digital_signature");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("entity_type");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expiry_date");

                    b.Property<int?>("ExternalContractorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("LONGBLOB")
                        .HasColumnName("file_content");

                    b.Property<string>("FileHash")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("file_hash");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("file_path");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<string>("FileType")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("file_type");

                    b.Property<int?>("IncidentActionId")
                        .HasColumnType("int");

                    b.Property<int?>("IncidentId")
                        .HasColumnType("int");

                    b.Property<int?>("IncidentReportId")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_approved");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("MaintenanceExecutionLogId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("notes");

                    b.Property<int?>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int?>("NotificationLogId")
                        .HasColumnType("int");

                    b.Property<string>("OCRText")
                        .HasColumnType("longtext")
                        .HasColumnName("ocr_text");

                    b.Property<int?>("PartUsageId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("session_id");

                    b.Property<int?>("SparePartId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("status");

                    b.Property<int?>("TrainingRecordId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("uploaded_at");

                    b.Property<int>("UploadedById")
                        .HasColumnType("int")
                        .HasColumnName("uploaded_by_id");

                    b.Property<string>("VersionUid")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("version_uid");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("ChangeControlId");

                    b.HasIndex("DeviationId");

                    b.HasIndex("ExternalContractorId");

                    b.HasIndex("IncidentActionId");

                    b.HasIndex("IncidentId");

                    b.HasIndex("IncidentReportId");

                    b.HasIndex("MaintenanceExecutionLogId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("NotificationLogId");

                    b.HasIndex("PartUsageId");

                    b.HasIndex("SparePartId");

                    b.HasIndex("TrainingRecordId");

                    b.HasIndex("UploadedById");

                    b.ToTable("attachments");
                });

            modelBuilder.Entity("YasGMP.Models.AttachmentAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("ActionAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("SignatureHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AttachmentAuditLogs");
                });

            modelBuilder.Entity("YasGMP.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("action");

                    b.Property<int>("ChangeVersion")
                        .HasColumnType("int")
                        .HasColumnName("change_version");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_time");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("details");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("device_info");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("digital_signature");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("field_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("new_value");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("note");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("old_value");

                    b.Property<int?>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("record_id");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("severity");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("source_ip");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("table_name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("audit_logs");
                });

            modelBuilder.Entity("YasGMP.Models.AuditLogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("longtext");

                    b.Property<string>("DigitalSignature")
                        .HasColumnType("longtext");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NewValue")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OldValue")
                        .HasColumnType("longtext");

                    b.Property<string>("PerformedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("SessionId")
                        .HasColumnType("longtext");

                    b.Property<string>("SourceIp")
                        .HasColumnType("longtext");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuditLogEntries");
                });

            modelBuilder.Entity("YasGMP.Models.BackupHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BackupTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BackupType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<int>("ChangeVersion")
                        .HasColumnType("int");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("PerformedBy")
                        .HasColumnType("int");

                    b.Property<int?>("RestoreBy")
                        .HasColumnType("int");

                    b.Property<string>("RestoreNote")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<int?>("RestoreOfBackupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RestoreTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("Verified")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("PerformedBy");

                    b.HasIndex("RestoreBy");

                    b.HasIndex("RestoreOfBackupId");

                    b.ToTable("BackupHistories");
                });

            modelBuilder.Entity("YasGMP.Models.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("SiteId")
                        .HasColumnType("int")
                        .HasColumnName("site_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("buildings");
                });

            modelBuilder.Entity("YasGMP.Models.Calibration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Approved")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("approved");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("approved_at");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int")
                        .HasColumnName("approved_by_id");

                    b.Property<DateTime>("CalibrationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("calibration_date");

                    b.Property<string>("CertDoc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cert_doc");

                    b.Property<int>("ChangeVersion")
                        .HasColumnType("int")
                        .HasColumnName("change_version");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comment");

                    b.Property<int>("ComponentId")
                        .HasColumnType("int")
                        .HasColumnName("component_id");

                    b.Property<int?>("ComponentId1")
                        .HasColumnType("int");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int")
                        .HasColumnName("last_modified_by_id");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<int?>("NextCalibrationId")
                        .HasColumnType("int")
                        .HasColumnName("next_calibration_id");

                    b.Property<DateTime>("NextDue")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("next_due");

                    b.Property<int?>("PreviousCalibrationId")
                        .HasColumnType("int")
                        .HasColumnName("previous_calibration_id");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("result");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ComponentId1");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("MachineId");

                    b.HasIndex("NextCalibrationId");

                    b.HasIndex("PreviousCalibrationId");

                    b.HasIndex("SupplierId");

                    b.ToTable("calibrations");
                });

            modelBuilder.Entity("YasGMP.Models.CalibrationAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Action")
                        .HasColumnType("int")
                        .HasColumnName("action");

                    b.Property<int>("CalibrationId")
                        .HasColumnType("int")
                        .HasColumnName("calibration_id");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("changed_at");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("details");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("device_info");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("new_value");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("old_value");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CalibrationId");

                    b.ToTable("calibration_audit");
                });

            modelBuilder.Entity("YasGMP.Models.CalibrationAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("action");

                    b.Property<int>("CalibrationId")
                        .HasColumnType("int")
                        .HasColumnName("calibration_id");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("changed_at");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("new_value");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("note");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("old_value");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CalibrationId");

                    b.HasIndex("UserId");

                    b.ToTable("calibration_audit_log");
                });

            modelBuilder.Entity("YasGMP.Models.CalibrationExportLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExportFormat")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("export_format");

                    b.Property<DateTime>("ExportTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("export_time");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("file_path");

                    b.Property<int?>("FilterComponentId")
                        .HasColumnType("int")
                        .HasColumnName("filter_component_id");

                    b.Property<DateTime?>("FilterDateFrom")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("filter_date_from");

                    b.Property<DateTime?>("FilterDateTo")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("filter_date_to");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("calibration_export_log");
                });

            modelBuilder.Entity("YasGMP.Models.CalibrationSensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CalibrationIntervalDays")
                        .HasColumnType("int")
                        .HasColumnName("calibration_interval_days");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int")
                        .HasColumnName("component_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("IotDeviceId")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("iot_device_id");

                    b.Property<decimal?>("RangeMax")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("range_max");

                    b.Property<decimal?>("RangeMin")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("range_min");

                    b.Property<string>("SensorType")
                        .HasColumnType("longtext")
                        .HasColumnName("sensor_type");

                    b.Property<int?>("SensorTypeId")
                        .HasColumnType("int")
                        .HasColumnName("sensor_type_id");

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("unit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("calibration_sensors");
                });

            modelBuilder.Entity("YasGMP.Models.CapaAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionType")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("action_type");

                    b.Property<int>("CapaId")
                        .HasColumnType("int")
                        .HasColumnName("capa_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("completed_at");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("due_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("capa_actions");
                });

            modelBuilder.Entity("YasGMP.Models.CapaActionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("action_type");

                    b.Property<int>("CapaCaseId")
                        .HasColumnType("int")
                        .HasColumnName("capa_case_id");

                    b.Property<int>("ChangeVersion")
                        .HasColumnType("int")
                        .HasColumnName("change_version");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("note");

                    b.Property<DateTime>("PerformedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("performed_at");

                    b.Property<int?>("PerformedById")
                        .HasColumnType("int")
                        .HasColumnName("performed_by_id");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CapaCaseId");

                    b.HasIndex("PerformedById");

                    b.ToTable("capa_action_log");
                });

            modelBuilder.Entity("YasGMP.Models.CapaCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Actions")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("actions");

                    b.Property<bool>("Approved")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("approved");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("approved_at");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int")
                        .HasColumnName("approved_by_id");

                    b.Property<int?>("AssignedToId")
                        .HasColumnType("int")
                        .HasColumnName("assigned_to_id");

                    b.Property<int>("ChangeVersion")
                        .HasColumnType("int")
                        .HasColumnName("change_version");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_close");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("comments");

                    b.Property<int>("ComponentId")
                        .HasColumnType("int")
                        .HasColumnName("component_id");

                    b.Property<int?>("ComponentId1")
                        .HasColumnType("int");

                    b.Property<string>("CorrectiveAction")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("corrective_action");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<string>("DocFile")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("doc_file");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int")
                        .HasColumnName("last_modified_by_id");

                    b.Property<string>("LinkedFindings")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("linked_findings");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("notes");

                    b.Property<DateTime>("OpenedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_open");

                    b.Property<string>("PreventiveAction")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("preventive_action");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("priority");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("reason");

                    b.Property<string>("RootCause")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("root_cause");

                    b.Property<string>("RootCauseReference")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("root_cause_reference");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("status");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ComponentId1");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("SupplierId");

                    b.ToTable("capa_cases");
                });

            modelBuilder.Entity("YasGMP.Models.CapaStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CapaCaseId")
                        .HasColumnType("int")
                        .HasColumnName("capa_case_id");

                    b.Property<int>("ChangeVersion")
                        .HasColumnType("int")
                        .HasColumnName("change_version");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("changed_at");

                    b.Property<int?>("ChangedById")
                        .HasColumnType("int")
                        .HasColumnName("changed_by");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("NewStatus")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("new_status");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("note");

                    b.Property<string>("OldStatus")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("old_status");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.HasKey("Id");

                    b.HasIndex("CapaCaseId");

                    b.HasIndex("ChangedById");

                    b.ToTable("capa_status_history");
                });

            modelBuilder.Entity("YasGMP.Models.ChangeControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedToId")
                        .HasColumnType("int");

                    b.Property<int?>("CapaCaseId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateApproved")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateImplemented")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateRequested")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateReviewed")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("DocFile")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImpactAssessment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("ImplementationNotes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<int?>("RequestedById")
                        .HasColumnType("int");

                    b.Property<string>("ReviewNotes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("ReviewedById")
                        .HasColumnType("int");

                    b.Property<string>("RiskAssessment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CapaCaseId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("MachineId");

                    b.HasIndex("RequestedById");

                    b.HasIndex("ReviewedById");

                    b.ToTable("ChangeControls");
                });

            modelBuilder.Entity("YasGMP.Models.ChecklistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Expected")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("expected");

                    b.Property<int?>("ItemOrder")
                        .HasColumnType("int")
                        .HasColumnName("item_order");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("label");

                    b.Property<bool?>("Required")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("required");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int")
                        .HasColumnName("template_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("checklist_items");
                });

            modelBuilder.Entity("YasGMP.Models.ChecklistTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("checklist_templates");
                });

            modelBuilder.Entity("YasGMP.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommentText")
                        .HasColumnType("longtext")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("entity");

                    b.Property<int>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("entity_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("YasGMP.Models.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChangeVersion")
                        .HasColumnType("int")
                        .HasColumnName("change_version");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("comments");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("digital_signature");

                    b.Property<DateTime?>("InstallDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("install_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int")
                        .HasColumnName("last_modified_by_id");

                    b.Property<string>("LifecycleState")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("lifecycle_state");

                    b.Property<int>("MachineId")
                        .HasColumnType("int")
                        .HasColumnName("machine_id");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("machine_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("serial_number");

                    b.Property<string>("SopDoc")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("sop_doc");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("source_ip");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("status");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("supplier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("WarrantyUntil")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("warranty_until");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("MachineId");

                    b.ToTable("components");
                });

            modelBuilder.Entity("YasGMP.Models.ComponentDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComponentId")
                        .HasColumnType("int")
                        .HasColumnName("component_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int")
                        .HasColumnName("device_id");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ended_at");

                    b.Property<int?>("SensorModelId")
                        .HasColumnType("int")
                        .HasColumnName("sensor_model_id");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("started_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SensorModelId");

                    b.ToTable("component_devices");
                });

            modelBuilder.Entity("YasGMP.Models.ComponentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ComponentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("component_type_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("ModelCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("model_code");

                    b.Property<string>("ModelName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("model_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ComponentTypeId");

                    b.ToTable("component_models");
                });

            modelBuilder.Entity("YasGMP.Models.ComponentPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComponentId")
                        .HasColumnType("int")
                        .HasColumnName("component_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<decimal>("NominalQty")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("nominal_qty");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("part_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("PartId");

                    b.ToTable("component_parts");
                });

            modelBuilder.Entity("YasGMP.Models.ComponentQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CertificateNumber")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("certificate_number");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int")
                        .HasColumnName("component_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("DocFile")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("doc_file");

                    b.Property<DateTime?>("NextDue")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("next_due");

                    b.Property<DateTime?>("QualificationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("qualification_date");

                    b.Property<string>("SignedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("signed_by");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    b.Property<string>("Type")
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("component_qualifications");
                });

            modelBuilder.Entity("YasGMP.Models.ComponentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("component_types");
                });

            modelBuilder.Entity("YasGMP.Models.ConfigChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("action");

                    b.Property<DateTime?>("ChangeTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("change_time");

                    b.Property<string>("ChangeType")
                        .HasColumnType("longtext")
                        .HasColumnName("change_type");

                    b.Property<int?>("ChangedBy")
                        .HasColumnType("int")
                        .HasColumnName("changed_by");

                    b.Property<string>("ConfigName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("config_name");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Details")
                        .HasColumnType("longtext")
                        .HasColumnName("details");

                    b.Property<string>("NewValue")
                        .HasColumnType("longtext")
                        .HasColumnName("new_value");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<string>("OldValue")
                        .HasColumnType("longtext")
                        .HasColumnName("old_value");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ChangedBy");

                    b.ToTable("config_change_log");
                });

            modelBuilder.Entity("YasGMP.Models.ContractorAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ExternalContractorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalContractorId");

                    b.HasIndex("UserId");

                    b.ToTable("ContractorAuditLog");
                });

            modelBuilder.Entity("YasGMP.Models.ContractorIntervention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChangeVersion")
                        .HasColumnType("int")
                        .HasColumnName("change_version");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("comments");

                    b.Property<int>("ComponentId")
                        .HasColumnType("int")
                        .HasColumnName("component_id");

                    b.Property<int>("ContractorId")
                        .HasColumnType("int")
                        .HasColumnName("contractor_id");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("digital_signature");

                    b.Property<string>("DocFile")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("doc_file");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<int?>("ExternalContractorId")
                        .HasColumnType("int");

                    b.Property<bool>("GmpCompliance")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("gmp_compliance");

                    b.Property<DateTime>("InterventionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("intervention_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int")
                        .HasColumnName("last_modified_by_id");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("notes");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("result");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("source_ip");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("ExternalContractorId");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("contractor_interventions");
                });

            modelBuilder.Entity("YasGMP.Models.ContractorInterventionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("action");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("changed_at");

                    b.Property<string>("Details")
                        .HasColumnType("longtext")
                        .HasColumnName("details");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("device_info");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("digital_signature");

                    b.Property<int>("InterventionId")
                        .HasColumnType("int")
                        .HasColumnName("intervention_id");

                    b.Property<string>("NewValue")
                        .HasColumnType("longtext")
                        .HasColumnName("new_value");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<string>("OldValue")
                        .HasColumnType("longtext")
                        .HasColumnName("old_value");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("session_id");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("InterventionId")
                        .HasDatabaseName("fk_cia_intervention");

                    b.HasIndex("UserId")
                        .HasDatabaseName("fk_cia_user");

                    b.ToTable("contractor_intervention_audit", (string)null);
                });

            modelBuilder.Entity("YasGMP.Models.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConfigJson")
                        .HasColumnType("longtext")
                        .HasColumnName("config_json");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("DashboardName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("dashboard_name");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("dashboards");
                });

            modelBuilder.Entity("YasGMP.Models.DelegatedPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int")
                        .HasColumnName("approved_by");

                    b.Property<int>("ChangeVersion")
                        .HasColumnType("int")
                        .HasColumnName("change_version");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_at");

                    b.Property<int>("FromUserId")
                        .HasColumnType("int")
                        .HasColumnName("from_user_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_revoked");

                    b.Property<string>("Note")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("note");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<string>("SessionId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("session_id");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("source_ip");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_at");

                    b.Property<int>("ToUserId")
                        .HasColumnType("int")
                        .HasColumnName("to_user_id");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("FromUserId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("ToUserId");

                    b.ToTable("delegated_permissions");
                });

            modelBuilder.Entity("YasGMP.Models.DeleteLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("action");

                    b.Property<string>("BackupFile")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("backup_file");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("DeleteType")
                        .HasColumnType("longtext")
                        .HasColumnName("delete_type");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Details")
                        .HasColumnType("longtext")
                        .HasColumnName("details");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<int?>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("record_id");

                    b.Property<bool?>("Recoverable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("recoverable");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<string>("TableName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("table_name");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("DeletedBy");

                    b.ToTable("delete_log");
                });

            modelBuilder.Entity("YasGMP.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("YasGMP.Models.Deviation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double");

                    b.Property<int?>("AssignedInvestigatorId")
                        .HasColumnType("int");

                    b.Property<string>("AssignedInvestigatorName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AttachmentIds")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AuditNote")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ClosureComment")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Code")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("CorrectiveActions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("InvestigationStartedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCritical")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<int?>("LinkedCapaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ReportedById")
                        .HasColumnType("int");

                    b.Property<int>("RiskScore")
                        .HasColumnType("int");

                    b.Property<string>("RootCause")
                        .HasMaxLength(800)
                        .HasColumnType("varchar(800)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedInvestigatorId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("LinkedCapaId");

                    b.HasIndex("ReportedById");

                    b.ToTable("Deviations");
                });

            modelBuilder.Entity("YasGMP.Models.DeviationAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("action");

                    b.Property<decimal?>("AiAnomalyScore")
                        .HasColumnType("decimal(5,4)")
                        .HasColumnName("ai_anomaly_score");

                    b.Property<string>("ApprovalStatusRaw")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("approval_status");

                    b.Property<DateTime?>("ApprovalTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("approval_time");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int")
                        .HasColumnName("approved_by");

                    b.Property<int?>("AuditTrailId")
                        .HasColumnType("int")
                        .HasColumnName("audit_trail_id");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("changed_at");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Details")
                        .HasColumnType("longtext")
                        .HasColumnName("details");

                    b.Property<int>("DeviationId")
                        .HasColumnType("int")
                        .HasColumnName("deviation_id");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("longtext")
                        .HasColumnName("device_info");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("digital_signature");

                    b.Property<string>("ExportStatusRaw")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("export_status");

                    b.Property<DateTime?>("ExportTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("export_time");

                    b.Property<int?>("ExportedBy")
                        .HasColumnType("int")
                        .HasColumnName("exported_by");

                    b.Property<int?>("IotEventId")
                        .HasColumnType("int")
                        .HasColumnName("iot_event_id");

                    b.Property<string>("NewValue")
                        .HasColumnType("longtext")
                        .HasColumnName("new_value");

                    b.Property<string>("OldValue")
                        .HasColumnType("longtext")
                        .HasColumnName("old_value");

                    b.Property<string>("RegulatoryStatusRaw")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("regulatory_status");

                    b.Property<string>("RelatedFile")
                        .HasColumnType("longtext")
                        .HasColumnName("related_file");

                    b.Property<string>("RelatedPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("related_photo");

                    b.Property<string>("RestorationReference")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("restoration_reference");

                    b.Property<bool?>("RestoredFromSnapshot")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("restored_from_snapshot");

                    b.Property<string>("SessionId")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("session_id");

                    b.Property<string>("SignatureMethod")
                        .HasColumnType("longtext")
                        .HasColumnName("signature_method");

                    b.Property<string>("SignatureTypeRaw")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("signature_type");

                    b.Property<bool?>("SignatureValid")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("signature_valid");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("source_ip");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<bool?>("Validated")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("validated");

                    b.HasKey("Id");

                    b.HasIndex("DeviationId");

                    b.ToTable("deviation_audit");
                });

            modelBuilder.Entity("YasGMP.Models.DigitalSignature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("device_info");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("ip_address");

                    b.Property<string>("Method")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("method");

                    b.Property<string>("Note")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("note");

                    b.Property<string>("PublicKey")
                        .HasColumnType("longtext")
                        .HasColumnName("public_key");

                    b.Property<int>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("record_id");

                    b.Property<string>("SignatureHash")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("signature_hash");

                    b.Property<DateTime?>("SignedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("signed_at");

                    b.Property<int?>("SparePartId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("status");

                    b.Property<string>("TableName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("table_name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("SparePartId");

                    b.HasIndex("UserId");

                    b.ToTable("digital_signatures");
                });

            modelBuilder.Entity("YasGMP.Models.DocumentAuditEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("longtext")
                        .HasColumnName("action");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("DocumentControlId")
                        .HasColumnType("int")
                        .HasColumnName("documentcontrol_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("DocumentControlId");

                    b.HasIndex("UserId");

                    b.ToTable("document_audit_events");
                });

            modelBuilder.Entity("YasGMP.Models.DocumentControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("approved_at");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int")
                        .HasColumnName("approved_by_id");

                    b.Property<int?>("AssignedToUserId")
                        .HasColumnType("int")
                        .HasColumnName("assigned_to");

                    b.Property<string>("Attachments")
                        .HasColumnType("longtext")
                        .HasColumnName("attachments");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("device_info");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("digital_signature");

                    b.Property<string>("DocumentType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("document_type");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expiry_date");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("file_path");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_locked");

                    b.Property<string>("LinkedChangeControls")
                        .HasColumnType("longtext")
                        .HasColumnName("linked_change_controls");

                    b.Property<int?>("QualificationId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedModule")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("related_module");

                    b.Property<int?>("RelatedRecordId")
                        .HasColumnType("int")
                        .HasColumnName("related_record_id");

                    b.Property<string>("Revision")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("revision");

                    b.Property<string>("RevisionHistory")
                        .HasColumnType("longtext")
                        .HasColumnName("revision_history");

                    b.Property<int?>("RiskAssessmentId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("session_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("status");

                    b.Property<string>("StatusHistory")
                        .HasColumnType("longtext")
                        .HasColumnName("status_history");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<int?>("TrainingRecordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("QualificationId");

                    b.HasIndex("RiskAssessmentId");

                    b.HasIndex("TrainingRecordId");

                    b.ToTable("documentcontrol");
                });

            modelBuilder.Entity("YasGMP.Models.DocumentVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by_id");

                    b.Property<int>("DocumentControlId")
                        .HasColumnType("int")
                        .HasColumnName("documentcontrol_id");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("file_path");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<string>("Revision")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("revision");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DocumentControlId");

                    b.ToTable("document_versions");
                });

            modelBuilder.Entity("YasGMP.Models.EntityAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("action");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Details")
                        .HasColumnType("longtext")
                        .HasColumnName("details");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("device_info");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("digital_signature");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("entity");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("entity_id");

                    b.Property<string>("SessionId")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("session_id");

                    b.Property<string>("SignatureHash")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("signature_hash");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("source_ip");

                    b.Property<string>("Status")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("status");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("entity_audit_log");
                });

            modelBuilder.Entity("YasGMP.Models.EntityTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("entity");

                    b.Property<int>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("entity_id");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("entity_tags");
                });

            modelBuilder.Entity("YasGMP.Models.ExportAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("device_info");

                    b.Property<string>("ExportType")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("export_type");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("file_path");

                    b.Property<string>("FilterCriteria")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("filter_criteria");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("source_ip");

                    b.Property<string>("Timestamp")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("timestamp");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("export_audit_log");
                });

            modelBuilder.Entity("YasGMP.Models.ExportPrintLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Details")
                        .HasColumnType("longtext")
                        .HasColumnName("details");

                    b.Property<DateTime?>("ExportTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("export_time");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("file_path");

                    b.Property<string>("FilterUsed")
                        .HasColumnType("longtext")
                        .HasColumnName("filter_used");

                    b.Property<string>("Format")
                        .HasColumnType("longtext")
                        .HasColumnName("format");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<string>("TableName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("table_name");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("export_print_log");
                });

            modelBuilder.Entity("YasGMP.Models.ExternalContractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(180)
                        .HasColumnType("varchar(180)");

                    b.Property<string>("BlacklistReason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Certificates")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<bool>("IsBlacklisted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<decimal?>("RiskScore")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(48)
                        .HasColumnType("varchar(48)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("ExternalContractors");
                });

            modelBuilder.Entity("YasGMP.Models.FailureMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("code");

                    b.Property<int?>("ComponentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("component_type_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<int?>("SeverityDefault")
                        .HasColumnType("int")
                        .HasColumnName("severity_default");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ComponentTypeId");

                    b.ToTable("failure_modes");
                });

            modelBuilder.Entity("YasGMP.Models.ForensicUserChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ChangeVersion")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ChangedBy")
                        .HasColumnType("int");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NewRole")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("NewStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("OldRole")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("OldStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("TargetUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("TargetUserId");

                    b.ToTable("ForensicUserChangeLogs");
                });

            modelBuilder.Entity("YasGMP.Models.Incident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double")
                        .HasColumnName("anomaly_score");

                    b.Property<string>("AssignedInvestigator")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("assigned_investigator");

                    b.Property<int?>("AssignedToId")
                        .HasColumnType("int")
                        .HasColumnName("assigned_to_id");

                    b.Property<int?>("CapaCaseId")
                        .HasColumnType("int")
                        .HasColumnName("capa_case_id");

                    b.Property<string>("Classification")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("classification");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("closed_at");

                    b.Property<int?>("ClosedById")
                        .HasColumnType("int")
                        .HasColumnName("closed_by_id");

                    b.Property<string>("ClosureComment")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("closure_comment");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<DateTime>("DetectedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("detected_at");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<bool>("IsCritical")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_critical");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int")
                        .HasColumnName("last_modified_by_id");

                    b.Property<int?>("LinkedCapaId")
                        .HasColumnType("int")
                        .HasColumnName("linked_capa_id");

                    b.Property<int?>("LinkedDeviationId")
                        .HasColumnType("int")
                        .HasColumnName("linked_deviation_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("notes");

                    b.Property<string>("Priority")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("ReportedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("reported_at");

                    b.Property<int?>("ReportedById")
                        .HasColumnType("int")
                        .HasColumnName("reported_by_id");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("int")
                        .HasColumnName("risk_level");

                    b.Property<string>("RootCause")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("root_cause");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("type");

                    b.Property<int?>("WorkOrderId")
                        .HasColumnType("int")
                        .HasColumnName("work_order_id");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CapaCaseId");

                    b.HasIndex("ClosedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("ReportedById");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("incidents");
                });

            modelBuilder.Entity("YasGMP.Models.IncidentAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActionAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("IncidentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Result")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("RootCause")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("UserId");

                    b.ToTable("IncidentActions");
                });

            modelBuilder.Entity("YasGMP.Models.IncidentAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Action")
                        .HasColumnType("int")
                        .HasColumnName("action");

                    b.Property<DateTime>("ActionAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("action_at");

                    b.Property<int?>("CapaId")
                        .HasColumnType("int")
                        .HasColumnName("capa_id");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("device_info");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<int>("IncidentId")
                        .HasColumnType("int")
                        .HasColumnName("incident_id");

                    b.Property<string>("InspectorNote")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("inspector_note");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("integrity_hash");

                    b.Property<string>("NewValue")
                        .HasColumnType("longtext")
                        .HasColumnName("new_value");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("note");

                    b.Property<string>("OldValue")
                        .HasColumnType("longtext")
                        .HasColumnName("old_value");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("source_ip");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int?>("WorkOrderId")
                        .HasColumnType("int")
                        .HasColumnName("work_order_id");

                    b.HasKey("Id");

                    b.HasIndex("CapaId");

                    b.HasIndex("IncidentId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("incident_audit");
                });

            modelBuilder.Entity("YasGMP.Models.IncidentAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("IncidentReportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IncidentReportId");

                    b.HasIndex("UserId");

                    b.ToTable("IncidentAuditLog");
                });

            modelBuilder.Entity("YasGMP.Models.IncidentLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionsTaken")
                        .HasColumnType("longtext");

                    b.Property<string>("Attachments")
                        .HasColumnType("longtext");

                    b.Property<int?>("CapaCaseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DetectedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DigitalSignature")
                        .HasColumnType("longtext");

                    b.Property<string>("FollowUp")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int?>("ReportedById")
                        .HasColumnType("int");

                    b.Property<bool>("Resolved")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ResolvedById")
                        .HasColumnType("int");

                    b.Property<string>("RootCause")
                        .HasColumnType("longtext");

                    b.Property<string>("Severity")
                        .HasColumnType("longtext");

                    b.Property<string>("SourceIp")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CapaCaseId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("ReportedById");

                    b.HasIndex("ResolvedById");

                    b.ToTable("IncidentLogs");
                });

            modelBuilder.Entity("YasGMP.Models.IncidentReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Area")
                        .HasColumnType("longtext");

                    b.Property<string>("AssignedTo")
                        .HasColumnType("longtext");

                    b.Property<int?>("AssignedToId")
                        .HasColumnType("int");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DetectedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("longtext");

                    b.Property<int?>("ImpactScore")
                        .HasColumnType("int");

                    b.Property<string>("IncidentType")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext");

                    b.Property<bool?>("LinkedCAPA")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ReportedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReportedBy")
                        .HasColumnType("longtext");

                    b.Property<int?>("ReportedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ResolvedById")
                        .HasColumnType("int");

                    b.Property<string>("RootCause")
                        .HasColumnType("longtext");

                    b.Property<string>("SessionId")
                        .HasColumnType("longtext");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("MachineId");

                    b.HasIndex("ReportedById");

                    b.HasIndex("ResolvedById");

                    b.ToTable("IncidentReports");
                });

            modelBuilder.Entity("YasGMP.Models.Inspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AiAnalysis")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ai_analysis");

                    b.Property<string>("ApprovalWorkflowJson")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("approval_workflow_json");

                    b.Property<string>("AttachmentsJson")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("attachments_json");

                    b.Property<string>("AuditFindingRef")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("audit_finding_ref");

                    b.Property<int?>("CapaCaseId")
                        .HasColumnType("int")
                        .HasColumnName("capa_case_id");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("digital_signature");

                    b.Property<string>("DocFile")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("doc_file");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("inspection_date");

                    b.Property<string>("InspectorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("inspector_name");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int")
                        .HasColumnName("last_modified_by_id");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("notes");

                    b.Property<int?>("RelatedMachineId")
                        .HasColumnType("int")
                        .HasColumnName("related_machine_id");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("result");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("source_ip");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("CapaCaseId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("RelatedMachineId");

                    b.HasIndex("SupplierId");

                    b.ToTable("inspection");
                });

            modelBuilder.Entity("YasGMP.Models.IntegrationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiEndpoint")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Processed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RequestJson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ResponseJson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("IntegrationLogs");
                });

            modelBuilder.Entity("YasGMP.Models.InventoryTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("part_id");

                    b.Property<int?>("PerformedById")
                        .HasColumnType("int")
                        .HasColumnName("performed_by");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("RelatedDocument")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("related_document");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("transaction_date");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("transaction_type");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("PartId")
                        .HasDatabaseName("fk_it_part");

                    b.HasIndex("PerformedById")
                        .HasDatabaseName("fk_it_user");

                    b.HasIndex("WarehouseId")
                        .HasDatabaseName("fk_it_warehouse");

                    b.ToTable("inventory_transactions", (string)null);
                });

            modelBuilder.Entity("YasGMP.Models.IotAnomalyLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DetectedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("detected_at");

                    b.Property<string>("DetectedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("detected_by");

                    b.Property<string>("ResolutionNote")
                        .HasColumnType("longtext")
                        .HasColumnName("resolution_note");

                    b.Property<bool?>("Resolved")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("resolved");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("resolved_at");

                    b.Property<int?>("SensorDataId")
                        .HasColumnType("int")
                        .HasColumnName("sensor_data_id");

                    b.Property<string>("Severity")
                        .HasColumnType("longtext")
                        .HasColumnName("severity");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("SensorDataId");

                    b.ToTable("iot_anomaly_log");
                });

            modelBuilder.Entity("YasGMP.Models.IotDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("DeviceUid")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("device_uid");

                    b.Property<string>("Firmware")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("firmware");

                    b.Property<int?>("GatewayId")
                        .HasColumnType("int")
                        .HasColumnName("gateway_id");

                    b.Property<DateTime?>("LastSeen")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_seen");

                    b.Property<string>("Model")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("model");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("Vendor")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("vendor");

                    b.HasKey("Id");

                    b.HasIndex("GatewayId");

                    b.ToTable("iot_devices");
                });

            modelBuilder.Entity("YasGMP.Models.IotEventAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("iot_event_audit");
                });

            modelBuilder.Entity("YasGMP.Models.IotGateway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("iot_gateways");
                });

            modelBuilder.Entity("YasGMP.Models.IotSensorData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AnomalyDetected")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("anomaly_detected");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int")
                        .HasColumnName("component_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("DataType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("data_type");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("device_id");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<bool?>("Processed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("processed");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp");

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("unit");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("unit_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("UnitId");

                    b.ToTable("iot_sensor_data");
                });

            modelBuilder.Entity("YasGMP.Models.IrregularitiesLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Details")
                        .HasColumnType("longtext")
                        .HasColumnName("details");

                    b.Property<DateTime?>("DetectedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("detected_at");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<int?>("RelatedId")
                        .HasColumnType("int")
                        .HasColumnName("related_id");

                    b.Property<string>("RelatedType")
                        .HasColumnType("longtext")
                        .HasColumnName("related_type");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("irregularities_log");
                });

            modelBuilder.Entity("YasGMP.Models.JobTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("job_titles");
                });

            modelBuilder.Entity("YasGMP.Models.KpiWidget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)");

                    b.Property<string>("DrilldownKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Icon")
                        .HasMaxLength(48)
                        .HasColumnType("varchar(48)");

                    b.Property<bool>("IsAlert")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Trend")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Unit")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ValueText")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("KpiWidgets");
                });

            modelBuilder.Entity("YasGMP.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("locations");
                });

            modelBuilder.Entity("YasGMP.Models.LogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Details")
                        .HasColumnType("longtext");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("longtext");

                    b.Property<string>("DigitalSignature")
                        .HasColumnType("longtext");

                    b.Property<string>("Entity")
                        .HasColumnType("longtext");

                    b.Property<string>("EntryHash")
                        .HasColumnType("longtext");

                    b.Property<string>("ExtensionJson")
                        .HasColumnType("longtext");

                    b.Property<string>("FieldName")
                        .HasColumnType("longtext");

                    b.Property<string>("GeoLocation")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAutomated")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LinkedAttachmentPath")
                        .HasColumnType("longtext");

                    b.Property<string>("NewValue")
                        .HasColumnType("longtext");

                    b.Property<int?>("NextLogEntryId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("OldValue")
                        .HasColumnType("longtext");

                    b.Property<int?>("PreviousLogEntryId")
                        .HasColumnType("int");

                    b.Property<string>("RecordId")
                        .HasColumnType("longtext");

                    b.Property<string>("Regulator")
                        .HasColumnType("longtext");

                    b.Property<int?>("RelatedCaseId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedCaseType")
                        .HasColumnType("longtext");

                    b.Property<string>("SessionId")
                        .HasColumnType("longtext");

                    b.Property<string>("Severity")
                        .HasColumnType("longtext");

                    b.Property<string>("SourceIp")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserRole")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("YasGMP.Models.LoginAttemptLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double");

                    b.Property<DateTime>("AttemptTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("longtext");

                    b.Property<string>("DigitalSignature")
                        .HasColumnType("longtext");

                    b.Property<string>("ExtensionJson")
                        .HasColumnType("longtext");

                    b.Property<string>("FailReason")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("FailedAttemptsCount")
                        .HasColumnType("int");

                    b.Property<string>("GeoLocation")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAutomated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockedOut")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("NextLoginAttemptId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int?>("PreviousLoginAttemptId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasColumnType("longtext");

                    b.Property<string>("SourceIp")
                        .HasColumnType("longtext");

                    b.Property<bool>("Success")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TwoFactorAttempted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("TwoFactorSuccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UsernameAttempt")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginAttemptLogs");
                });

            modelBuilder.Entity("YasGMP.Models.LookupDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("DomainCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("domain_code");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("lookup_domain");
                });

            modelBuilder.Entity("YasGMP.Models.LookupValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("DomainId")
                        .HasColumnType("int")
                        .HasColumnName("domain_id");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("ValueCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("value_code");

                    b.Property<string>("ValueLabel")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("value_label");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.ToTable("lookup_value");
                });

            modelBuilder.Entity("YasGMP.Models.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AcquisitionCost")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("acquisition_cost");

                    b.Property<string>("CloudDeviceGuid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("cloud_device_guid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DecommissionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("decommission_date");

                    b.Property<string>("DecommissionReason")
                        .HasColumnType("longtext")
                        .HasColumnName("decommission_reason");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("description");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<DateTime?>("InstallDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("install_date");

                    b.Property<string>("InternalCode")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("internal_code");

                    b.Property<string>("IoTDeviceId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("iot_device_id");

                    b.Property<bool>("IsCritical")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_critical");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int")
                        .HasColumnName("last_modified_by_id");

                    b.Property<string>("LifecyclePhase")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("lifecycle_phase");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("location");

                    b.Property<string>("MachineType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("machine_type");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("manufacturer");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("note");

                    b.Property<DateTime?>("ProcurementDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("procurement_date");

                    b.Property<string>("QrCode")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("qr_code");

                    b.Property<string>("QrPayload")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("qr_payload");

                    b.Property<string>("ResponsibleParty")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("responsible_party");

                    b.Property<string>("RfidTag")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("rfid_tag");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("serial_number");

                    b.Property<string>("Status")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("status");

                    b.Property<string>("UrsDoc")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("urs_doc");

                    b.Property<DateTime?>("WarrantyUntil")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("warranty_until");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("machines");
                });

            modelBuilder.Entity("YasGMP.Models.MachineComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChangeVersion")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Documents")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("InstallDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IoTDeviceId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsCritical")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("LifecyclePhase")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RfidTag")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("SopDoc")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Supplier")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("WarrantyExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("WarrantyUntil")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("MachineId");

                    b.ToTable("MachineComponents");
                });

            modelBuilder.Entity("YasGMP.Models.MachineLifecycleEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("DocFile")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<int?>("PerformedById")
                        .HasColumnType("int");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("MachineId");

                    b.HasIndex("PerformedById");

                    b.ToTable("MachineLifecycleEvents");
                });

            modelBuilder.Entity("YasGMP.Models.MachineModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("MachineTypeId")
                        .HasColumnType("int")
                        .HasColumnName("machine_type_id");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int")
                        .HasColumnName("manufacturer_id");

                    b.Property<string>("ModelCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("model_code");

                    b.Property<string>("ModelName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("model_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("MachineTypeId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("machine_models");
                });

            modelBuilder.Entity("YasGMP.Models.MachineStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("machine_statuses");
                });

            modelBuilder.Entity("YasGMP.Models.MachineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("machine_types");
                });

            modelBuilder.Entity("YasGMP.Models.MaintenanceExecutionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<string>("ChecklistFile")
                        .HasColumnType("longtext");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("EntryHash")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ExecutedById")
                        .HasColumnType("int");

                    b.Property<string>("InspectorNote")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("IoTDeviceId")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAutomated")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("MaintenanceType")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("PerformedActions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedCaseId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedCaseType")
                        .HasColumnType("longtext");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RootCause")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("UsedParts")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("ExecutedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("PlanId");

                    b.ToTable("MaintenanceExecutionLogs");
                });

            modelBuilder.Entity("YasGMP.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("manufacturers");
                });

            modelBuilder.Entity("YasGMP.Models.MeasurementUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("measurement_units");
                });

            modelBuilder.Entity("YasGMP.Models.MobileDeviceLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("device_info");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("location");

                    b.Property<DateTime?>("LoginTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("login_time");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("logout_time");

                    b.Property<string>("OsVersion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("os_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("mobile_device_log");
                });

            modelBuilder.Entity("YasGMP.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AckedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("AckedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Entity")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Link")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<DateTime?>("MutedUntil")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Recipient")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("RecipientId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientList")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Recipients")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<string>("Sender")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<int?>("SenderUserId")
                        .HasColumnType("int");

                    b.Property<string>("SenderUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("SessionId")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("YasGMP.Models.NotificationChannelEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int?>("NotificationLogId")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationLogId");

                    b.ToTable("NotificationChannelEvents");
                });

            modelBuilder.Entity("YasGMP.Models.NotificationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActionedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double");

                    b.Property<string>("AuditNote")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("FallbackChannel")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("GeoLocation")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsEscalated")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Priority")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("RelatedId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedType")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Status")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationLogs");
                });

            modelBuilder.Entity("YasGMP.Models.NotificationQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Channel")
                        .HasColumnType("longtext")
                        .HasColumnName("channel");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("LastError")
                        .HasColumnType("longtext")
                        .HasColumnName("last_error");

                    b.Property<string>("Payload")
                        .HasColumnType("longtext")
                        .HasColumnName("payload");

                    b.Property<int?>("RecipientUserId")
                        .HasColumnType("int")
                        .HasColumnName("recipient_user_id");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("scheduled_at");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("sent_at");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int")
                        .HasColumnName("template_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("RecipientUserId");

                    b.HasIndex("TemplateId");

                    b.ToTable("notification_queue");
                });

            modelBuilder.Entity("YasGMP.Models.NotificationTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("longtext")
                        .HasColumnName("body");

                    b.Property<string>("Channel")
                        .HasColumnType("longtext")
                        .HasColumnName("channel");

                    b.Property<string>("Code")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("Subject")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("subject");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("notification_templates");
                });

            modelBuilder.Entity("YasGMP.Models.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double");

                    b.Property<string>("Barcode")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("Blocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DefaultSupplierId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("DigitalSignature")
                        .HasColumnType("longtext");

                    b.Property<string>("Documents")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Image")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("MinStockAlert")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("RFID")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("RegulatoryCertificates")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SerialOrLot")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("SourceIp")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Supplier")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime?>("WarrantyUntil")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultSupplierId");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("YasGMP.Models.PartBom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChildPartId")
                        .HasColumnType("int")
                        .HasColumnName("child_part_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("ParentPartId")
                        .HasColumnType("int")
                        .HasColumnName("parent_part_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ChildPartId");

                    b.HasIndex("ParentPartId");

                    b.ToTable("part_bom");
                });

            modelBuilder.Entity("YasGMP.Models.PartChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ChangedById")
                        .HasColumnType("int");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NewValue")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<string>("Note")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("OldValue")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("ChangedById");

                    b.HasIndex("PartId");

                    b.ToTable("PartChangeLogs");
                });

            modelBuilder.Entity("YasGMP.Models.PartSupplierPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double");

                    b.Property<string>("BlockReason")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ContractDocument")
                        .HasColumnType("longtext");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DigitalSignature")
                        .HasColumnType("longtext");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("double");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<int?>("LeadTimeDays")
                        .HasColumnType("int");

                    b.Property<int?>("MinOrderQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PriceWithVat")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Region")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("SourceIp")
                        .HasColumnType("longtext");

                    b.Property<int?>("SparePartId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal?>("Surcharge")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("VatPercent")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("PartId");

                    b.HasIndex("SparePartId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PartSupplierPrices");
                });

            modelBuilder.Entity("YasGMP.Models.PartUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("IssuedById")
                        .HasColumnType("int");

                    b.Property<string>("LotNumber")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int?>("MachineComponentId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Warranty")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("WorkOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IssuedById");

                    b.HasIndex("MachineComponentId");

                    b.HasIndex("PartId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("PartUsages");
                });

            modelBuilder.Entity("YasGMP.Models.PartUsageAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PartUsageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartUsageId");

                    b.HasIndex("UserId");

                    b.ToTable("PartUsageAuditLogs");
                });

            modelBuilder.Entity("YasGMP.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChangeVersion")
                        .HasColumnType("int")
                        .HasColumnName("change_version");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("code");

                    b.Property<string>("ComplianceTags")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("compliance_tags");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<string>("Group")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("group");

                    b.Property<bool>("IsCritical")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("critical");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int")
                        .HasColumnName("last_modified_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("note");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<int?>("PermissionType")
                        .HasColumnType("int")
                        .HasColumnName("permission_type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("ParentId");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("YasGMP.Models.PermissionChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("action");

                    b.Property<DateTime?>("ChangeTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("change_time");

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("change_type");

                    b.Property<int>("ChangedBy")
                        .HasColumnType("int")
                        .HasColumnName("changed_by");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Details")
                        .HasColumnType("longtext")
                        .HasColumnName("details");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expires_at");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("session_id");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("permission_change_log");
                });

            modelBuilder.Entity("YasGMP.Models.PermissionRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<DateTime?>("RequestedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("requested_at");

                    b.Property<string>("ReviewComment")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("review_comment");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("reviewed_at");

                    b.Property<int?>("ReviewedBy")
                        .HasColumnType("int")
                        .HasColumnName("reviewed_by");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("ReviewedBy");

                    b.HasIndex("UserId");

                    b.ToTable("permission_requests");
                });

            modelBuilder.Entity("YasGMP.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("approved_at");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int")
                        .HasColumnName("approved_by_id");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comment");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int")
                        .HasColumnName("component_id");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("device_info");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("file_path");

                    b.Property<long?>("FileSizeBytes")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size_bytes");

                    b.Property<string>("Hash")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("hash");

                    b.Property<int?>("IncidentReportId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_approved");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_original");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int")
                        .HasColumnName("last_modified_by_id");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.Property<int?>("MachineComponentId")
                        .HasColumnType("int");

                    b.Property<int?>("NextPhotoId")
                        .HasColumnType("int")
                        .HasColumnName("next_photo_id");

                    b.Property<string>("Note")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("note");

                    b.Property<string>("OriginalFileName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("original_file_name");

                    b.Property<int?>("PreviousPhotoId")
                        .HasColumnType("int")
                        .HasColumnName("previous_photo_id");

                    b.Property<string>("RecognitionData")
                        .HasMaxLength(4096)
                        .HasColumnType("varchar(4096)")
                        .HasColumnName("recognition_data");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("session_id");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<string>("Status")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("uploaded_at");

                    b.Property<int?>("UploadedById")
                        .HasColumnType("int")
                        .HasColumnName("uploaded_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.Property<string>("Watermark")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("watermark");

                    b.Property<int?>("WorkOrderId")
                        .HasColumnType("int")
                        .HasColumnName("work_order_id");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("ComponentId");

                    b.HasIndex("IncidentReportId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("MachineComponentId");

                    b.HasIndex("NextPhotoId");

                    b.HasIndex("PreviousPhotoId");

                    b.HasIndex("UploadedById");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("photo");
                });

            modelBuilder.Entity("YasGMP.Models.PpmPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("EffectiveFrom")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("effective_from");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("effective_to");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<int>("MachineId")
                        .HasColumnType("int")
                        .HasColumnName("machine_id");

                    b.Property<string>("PlanJson")
                        .HasColumnType("longtext")
                        .HasColumnName("plan_json");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.ToTable("ppm_plans");
                });

            modelBuilder.Entity("YasGMP.Models.PreventiveMaintenancePlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AiRecommendation")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double");

                    b.Property<string>("Attachments")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ChecklistFile")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Frequency")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("GeoLocation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActiveVersion")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAutomated")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastExecuted")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("NextDue")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<int?>("PreviousVersionId")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresNotification")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ResponsibleUserId")
                        .HasColumnType("int");

                    b.Property<double?>("RiskScore")
                        .HasColumnType("double");

                    b.Property<string>("SessionId")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Status")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("MachineId");

                    b.HasIndex("PreviousVersionId");

                    b.HasIndex("ResponsibleUserId");

                    b.ToTable("PreventiveMaintenancePlans");
                });

            modelBuilder.Entity("YasGMP.Models.ProductRecallLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double");

                    b.Property<string>("Attachments")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ClosedById")
                        .HasColumnType("int");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<int?>("LinkedCapaId")
                        .HasColumnType("int");

                    b.Property<int?>("LinkedIncidentId")
                        .HasColumnType("int");

                    b.Property<int?>("LinkedInspectionId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Reason")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("RecallAction")
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)");

                    b.Property<DateTime>("RecallDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RecallResult")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("RecalledById")
                        .HasColumnType("int");

                    b.Property<string>("Regulator")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<int>("RelatedId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedType")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ClosedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("LinkedCapaId");

                    b.HasIndex("LinkedIncidentId");

                    b.HasIndex("LinkedInspectionId");

                    b.HasIndex("RecalledById");

                    b.ToTable("ProductRecallLogs");
                });

            modelBuilder.Entity("YasGMP.Models.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<string>("CertificateNumber")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("QualifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("ComponentId");

                    b.HasIndex("MachineId");

                    b.HasIndex("QualifiedById");

                    b.HasIndex("SupplierId");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("YasGMP.Models.QualificationAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("QualificationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QualificationId");

                    b.HasIndex("UserId");

                    b.ToTable("QualificationAuditLogs");
                });

            modelBuilder.Entity("YasGMP.Models.QualityEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Actions")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("actions");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateClose")
                        .HasColumnType("date")
                        .HasColumnName("date_close");

                    b.Property<DateTime?>("DateOpen")
                        .HasColumnType("date")
                        .HasColumnName("date_open");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<string>("DocFile")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("doc_file");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("event_type");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int")
                        .HasColumnName("last_modified_by_id");

                    b.Property<int?>("RelatedComponentId")
                        .HasColumnType("int")
                        .HasColumnName("related_component");

                    b.Property<int?>("RelatedMachineId")
                        .HasColumnType("int")
                        .HasColumnName("related_machine");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("status");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("RelatedComponentId")
                        .HasDatabaseName("fk_qe_component");

                    b.HasIndex("RelatedMachineId")
                        .HasDatabaseName("fk_qe_machine");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("idx_qe_status_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("idx_qe_type_id");

                    b.ToTable("quality_events", (string)null);
                });

            modelBuilder.Entity("YasGMP.Models.RefDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("ref_domain");
                });

            modelBuilder.Entity("YasGMP.Models.RefValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("DomainId")
                        .HasColumnType("int")
                        .HasColumnName("domain_id");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("label");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.ToTable("ref_value");
                });

            modelBuilder.Entity("YasGMP.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnalyticsJson")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double");

                    b.Property<string>("Attachments")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("GeneratedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("GeneratedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GeoLocation")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<int?>("LinkedEntityId")
                        .HasColumnType("int");

                    b.Property<string>("LinkedEntityType")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Parameters")
                        .HasColumnType("longtext");

                    b.Property<string>("Regulator")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("ReportType")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int>("VersionNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GeneratedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("YasGMP.Models.ReportSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Format")
                        .HasColumnType("longtext")
                        .HasColumnName("format");

                    b.Property<int?>("GeneratedBy")
                        .HasColumnType("int")
                        .HasColumnName("generated_by");

                    b.Property<DateTime?>("LastGenerated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_generated");

                    b.Property<DateTime?>("NextDue")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("next_due");

                    b.Property<string>("Recipients")
                        .HasColumnType("longtext")
                        .HasColumnName("recipients");

                    b.Property<string>("ReportName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("report_name");

                    b.Property<string>("ScheduleType")
                        .HasColumnType("longtext")
                        .HasColumnName("schedule_type");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("GeneratedBy");

                    b.ToTable("report_schedule");
                });

            modelBuilder.Entity("YasGMP.Models.RequalificationSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnalyticsJson")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double");

                    b.Property<string>("AttachmentsJson")
                        .HasColumnType("longtext");

                    b.Property<int>("ComponentId")
                        .HasColumnType("int");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("GeoLocation")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastQualified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Method")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("NextDue")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ProtocolFile")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Regulator")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<int?>("RelatedCaseId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedCaseType")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<int?>("ResponsibleUserId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("ResponsibleUserId");

                    b.ToTable("RequalificationSchedules");
                });

            modelBuilder.Entity("YasGMP.Models.ResponsibleParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("responsible_parties");
                });

            modelBuilder.Entity("YasGMP.Models.RiskAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionPlan")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<string>("Area")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("AssessedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("AssessedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Attachments")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Category")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("Detection")
                        .HasColumnType("int");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Mitigation")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("Probability")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)");

                    b.Property<int?>("RiskScore")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("OwnerId");

                    b.ToTable("RiskAssessments");
                });

            modelBuilder.Entity("YasGMP.Models.RiskAssessmentAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("RiskAssessmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RiskAssessmentId");

                    b.HasIndex("UserId");

                    b.ToTable("RiskAssessmentAuditLogs");
                });

            modelBuilder.Entity("YasGMP.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ComplianceTags")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("compliance_tags");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int")
                        .HasColumnName("last_modified_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("notes");

                    b.Property<string>("OrgUnit")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("org_unit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("Version")
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("YasGMP.Models.RoleAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("action");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Details")
                        .HasColumnType("longtext")
                        .HasColumnName("details");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("device_info");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("session_id");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("role_audit");
                });

            modelBuilder.Entity("YasGMP.Models.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id")
                        .HasColumnOrder(0);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id")
                        .HasColumnOrder(1);

                    b.Property<bool>("Allowed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allowed");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assigned_at");

                    b.Property<int?>("AssignedById")
                        .HasColumnType("int")
                        .HasColumnName("assigned_by");

                    b.Property<int>("ChangeVersion")
                        .HasColumnType("int")
                        .HasColumnName("change_version");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Note")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("note");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<string>("SessionId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("session_id");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("source_ip");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("AssignedById");

                    b.HasIndex("PermissionId");

                    b.ToTable("role_permissions");
                });

            modelBuilder.Entity("YasGMP.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("int")
                        .HasColumnName("building_id");

                    b.Property<string>("Classification")
                        .HasColumnType("longtext")
                        .HasColumnName("classification");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("YasGMP.Models.ScheduledJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("EscalationNote")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("NextDue")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RecurrencePattern")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.ToTable("ScheduledJobs");
                });

            modelBuilder.Entity("YasGMP.Models.ScheduledJobAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("action");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("changed_at");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Details")
                        .HasColumnType("longtext")
                        .HasColumnName("details");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("device_info");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("digital_signature");

                    b.Property<string>("NewValue")
                        .HasColumnType("longtext")
                        .HasColumnName("new_value");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<string>("OldValue")
                        .HasColumnType("longtext")
                        .HasColumnName("old_value");

                    b.Property<int>("ScheduledJobId")
                        .HasColumnType("int")
                        .HasColumnName("scheduled_job_id");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("session_id");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ScheduledJobId");

                    b.HasIndex("UserId");

                    b.ToTable("scheduled_job_audit_log");
                });

            modelBuilder.Entity("YasGMP.Models.SchemaMigrationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double");

                    b.Property<string>("AttachmentsJson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("EntryHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MigratedById")
                        .HasColumnType("int");

                    b.Property<string>("MigrationScript")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("MigrationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Regulator")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("RollbackScript")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SchemaVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("Success")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("MigratedById");

                    b.ToTable("SchemaMigrationLogs");
                });

            modelBuilder.Entity("YasGMP.Models.SensitiveDataAccessLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AccessTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("AccessType")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)");

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double");

                    b.Property<string>("ApprovalMethod")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<string>("ApproverName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("EntryHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("GeoLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("UserId");

                    b.ToTable("SensitiveDataAccessLogs");
                });

            modelBuilder.Entity("YasGMP.Models.SensorDataLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double")
                        .HasColumnName("anomaly_score");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("approved_at");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int")
                        .HasColumnName("approved_by_id");

                    b.Property<string>("ChainHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("chain_hash");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comment");

                    b.Property<int>("ComponentId")
                        .HasColumnType("int")
                        .HasColumnName("component_id");

                    b.Property<string>("DataFile")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("data_file");

                    b.Property<string>("DataHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("data_hash");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("device_name");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<string>("GeoCoordinates")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("geo_coordinates");

                    b.Property<bool?>("IsAnomaly")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_anomaly");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("location");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("note");

                    b.Property<string>("SensorId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("sensor_id");

                    b.Property<string>("SensorType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("sensor_type");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("session_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("status");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("tag");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("unit");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("ComponentId");

                    b.ToTable("sensor_data_log");
                });

            modelBuilder.Entity("YasGMP.Models.SensorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("ModelCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("model_code");

                    b.Property<string>("SensorTypeCode")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("sensor_type_code");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("unit_code");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("Vendor")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("vendor");

                    b.HasKey("Id");

                    b.ToTable("sensor_models");
                });

            modelBuilder.Entity("YasGMP.Models.SensorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Accuracy")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("accuracy");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("DefaultUnitId")
                        .HasColumnType("int")
                        .HasColumnName("default_unit_id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal?>("RangeMax")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("range_max");

                    b.Property<decimal?>("RangeMin")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("range_min");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("DefaultUnitId");

                    b.ToTable("sensor_types");
                });

            modelBuilder.Entity("YasGMP.Models.SessionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("ImpersonatedById")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsImpersonated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTemporaryEscalation")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LoginAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LogoutAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImpersonatedById");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("SessionLogs");
                });

            modelBuilder.Entity("YasGMP.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSensitive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MaxValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MinValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)");

                    b.Property<string>("Subcategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("YasGMP.Models.SettingAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SettingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SettingId");

                    b.HasIndex("UserId");

                    b.ToTable("SettingAuditLogs");
                });

            modelBuilder.Entity("YasGMP.Models.SettingVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ChangedById")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SettingId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("ChangedById");

                    b.HasIndex("SettingId");

                    b.ToTable("SettingVersions");
                });

            modelBuilder.Entity("YasGMP.Models.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Timezone")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("timezone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("sites");
                });

            modelBuilder.Entity("YasGMP.Models.SopDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AiTags")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("ApprovalTimestamps")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ApproverIds")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Attachments")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ChainHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("NextReviewDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PdfMetadata")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Process")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<int?>("RelatedId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<int>("ResponsibleUserId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewNotes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("VersionNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("ResponsibleUserId");

                    b.ToTable("SopDocuments");
                });

            modelBuilder.Entity("YasGMP.Models.SopDocumentLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("longtext")
                        .HasColumnName("action");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<DateTime?>("PerformedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("performed_at");

                    b.Property<int?>("PerformedBy")
                        .HasColumnType("int")
                        .HasColumnName("performed_by");

                    b.Property<int?>("SopDocumentId")
                        .HasColumnType("int")
                        .HasColumnName("sop_document_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PerformedBy");

                    b.HasIndex("SopDocumentId");

                    b.ToTable("sop_document_log");
                });

            modelBuilder.Entity("YasGMP.Models.SparePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DefaultSupplierId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DefaultSupplierId");

                    b.ToTable("SpareParts");
                });

            modelBuilder.Entity("YasGMP.Models.SqlQueryAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AffectedRows")
                        .HasColumnType("int");

                    b.Property<string>("AffectedTables")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double");

                    b.Property<string>("ChainHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ClientApp")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("ContextDetails")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("DurationMs")
                        .HasColumnType("int");

                    b.Property<string>("EntryHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExportType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("GeoLocation")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<bool>("IsAutomated")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NewDataSnapshot")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("OldDataSnapshot")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("QueryText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("QueryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("QueryType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("RecordIds")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("RelatedCaseId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<bool>("Success")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SqlQueryAuditLogs");
                });

            modelBuilder.Entity("YasGMP.Models.StockChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ChangedById")
                        .HasColumnType("int");

                    b.Property<int>("Delta")
                        .HasColumnType("int");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsCorrection")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NewStock")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChangedById");

                    b.HasIndex("PartId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("StockChangeLogs");
                });

            modelBuilder.Entity("YasGMP.Models.StockLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlarmStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("alarm_status");

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double")
                        .HasColumnName("anomaly_score");

                    b.Property<bool>("AutoReorderTriggered")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("auto_reorder_triggered");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comment");

                    b.Property<int>("DaysBelowMin")
                        .HasColumnType("int")
                        .HasColumnName("days_below_min");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<string>("EntryHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("entry_hash");

                    b.Property<string>("GeoLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("geo_location");

                    b.Property<bool>("IsAutomated")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_automated");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int")
                        .HasColumnName("last_modified_by_id");

                    b.Property<int>("MaxThreshold")
                        .HasColumnType("int")
                        .HasColumnName("max_threshold");

                    b.Property<int>("MinThreshold")
                        .HasColumnType("int")
                        .HasColumnName("min_threshold");

                    b.Property<string>("NewStateSnapshot")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("new_state_snapshot");

                    b.Property<string>("OldStateSnapshot")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("old_state_snapshot");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("part_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int?>("RelatedCaseId")
                        .HasColumnType("int")
                        .HasColumnName("related_case_id");

                    b.Property<string>("RelatedCaseType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("related_case_type");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("session_id");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<int?>("SparePartId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("PartId")
                        .HasDatabaseName("fk_sl_part");

                    b.HasIndex("SparePartId");

                    b.HasIndex("WarehouseId")
                        .HasDatabaseName("fk_sl_warehouse");

                    b.ToTable("stock_levels", (string)null);
                });

            modelBuilder.Entity("YasGMP.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double")
                        .HasColumnName("anomaly_score");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("city");

                    b.Property<string>("ContractFile")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contract_file");

                    b.Property<DateTime?>("CooperationEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("cooperation_end");

                    b.Property<DateTime?>("CooperationStart")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("cooperation_start");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("country");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("EntryHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("entry_hash");

                    b.Property<string>("ExternalCertificationId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("external_certification_id");

                    b.Property<string>("GmpComment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("gmp_comment");

                    b.Property<bool>("IsAiFlagged")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_ai_flagged");

                    b.Property<bool>("IsQualified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_qualified");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int")
                        .HasColumnName("last_modified_by_id");

                    b.Property<DateTime?>("LastQualificationCheck")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_qualification_check");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("notes");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("phone");

                    b.Property<string>("RegisteredAuthorities")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("registered_authorities");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("risk_level");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("session_id");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("status");

                    b.Property<string>("SupplierType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("supplier_type");

                    b.Property<string>("VatNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("vat_number");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("supplier");
                });

            modelBuilder.Entity("YasGMP.Models.SupplierAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActionTimestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("ExtensionDataJson")
                        .HasColumnType("longtext");

                    b.Property<string>("JsonSnapshotAfter")
                        .HasColumnType("longtext");

                    b.Property<string>("JsonSnapshotBefore")
                        .HasColumnType("longtext");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierVersion")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SupplierAudits");
                });

            modelBuilder.Entity("YasGMP.Models.SupplierEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<string>("CertDoc")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cert_doc");

                    b.Property<string>("City")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("city");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext")
                        .HasColumnName("comment");

                    b.Property<string>("Contact")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("contact");

                    b.Property<DateTime?>("ContractEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("contract_end");

                    b.Property<string>("ContractFile")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contract_file");

                    b.Property<DateTime?>("ContractStart")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("contract_start");

                    b.Property<string>("Country")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastAudit")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_audit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<string>("Oib")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("oib");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("phone");

                    b.Property<int?>("RiskScore")
                        .HasColumnType("int")
                        .HasColumnName("risk_score");

                    b.Property<string>("Status")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("status");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<string>("SupplierType")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("supplier_type");

                    b.Property<string>("Type")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("type");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("valid_until");

                    b.Property<string>("VatNumber")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("vat_number");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("suppliers");
                });

            modelBuilder.Entity("YasGMP.Models.SupplierRiskAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AuditDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("audit_date");

                    b.Property<string>("CorrectiveActions")
                        .HasColumnType("longtext")
                        .HasColumnName("corrective_actions");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Findings")
                        .HasColumnType("longtext")
                        .HasColumnName("findings");

                    b.Property<int?>("PerformedBy")
                        .HasColumnType("int")
                        .HasColumnName("performed_by");

                    b.Property<int?>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PerformedBy");

                    b.HasIndex("SupplierId");

                    b.ToTable("supplier_risk_audit");
                });

            modelBuilder.Entity("YasGMP.Models.SystemEventLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double")
                        .HasColumnName("anomaly_score");

                    b.Property<int>("ChangeVersion")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("device_info");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("digital_signature");

                    b.Property<string>("EntryHash")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("entry_hash");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("event_time");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("event_type");

                    b.Property<string>("FieldName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("field_name");

                    b.Property<string>("GeoLocation")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("geo_location");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MacAddress")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("mac_address");

                    b.Property<string>("NewValue")
                        .HasColumnType("longtext")
                        .HasColumnName("new_value");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("details");

                    b.Property<string>("OldValue")
                        .HasColumnType("longtext")
                        .HasColumnName("old_value");

                    b.Property<bool>("Processed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("processed");

                    b.Property<int?>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("record_id");

                    b.Property<string>("Regulator")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("regulator");

                    b.Property<int?>("RelatedCaseId")
                        .HasColumnType("int")
                        .HasColumnName("related_case_id");

                    b.Property<string>("RelatedCaseType")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("related_case_type");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("session_id");

                    b.Property<string>("Severity")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("severity");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<string>("TableName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("table_name");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("system_event_log");
                });

            modelBuilder.Entity("YasGMP.Models.SystemParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("digital_signature");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<string>("ParamName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("param_name");

                    b.Property<string>("ParamValue")
                        .HasColumnType("longtext")
                        .HasColumnName("param_value");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("system_parameters");
                });

            modelBuilder.Entity("YasGMP.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("TagValue")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("tag");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("YasGMP.Models.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("code");

                    b.Property<string>("Contact")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("contact");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("tenants");
                });

            modelBuilder.Entity("YasGMP.Models.TrainingAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TrainingRecordId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainingRecordId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingAuditLogs");
                });

            modelBuilder.Entity("YasGMP.Models.TrainingLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalTrainers")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CertificationStatus")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("EntryHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("Passed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RegulatoryRequirement")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ReminderStatus")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)");

                    b.Property<DateTime?>("RetrainingDue")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool?>("TestPassed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TestScore")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Trainer")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TrainingName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TrainingType")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingLogs");
                });

            modelBuilder.Entity("YasGMP.Models.TrainingRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CertificateNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsELearning")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<decimal?>("TestScore")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("TraineeId")
                        .HasColumnType("int");

                    b.Property<string>("TraineeSignature")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("int");

                    b.Property<string>("TrainerSignature")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("TrainingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("varchar(48)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TraineeId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainingRecords");
                });

            modelBuilder.Entity("YasGMP.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("active");

                    b.Property<int>("ChangeVersion")
                        .HasColumnType("int")
                        .HasColumnName("change_version");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("CustomAttributes")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("custom_attributes");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("department_name");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("ExternalProviderId")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("external_provider_id");

                    b.Property<string>("ExternalProviderType")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("external_provider_type");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int")
                        .HasColumnName("failed_login_attempts");

                    b.Property<string>("FederatedUniqueId")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("federated_unique_id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("GlobalFederatedId")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("global_federated_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_locked");

                    b.Property<bool>("IsSystemAccount")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_system_account");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_two_factor_enabled");

                    b.Property<string>("LastChangeSignature")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("last_change_signature");

                    b.Property<DateTime?>("LastFailedLogin")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_failed_login");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_login");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("LastModified"));

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int")
                        .HasColumnName("last_modified_by_id");

                    b.Property<string>("NotificationChannel")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)")
                        .HasColumnName("notification_channel");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("password");

                    b.Property<bool>("PasswordResetRequired")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("password_reset_required");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("phone");

                    b.Property<string>("PreferredCulture")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("preferred_culture");

                    b.Property<DateTime?>("PrivacyConsentDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("privacy_consent_date");

                    b.Property<string>("PrivacyConsentVersion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("privacy_consent_version");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("public_key");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("role");

                    b.Property<double?>("SecurityAnomalyScore")
                        .HasColumnType("double")
                        .HasColumnName("security_anomaly_score");

                    b.Property<int?>("SopDocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("SopDocumentId");

                    b.HasIndex("TrainingRecordId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("YasGMP.Models.UserActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("RecordId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivityLogs");
                });

            modelBuilder.Entity("YasGMP.Models.UserAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("action");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Details")
                        .HasColumnType("longtext")
                        .HasColumnName("details");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("device_info");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("session_id");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_audit");
                });

            modelBuilder.Entity("YasGMP.Models.UserEsignature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("action");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<string>("Method")
                        .HasColumnType("longtext")
                        .HasColumnName("method");

                    b.Property<int?>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("record_id");

                    b.Property<string>("SignatureHash")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("signature_hash");

                    b.Property<DateTime?>("SignedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("signed_at");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<string>("TableName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("table_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_esignatures");
                });

            modelBuilder.Entity("YasGMP.Models.UserLoginLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("device_info");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<string>("FailReason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<string>("GeoLocation")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("geo_location");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsBiometricUsed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("biometric_used");

                    b.Property<bool>("IsSsoUsed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("sso_used");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<bool>("LoginSuccess")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("success");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("login_time");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("logout_time");

                    b.Property<string>("Note")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("note");

                    b.Property<double?>("RiskScore")
                        .HasColumnType("double")
                        .HasColumnName("risk_score");

                    b.Property<string>("SessionId")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("session_token");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("status");

                    b.Property<bool>("TwoFactorAuthSuccess")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("two_factor_ok");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_login_audit");
                });

            modelBuilder.Entity("YasGMP.Models.UserPermission", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .HasColumnOrder(0);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id")
                        .HasColumnOrder(1);

                    b.Property<bool>("Allowed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allowed");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assigned_at");

                    b.Property<int?>("AssignedById")
                        .HasColumnType("int")
                        .HasColumnName("assigned_by");

                    b.Property<int>("ChangeVersion")
                        .HasColumnType("int")
                        .HasColumnName("change_version");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("note");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("session_id");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("source_ip");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("AssignedById");

                    b.HasIndex("PermissionId");

                    b.ToTable("user_permissions");
                });

            modelBuilder.Entity("YasGMP.Models.UserPermissionOverride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("GrantedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GrantedById");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermissionOverrides");
                });

            modelBuilder.Entity("YasGMP.Models.UserRoleAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChangeVersion")
                        .HasColumnType("int")
                        .HasColumnName("change_version");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("device_info");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expires_at");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("granted_at");

                    b.Property<int?>("GrantedById")
                        .HasColumnType("int")
                        .HasColumnName("granted_by");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("note");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("session_id");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("source_ip");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("GrantedById");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_role_assignments");
                });

            modelBuilder.Entity("YasGMP.Models.UserRoleHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ChangedById")
                        .HasColumnType("int");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("NewRole")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("OldRole")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChangedById");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleHistories");
                });

            modelBuilder.Entity("YasGMP.Models.UserRoleMapping", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .HasColumnOrder(0);

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assigned_at");

                    b.Property<int?>("AssignedById")
                        .HasColumnType("int")
                        .HasColumnName("assigned_by");

                    b.Property<int>("ChangeVersion")
                        .HasColumnType("int")
                        .HasColumnName("change_version");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("note");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("session_id");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("source_ip");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("AssignedById");

                    b.HasIndex("RoleId");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("YasGMP.Models.UserSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enabled");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int")
                        .HasColumnName("template_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("user_subscriptions");
                });

            modelBuilder.Entity("YasGMP.Models.UserTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CertificateFile")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("certificate_file");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<string>("Provider")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("provider");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<DateTime?>("TrainingDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("training_date");

                    b.Property<string>("TrainingType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("training_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("valid_until");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_training");
                });

            modelBuilder.Entity("YasGMP.Models.UserWindowLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("Height")
                        .HasColumnType("int")
                        .HasColumnName("height");

                    b.Property<string>("PageType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("page_type");

                    b.Property<int?>("PosX")
                        .HasColumnType("int")
                        .HasColumnName("pos_x");

                    b.Property<int?>("PosY")
                        .HasColumnType("int")
                        .HasColumnName("pos_y");

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("saved_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("Width")
                        .HasColumnType("int")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_window_layouts");
                });

            modelBuilder.Entity("YasGMP.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double")
                        .HasColumnName("anomaly_score");

                    b.Property<string>("ClimateMode")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("climate_mode");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by_id");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<string>("EntryHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("entry_hash");

                    b.Property<string>("IoTDeviceId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("io_tdevice_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsQualified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_qualified");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int")
                        .HasColumnName("last_modified_by_id");

                    b.Property<DateTime?>("LastQualified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_qualified");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("note");

                    b.Property<int?>("PartId")
                        .HasColumnType("int");

                    b.Property<string>("QrCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("qr_code");

                    b.Property<int>("ResponsibleId")
                        .HasColumnType("int")
                        .HasColumnName("responsible_id");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("session_id");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("fk_wh_location");

                    b.HasIndex("PartId");

                    b.HasIndex("ResponsibleId")
                        .HasDatabaseName("fk_wh_user");

                    b.ToTable("warehouses", (string)null);
                });

            modelBuilder.Entity("YasGMP.Models.WarehouseStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BlockReason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Blocked")
                        .HasColumnType("int");

                    b.Property<string>("CertificateDocs")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InspectionNote")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<bool>("IsUnderRecall")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastPhysicalCount")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LocationDetail")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<int?>("MaxStock")
                        .HasColumnType("int");

                    b.Property<int?>("MinStock")
                        .HasColumnType("int");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RecallReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ReceivedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Reserved")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("PartId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseStocks");
                });

            modelBuilder.Entity("YasGMP.Models.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AnomalyScore")
                        .HasColumnType("double")
                        .HasColumnName("anomaly_score");

                    b.Property<int>("AssignedToId")
                        .HasColumnType("int")
                        .HasColumnName("assigned_to_id");

                    b.Property<bool>("AuditFlag")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("audit_flag");

                    b.Property<int?>("CapaCaseId")
                        .HasColumnType("int")
                        .HasColumnName("capa_case_id");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("closed_at");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int")
                        .HasColumnName("component_id");

                    b.Property<int?>("ComponentId1")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateClose")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_close");

                    b.Property<DateTime>("DateOpen")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_open");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("device_info");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("document_path");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("due_date");

                    b.Property<string>("EntryHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("entry_hash");

                    b.Property<string>("ExternalRef")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("external_ref");

                    b.Property<int?>("IncidentId")
                        .HasColumnType("int")
                        .HasColumnName("incident_id");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int")
                        .HasColumnName("last_modified_by_id");

                    b.Property<int>("MachineId")
                        .HasColumnType("int")
                        .HasColumnName("machine_id");

                    b.Property<DateTime?>("NextDue")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("next_due");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("notes");

                    b.Property<string>("PhotoAfterIds")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhotoBeforeIds")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("PreventiveMaintenancePlanId")
                        .HasColumnType("int");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("priority");

                    b.Property<int>("RequestedById")
                        .HasColumnType("int")
                        .HasColumnName("requested_by_id");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("result");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("session_id");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("status");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("task_description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("type");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CapaCaseId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ComponentId1");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IncidentId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("MachineId");

                    b.HasIndex("PreventiveMaintenancePlanId");

                    b.HasIndex("RequestedById");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("work_orders");
                });

            modelBuilder.Entity("YasGMP.Models.WorkOrderAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<string>("CloudStorageReference")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<long?>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RecognitionData")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UploadedById")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("VirusScanStatus")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Watermark")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("UploadedById");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderAttachments");
                });

            modelBuilder.Entity("YasGMP.Models.WorkOrderAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("action");

                    b.Property<int?>("CapaId")
                        .HasColumnType("int")
                        .HasColumnName("capa_id");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("changed_at");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("device_info");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("digital_signature");

                    b.Property<int?>("IncidentId")
                        .HasColumnType("int")
                        .HasColumnName("incident_id");

                    b.Property<string>("IntegrityHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("integrity_hash");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("new_value");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("note");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("old_value");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("session_id");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("source_ip");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int")
                        .HasColumnName("work_order_id");

                    b.HasKey("Id");

                    b.HasIndex("ChangedAt");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("work_order_audit");
                });

            modelBuilder.Entity("YasGMP.Models.WorkOrderChecklistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<bool?>("Ok")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ok");

                    b.Property<string>("Result")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("result");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int")
                        .HasColumnName("work_order_id");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("work_order_checklist_item");
                });

            modelBuilder.Entity("YasGMP.Models.WorkOrderComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("digital_signature");

                    b.Property<bool>("IsCritical")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_critical");

                    b.Property<int>("RevisionNo")
                        .HasColumnType("int")
                        .HasColumnName("revision_no");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("source_ip");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int")
                        .HasColumnName("work_order_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("work_order_comment");
                });

            modelBuilder.Entity("YasGMP.Models.WorkOrderPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CapaCaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("IncidentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("SparePartId")
                        .HasColumnType("int");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UsedById")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CapaCaseId");

                    b.HasIndex("IncidentId");

                    b.HasIndex("PartId");

                    b.HasIndex("SparePartId");

                    b.HasIndex("UsedById");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderParts");
                });

            modelBuilder.Entity("YasGMP.Models.WorkOrderSignature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("device_info");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("hash");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsIncident")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_incident");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("note");

                    b.Property<string>("PinUsed")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("pin_used");

                    b.Property<DateTime>("SignedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("signed_at");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int")
                        .HasColumnName("work_order_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("work_order_signature");
                });

            modelBuilder.Entity("YasGMP.Models.WorkOrderStatusLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("changed_at");

                    b.Property<int>("ChangedById")
                        .HasColumnType("int")
                        .HasColumnName("changed_by_id");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("device_info");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsIncident")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_incident");

                    b.Property<string>("NewStatus")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("new_status");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("note");

                    b.Property<string>("OldStatus")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("old_status");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("reason");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int")
                        .HasColumnName("work_order_id");

                    b.HasKey("Id");

                    b.HasIndex("ChangedById");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("work_order_status_log");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("YasGMP.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionUser", b =>
                {
                    b.HasOne("YasGMP.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("YasGMP.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YasGMP.Models.AdminActivityLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_adminact_user");

                    b.HasOne("YasGMP.Models.User", null)
                        .WithMany("AdminActivityLogs")
                        .HasForeignKey("UserId");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("YasGMP.Models.ApiKey", b =>
                {
                    b.HasOne("YasGMP.Models.User", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_apikey_owner");
                });

            modelBuilder.Entity("YasGMP.Models.ApiUsageLog", b =>
                {
                    b.HasOne("YasGMP.Models.ApiKey", "ApiKey")
                        .WithMany("UsageLogs")
                        .HasForeignKey("ApiKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ApiKey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.Attachment", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ApprovedBy")
                        .WithMany("ApprovedAttachments")
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.ChangeControl", null)
                        .WithMany("Attachments")
                        .HasForeignKey("ChangeControlId");

                    b.HasOne("YasGMP.Models.Deviation", null)
                        .WithMany("Attachments")
                        .HasForeignKey("DeviationId");

                    b.HasOne("YasGMP.Models.ExternalContractor", null)
                        .WithMany("Attachments")
                        .HasForeignKey("ExternalContractorId");

                    b.HasOne("YasGMP.Models.IncidentAction", null)
                        .WithMany("Attachments")
                        .HasForeignKey("IncidentActionId");

                    b.HasOne("YasGMP.Models.Incident", null)
                        .WithMany("Attachments")
                        .HasForeignKey("IncidentId");

                    b.HasOne("YasGMP.Models.IncidentReport", null)
                        .WithMany("Attachments")
                        .HasForeignKey("IncidentReportId");

                    b.HasOne("YasGMP.Models.MaintenanceExecutionLog", null)
                        .WithMany("Attachments")
                        .HasForeignKey("MaintenanceExecutionLogId");

                    b.HasOne("YasGMP.Models.Notification", null)
                        .WithMany("Attachments")
                        .HasForeignKey("NotificationId");

                    b.HasOne("YasGMP.Models.NotificationLog", null)
                        .WithMany("Attachments")
                        .HasForeignKey("NotificationLogId");

                    b.HasOne("YasGMP.Models.PartUsage", null)
                        .WithMany("Attachments")
                        .HasForeignKey("PartUsageId");

                    b.HasOne("YasGMP.Models.SparePart", null)
                        .WithMany("Attachments")
                        .HasForeignKey("SparePartId");

                    b.HasOne("YasGMP.Models.TrainingRecord", null)
                        .WithMany("Attachments")
                        .HasForeignKey("TrainingRecordId");

                    b.HasOne("YasGMP.Models.User", "UploadedBy")
                        .WithMany("UploadedAttachments")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("YasGMP.Models.AuditLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", null)
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.BackupHistory", b =>
                {
                    b.HasOne("YasGMP.Models.User", "PerformedByUser")
                        .WithMany()
                        .HasForeignKey("PerformedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "RestoreByUser")
                        .WithMany()
                        .HasForeignKey("RestoreBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.BackupHistory", "RestoreOfBackup")
                        .WithMany()
                        .HasForeignKey("RestoreOfBackupId");

                    b.Navigation("PerformedByUser");

                    b.Navigation("RestoreByUser");

                    b.Navigation("RestoreOfBackup");
                });

            modelBuilder.Entity("YasGMP.Models.Calibration", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.MachineComponent", "Component")
                        .WithMany("Calibrations")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.Component", null)
                        .WithMany("Calibrations")
                        .HasForeignKey("ComponentId1");

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.Machine", null)
                        .WithMany("Calibrations")
                        .HasForeignKey("MachineId");

                    b.HasOne("YasGMP.Models.Calibration", "NextCalibration")
                        .WithMany()
                        .HasForeignKey("NextCalibrationId");

                    b.HasOne("YasGMP.Models.Calibration", "PreviousCalibration")
                        .WithMany()
                        .HasForeignKey("PreviousCalibrationId");

                    b.HasOne("YasGMP.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("ApprovedBy");

                    b.Navigation("Component");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("NextCalibration");

                    b.Navigation("PreviousCalibration");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("YasGMP.Models.CalibrationAudit", b =>
                {
                    b.HasOne("YasGMP.Models.Calibration", "Calibration")
                        .WithMany()
                        .HasForeignKey("CalibrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calibration");
                });

            modelBuilder.Entity("YasGMP.Models.CalibrationAuditLog", b =>
                {
                    b.HasOne("YasGMP.Models.Calibration", "Calibration")
                        .WithMany()
                        .HasForeignKey("CalibrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Calibration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.CalibrationExportLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.CapaActionLog", b =>
                {
                    b.HasOne("YasGMP.Models.CapaCase", "CapaCase")
                        .WithMany()
                        .HasForeignKey("CapaCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "PerformedBy")
                        .WithMany()
                        .HasForeignKey("PerformedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CapaCase");

                    b.Navigation("PerformedBy");
                });

            modelBuilder.Entity("YasGMP.Models.CapaCase", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.MachineComponent", "Component")
                        .WithMany("CapaCases")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.Component", null)
                        .WithMany("CapaCases")
                        .HasForeignKey("ComponentId1");

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.Supplier", null)
                        .WithMany("CapaCases")
                        .HasForeignKey("SupplierId");

                    b.Navigation("ApprovedBy");

                    b.Navigation("AssignedTo");

                    b.Navigation("Component");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("YasGMP.Models.CapaStatusHistory", b =>
                {
                    b.HasOne("YasGMP.Models.CapaCase", "CapaCase")
                        .WithMany()
                        .HasForeignKey("CapaCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "ChangedBy")
                        .WithMany()
                        .HasForeignKey("ChangedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CapaCase");

                    b.Navigation("ChangedBy");
                });

            modelBuilder.Entity("YasGMP.Models.ChangeControl", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.CapaCase", "CapaCase")
                        .WithMany()
                        .HasForeignKey("CapaCaseId");

                    b.HasOne("YasGMP.Models.MachineComponent", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId");

                    b.HasOne("YasGMP.Models.User", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "ReviewedBy")
                        .WithMany()
                        .HasForeignKey("ReviewedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ApprovedBy");

                    b.Navigation("AssignedTo");

                    b.Navigation("CapaCase");

                    b.Navigation("Component");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Machine");

                    b.Navigation("RequestedBy");

                    b.Navigation("ReviewedBy");
                });

            modelBuilder.Entity("YasGMP.Models.Component", b =>
                {
                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("YasGMP.Models.ComponentDevice", b =>
                {
                    b.HasOne("YasGMP.Models.MachineComponent", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.IotDevice", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.SensorModel", "SensorModel")
                        .WithMany()
                        .HasForeignKey("SensorModelId");

                    b.Navigation("Component");

                    b.Navigation("Device");

                    b.Navigation("SensorModel");
                });

            modelBuilder.Entity("YasGMP.Models.ComponentModel", b =>
                {
                    b.HasOne("YasGMP.Models.ComponentType", "ComponentType")
                        .WithMany()
                        .HasForeignKey("ComponentTypeId");

                    b.Navigation("ComponentType");
                });

            modelBuilder.Entity("YasGMP.Models.ComponentPart", b =>
                {
                    b.HasOne("YasGMP.Models.MachineComponent", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("YasGMP.Models.ComponentQualification", b =>
                {
                    b.HasOne("YasGMP.Models.MachineComponent", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("YasGMP.Models.ConfigChangeLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ChangedByNavigation")
                        .WithMany()
                        .HasForeignKey("ChangedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ChangedByNavigation");
                });

            modelBuilder.Entity("YasGMP.Models.ContractorAuditLog", b =>
                {
                    b.HasOne("YasGMP.Models.ExternalContractor", "Contractor")
                        .WithMany("AuditLogs")
                        .HasForeignKey("ExternalContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Contractor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.ContractorIntervention", b =>
                {
                    b.HasOne("YasGMP.Models.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.ExternalContractor", null)
                        .WithMany("Interventions")
                        .HasForeignKey("ExternalContractorId");

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Contractor");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("YasGMP.Models.ContractorInterventionAudit", b =>
                {
                    b.HasOne("YasGMP.Models.ContractorIntervention", null)
                        .WithMany()
                        .HasForeignKey("InterventionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cia_intervention");

                    b.HasOne("YasGMP.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_cia_user");
                });

            modelBuilder.Entity("YasGMP.Models.Dashboard", b =>
                {
                    b.HasOne("YasGMP.Models.User", "CreatedByNavigation")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("YasGMP.Models.DelegatedPermission", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ApprovedBy")
                        .WithMany("DelegationsApproved")
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "FromUser")
                        .WithMany("DelegationsGranted")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.Permission", "Permission")
                        .WithMany("DelegatedPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "ToUser")
                        .WithMany("DelegatedPermissions")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("FromUser");

                    b.Navigation("Permission");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("YasGMP.Models.DeleteLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "DeletedByNavigation")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DeletedByNavigation");
                });

            modelBuilder.Entity("YasGMP.Models.Department", b =>
                {
                    b.HasOne("YasGMP.Models.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("YasGMP.Models.Deviation", b =>
                {
                    b.HasOne("YasGMP.Models.User", "AssignedInvestigator")
                        .WithMany()
                        .HasForeignKey("AssignedInvestigatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.CapaCase", "LinkedCapa")
                        .WithMany()
                        .HasForeignKey("LinkedCapaId");

                    b.HasOne("YasGMP.Models.User", "ReportedBy")
                        .WithMany()
                        .HasForeignKey("ReportedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedInvestigator");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("LinkedCapa");

                    b.Navigation("ReportedBy");
                });

            modelBuilder.Entity("YasGMP.Models.DeviationAudit", b =>
                {
                    b.HasOne("YasGMP.Models.Deviation", null)
                        .WithMany("AuditTrail")
                        .HasForeignKey("DeviationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YasGMP.Models.DigitalSignature", b =>
                {
                    b.HasOne("YasGMP.Models.SparePart", null)
                        .WithMany("DigitalSignatures")
                        .HasForeignKey("SparePartId");

                    b.HasOne("YasGMP.Models.User", null)
                        .WithMany("DigitalSignatures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YasGMP.Models.DocumentAuditEvent", b =>
                {
                    b.HasOne("YasGMP.Models.DocumentControl", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Document");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.DocumentControl", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.Qualification", null)
                        .WithMany("Documents")
                        .HasForeignKey("QualificationId");

                    b.HasOne("YasGMP.Models.RiskAssessment", null)
                        .WithMany("Documents")
                        .HasForeignKey("RiskAssessmentId");

                    b.HasOne("YasGMP.Models.TrainingRecord", null)
                        .WithMany("Documents")
                        .HasForeignKey("TrainingRecordId");

                    b.Navigation("ApprovedBy");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("YasGMP.Models.DocumentVersion", b =>
                {
                    b.HasOne("YasGMP.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.DocumentControl", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("YasGMP.Models.EntityAuditLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.EntityTag", b =>
                {
                    b.HasOne("YasGMP.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("YasGMP.Models.ExportPrintLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.ExternalContractor", b =>
                {
                    b.HasOne("YasGMP.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("YasGMP.Models.FailureMode", b =>
                {
                    b.HasOne("YasGMP.Models.ComponentType", "ComponentType")
                        .WithMany()
                        .HasForeignKey("ComponentTypeId");

                    b.Navigation("ComponentType");
                });

            modelBuilder.Entity("YasGMP.Models.ForensicUserChangeLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "TargetUser")
                        .WithMany()
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ChangedByUser");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("YasGMP.Models.Incident", b =>
                {
                    b.HasOne("YasGMP.Models.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.CapaCase", "CapaCase")
                        .WithMany()
                        .HasForeignKey("CapaCaseId");

                    b.HasOne("YasGMP.Models.User", "ClosedBy")
                        .WithMany()
                        .HasForeignKey("ClosedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "ReportedBy")
                        .WithMany()
                        .HasForeignKey("ReportedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.WorkOrder", "WorkOrder")
                        .WithMany()
                        .HasForeignKey("WorkOrderId");

                    b.Navigation("AssignedTo");

                    b.Navigation("CapaCase");

                    b.Navigation("ClosedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("ReportedBy");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("YasGMP.Models.IncidentAction", b =>
                {
                    b.HasOne("YasGMP.Models.Incident", "Incident")
                        .WithMany("Actions")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Incident");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.IncidentAudit", b =>
                {
                    b.HasOne("YasGMP.Models.CapaCase", "CapaCase")
                        .WithMany()
                        .HasForeignKey("CapaId");

                    b.HasOne("YasGMP.Models.Incident", "Incident")
                        .WithMany()
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.WorkOrder", "WorkOrder")
                        .WithMany()
                        .HasForeignKey("WorkOrderId");

                    b.Navigation("CapaCase");

                    b.Navigation("Incident");

                    b.Navigation("User");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("YasGMP.Models.IncidentAuditLog", b =>
                {
                    b.HasOne("YasGMP.Models.IncidentReport", "Incident")
                        .WithMany("AuditLogs")
                        .HasForeignKey("IncidentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Incident");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.IncidentLog", b =>
                {
                    b.HasOne("YasGMP.Models.CapaCase", "CapaCase")
                        .WithMany()
                        .HasForeignKey("CapaCaseId");

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "ReportedBy")
                        .WithMany()
                        .HasForeignKey("ReportedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "ResolvedBy")
                        .WithMany()
                        .HasForeignKey("ResolvedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CapaCase");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("ReportedBy");

                    b.Navigation("ResolvedBy");
                });

            modelBuilder.Entity("YasGMP.Models.IncidentReport", b =>
                {
                    b.HasOne("YasGMP.Models.MachineComponent", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("YasGMP.Models.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId");

                    b.HasOne("YasGMP.Models.User", "ReportedByUser")
                        .WithMany()
                        .HasForeignKey("ReportedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "ResolvedBy")
                        .WithMany()
                        .HasForeignKey("ResolvedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Component");

                    b.Navigation("Machine");

                    b.Navigation("ReportedByUser");

                    b.Navigation("ResolvedBy");
                });

            modelBuilder.Entity("YasGMP.Models.Inspection", b =>
                {
                    b.HasOne("YasGMP.Models.CapaCase", "CapaCase")
                        .WithMany()
                        .HasForeignKey("CapaCaseId");

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.Machine", "RelatedMachine")
                        .WithMany("Inspections")
                        .HasForeignKey("RelatedMachineId");

                    b.HasOne("YasGMP.Models.Supplier", null)
                        .WithMany("AuditHistory")
                        .HasForeignKey("SupplierId");

                    b.Navigation("CapaCase");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("RelatedMachine");
                });

            modelBuilder.Entity("YasGMP.Models.InventoryTransaction", b =>
                {
                    b.HasOne("YasGMP.Models.SparePart", "Part")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_it_part");

                    b.HasOne("YasGMP.Models.User", "PerformedBy")
                        .WithMany()
                        .HasForeignKey("PerformedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_it_user");

                    b.HasOne("YasGMP.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_it_warehouse");

                    b.Navigation("Part");

                    b.Navigation("PerformedBy");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("YasGMP.Models.IotAnomalyLog", b =>
                {
                    b.HasOne("YasGMP.Models.IotSensorData", "SensorData")
                        .WithMany()
                        .HasForeignKey("SensorDataId");

                    b.Navigation("SensorData");
                });

            modelBuilder.Entity("YasGMP.Models.IotDevice", b =>
                {
                    b.HasOne("YasGMP.Models.IotGateway", "Gateway")
                        .WithMany()
                        .HasForeignKey("GatewayId");

                    b.Navigation("Gateway");
                });

            modelBuilder.Entity("YasGMP.Models.IotGateway", b =>
                {
                    b.HasOne("YasGMP.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("YasGMP.Models.IotSensorData", b =>
                {
                    b.HasOne("YasGMP.Models.MachineComponent", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("YasGMP.Models.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Component");

                    b.Navigation("MeasurementUnit");
                });

            modelBuilder.Entity("YasGMP.Models.IrregularitiesLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.LogEntry", b =>
                {
                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.LoginAttemptLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.LookupValue", b =>
                {
                    b.HasOne("YasGMP.Models.LookupDomain", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("YasGMP.Models.Machine", b =>
                {
                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("YasGMP.Models.MachineComponent", b =>
                {
                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.Machine", "Machine")
                        .WithMany("Components")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("YasGMP.Models.MachineLifecycleEvent", b =>
                {
                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "PerformedBy")
                        .WithMany()
                        .HasForeignKey("PerformedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Machine");

                    b.Navigation("PerformedBy");
                });

            modelBuilder.Entity("YasGMP.Models.MachineModel", b =>
                {
                    b.HasOne("YasGMP.Models.MachineType", "MachineType")
                        .WithMany()
                        .HasForeignKey("MachineTypeId");

                    b.HasOne("YasGMP.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.Navigation("MachineType");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("YasGMP.Models.MaintenanceExecutionLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "ExecutedBy")
                        .WithMany()
                        .HasForeignKey("ExecutedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.PreventiveMaintenancePlan", "Plan")
                        .WithMany("ExecutionHistory")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("ExecutedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("YasGMP.Models.MobileDeviceLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.NotificationChannelEvent", b =>
                {
                    b.HasOne("YasGMP.Models.NotificationLog", null)
                        .WithMany("ChannelHistory")
                        .HasForeignKey("NotificationLogId");
                });

            modelBuilder.Entity("YasGMP.Models.NotificationLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastModifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.NotificationQueue", b =>
                {
                    b.HasOne("YasGMP.Models.User", "RecipientUser")
                        .WithMany()
                        .HasForeignKey("RecipientUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.NotificationTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("RecipientUser");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("YasGMP.Models.Part", b =>
                {
                    b.HasOne("YasGMP.Models.Supplier", "DefaultSupplier")
                        .WithMany("PartsSupplied")
                        .HasForeignKey("DefaultSupplierId");

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DefaultSupplier");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("YasGMP.Models.PartBom", b =>
                {
                    b.HasOne("YasGMP.Models.Part", "ChildPart")
                        .WithMany()
                        .HasForeignKey("ChildPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.Part", "ParentPart")
                        .WithMany()
                        .HasForeignKey("ParentPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChildPart");

                    b.Navigation("ParentPart");
                });

            modelBuilder.Entity("YasGMP.Models.PartChangeLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ChangedBy")
                        .WithMany()
                        .HasForeignKey("ChangedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.Part", "Part")
                        .WithMany("ChangeLogs")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedBy");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("YasGMP.Models.PartSupplierPrice", b =>
                {
                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.Part", "Part")
                        .WithMany("SupplierPrices")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.SparePart", null)
                        .WithMany("SupplierPrices")
                        .HasForeignKey("SparePartId");

                    b.HasOne("YasGMP.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Part");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("YasGMP.Models.PartUsage", b =>
                {
                    b.HasOne("YasGMP.Models.User", "IssuedBy")
                        .WithMany()
                        .HasForeignKey("IssuedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.MachineComponent", "MachineComponent")
                        .WithMany()
                        .HasForeignKey("MachineComponentId");

                    b.HasOne("YasGMP.Models.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("YasGMP.Models.WorkOrder", "WorkOrder")
                        .WithMany()
                        .HasForeignKey("WorkOrderId");

                    b.Navigation("IssuedBy");

                    b.Navigation("MachineComponent");

                    b.Navigation("Part");

                    b.Navigation("Supplier");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("YasGMP.Models.PartUsageAuditLog", b =>
                {
                    b.HasOne("YasGMP.Models.PartUsage", "PartUsage")
                        .WithMany("AuditLogs")
                        .HasForeignKey("PartUsageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PartUsage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.Permission", b =>
                {
                    b.HasOne("YasGMP.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.Permission", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("YasGMP.Models.PermissionChangeLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ChangedByNavigation")
                        .WithMany()
                        .HasForeignKey("ChangedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId");

                    b.HasOne("YasGMP.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChangedByNavigation");

                    b.Navigation("Permission");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.PermissionRequest", b =>
                {
                    b.HasOne("YasGMP.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "ReviewedByNavigation")
                        .WithMany()
                        .HasForeignKey("ReviewedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("ReviewedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.Photo", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ApprovedBy")
                        .WithMany("ApprovedPhotos")
                        .HasForeignKey("ApprovedById");

                    b.HasOne("YasGMP.Models.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("YasGMP.Models.IncidentReport", null)
                        .WithMany("Photos")
                        .HasForeignKey("IncidentReportId");

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany("ModifiedPhotos")
                        .HasForeignKey("LastModifiedById");

                    b.HasOne("YasGMP.Models.MachineComponent", null)
                        .WithMany("Photos")
                        .HasForeignKey("MachineComponentId");

                    b.HasOne("YasGMP.Models.Photo", "NextPhoto")
                        .WithMany()
                        .HasForeignKey("NextPhotoId");

                    b.HasOne("YasGMP.Models.Photo", "PreviousPhoto")
                        .WithMany()
                        .HasForeignKey("PreviousPhotoId");

                    b.HasOne("YasGMP.Models.User", "UploadedBy")
                        .WithMany("UploadedPhotos")
                        .HasForeignKey("UploadedById");

                    b.HasOne("YasGMP.Models.WorkOrder", "WorkOrder")
                        .WithMany("Photos")
                        .HasForeignKey("WorkOrderId");

                    b.Navigation("ApprovedBy");

                    b.Navigation("Component");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("NextPhoto");

                    b.Navigation("PreviousPhoto");

                    b.Navigation("UploadedBy");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("YasGMP.Models.PpmPlan", b =>
                {
                    b.HasOne("YasGMP.Models.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("YasGMP.Models.PreventiveMaintenancePlan", b =>
                {
                    b.HasOne("YasGMP.Models.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId");

                    b.HasOne("YasGMP.Models.PreventiveMaintenancePlan", "PreviousVersion")
                        .WithMany()
                        .HasForeignKey("PreviousVersionId");

                    b.HasOne("YasGMP.Models.User", "ResponsibleUser")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Component");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Machine");

                    b.Navigation("PreviousVersion");

                    b.Navigation("ResponsibleUser");
                });

            modelBuilder.Entity("YasGMP.Models.ProductRecallLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ClosedBy")
                        .WithMany()
                        .HasForeignKey("ClosedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.CapaCase", "LinkedCapa")
                        .WithMany()
                        .HasForeignKey("LinkedCapaId");

                    b.HasOne("YasGMP.Models.Incident", "LinkedIncident")
                        .WithMany()
                        .HasForeignKey("LinkedIncidentId");

                    b.HasOne("YasGMP.Models.Inspection", "LinkedInspection")
                        .WithMany()
                        .HasForeignKey("LinkedInspectionId");

                    b.HasOne("YasGMP.Models.User", "RecalledBy")
                        .WithMany()
                        .HasForeignKey("RecalledById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClosedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("LinkedCapa");

                    b.Navigation("LinkedIncident");

                    b.Navigation("LinkedInspection");

                    b.Navigation("RecalledBy");
                });

            modelBuilder.Entity("YasGMP.Models.Qualification", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.MachineComponent", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("YasGMP.Models.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId");

                    b.HasOne("YasGMP.Models.User", "QualifiedBy")
                        .WithMany()
                        .HasForeignKey("QualifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("ApprovedBy");

                    b.Navigation("Component");

                    b.Navigation("Machine");

                    b.Navigation("QualifiedBy");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("YasGMP.Models.QualificationAuditLog", b =>
                {
                    b.HasOne("YasGMP.Models.Qualification", "Qualification")
                        .WithMany("AuditLogs")
                        .HasForeignKey("QualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Qualification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.QualityEvent", b =>
                {
                    b.HasOne("YasGMP.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.MachineComponent", "RelatedComponent")
                        .WithMany()
                        .HasForeignKey("RelatedComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_qe_component");

                    b.HasOne("YasGMP.Models.Machine", "RelatedMachine")
                        .WithMany()
                        .HasForeignKey("RelatedMachineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_qe_machine");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("RelatedComponent");

                    b.Navigation("RelatedMachine");
                });

            modelBuilder.Entity("YasGMP.Models.RefValue", b =>
                {
                    b.HasOne("YasGMP.Models.RefDomain", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("YasGMP.Models.Report", b =>
                {
                    b.HasOne("YasGMP.Models.User", "GeneratedBy")
                        .WithMany()
                        .HasForeignKey("GeneratedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GeneratedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("YasGMP.Models.ReportSchedule", b =>
                {
                    b.HasOne("YasGMP.Models.User", "GeneratedByNavigation")
                        .WithMany()
                        .HasForeignKey("GeneratedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("GeneratedByNavigation");
                });

            modelBuilder.Entity("YasGMP.Models.RequalificationSchedule", b =>
                {
                    b.HasOne("YasGMP.Models.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "ResponsibleUser")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Component");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("ResponsibleUser");
                });

            modelBuilder.Entity("YasGMP.Models.RiskAssessment", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ApprovedBy");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("YasGMP.Models.RiskAssessmentAuditLog", b =>
                {
                    b.HasOne("YasGMP.Models.RiskAssessment", "RiskAssessment")
                        .WithMany("AuditLogs")
                        .HasForeignKey("RiskAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("RiskAssessment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.Role", b =>
                {
                    b.HasOne("YasGMP.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("YasGMP.Models.RoleAudit", b =>
                {
                    b.HasOne("YasGMP.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("YasGMP.Models.RolePermission", b =>
                {
                    b.HasOne("YasGMP.Models.User", "AssignedBy")
                        .WithMany()
                        .HasForeignKey("AssignedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedBy");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("YasGMP.Models.Room", b =>
                {
                    b.HasOne("YasGMP.Models.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("YasGMP.Models.ScheduledJobAuditLog", b =>
                {
                    b.HasOne("YasGMP.Models.ScheduledJob", "ScheduledJob")
                        .WithMany()
                        .HasForeignKey("ScheduledJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ScheduledJob");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.SchemaMigrationLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "MigratedBy")
                        .WithMany()
                        .HasForeignKey("MigratedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MigratedBy");
                });

            modelBuilder.Entity("YasGMP.Models.SensitiveDataAccessLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.SensorDataLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("YasGMP.Models.SensorType", b =>
                {
                    b.HasOne("YasGMP.Models.MeasurementUnit", "DefaultUnit")
                        .WithMany()
                        .HasForeignKey("DefaultUnitId");

                    b.Navigation("DefaultUnit");
                });

            modelBuilder.Entity("YasGMP.Models.SessionLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ImpersonatedBy")
                        .WithMany()
                        .HasForeignKey("ImpersonatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", null)
                        .WithMany("SessionLogs")
                        .HasForeignKey("UserId1");

                    b.Navigation("ImpersonatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.Setting", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("YasGMP.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ApprovedBy");

                    b.Navigation("Role");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.SettingAuditLog", b =>
                {
                    b.HasOne("YasGMP.Models.Setting", "Setting")
                        .WithMany("AuditLogs")
                        .HasForeignKey("SettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Setting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.SettingVersion", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ChangedBy")
                        .WithMany()
                        .HasForeignKey("ChangedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.Setting", "Setting")
                        .WithMany("Versions")
                        .HasForeignKey("SettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedBy");

                    b.Navigation("Setting");
                });

            modelBuilder.Entity("YasGMP.Models.SopDocument", b =>
                {
                    b.HasOne("YasGMP.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "ResponsibleUser")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("ResponsibleUser");
                });

            modelBuilder.Entity("YasGMP.Models.SopDocumentLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "PerformedByNavigation")
                        .WithMany()
                        .HasForeignKey("PerformedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.SopDocument", "SopDocument")
                        .WithMany()
                        .HasForeignKey("SopDocumentId");

                    b.Navigation("PerformedByNavigation");

                    b.Navigation("SopDocument");
                });

            modelBuilder.Entity("YasGMP.Models.SparePart", b =>
                {
                    b.HasOne("YasGMP.Models.Supplier", "DefaultSupplier")
                        .WithMany()
                        .HasForeignKey("DefaultSupplierId");

                    b.Navigation("DefaultSupplier");
                });

            modelBuilder.Entity("YasGMP.Models.SqlQueryAuditLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.StockChangeLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ChangedBy")
                        .WithMany()
                        .HasForeignKey("ChangedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.Part", "Part")
                        .WithMany("StockHistory")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedBy");

                    b.Navigation("Part");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("YasGMP.Models.StockLevel", b =>
                {
                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.Part", "Part")
                        .WithMany("StockLevels")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_sl_part");

                    b.HasOne("YasGMP.Models.SparePart", null)
                        .WithMany("StockLevels")
                        .HasForeignKey("SparePartId");

                    b.HasOne("YasGMP.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_sl_warehouse");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Part");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("YasGMP.Models.Supplier", b =>
                {
                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("YasGMP.Models.SupplierEntity", b =>
                {
                    b.HasOne("YasGMP.Models.RefValue", "StatusNavigation")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("YasGMP.Models.RefValue", "TypeNavigation")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("StatusNavigation");

                    b.Navigation("TypeNavigation");
                });

            modelBuilder.Entity("YasGMP.Models.SupplierRiskAudit", b =>
                {
                    b.HasOne("YasGMP.Models.User", "PerformedByNavigation")
                        .WithMany()
                        .HasForeignKey("PerformedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.SupplierEntity", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("PerformedByNavigation");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("YasGMP.Models.SystemEventLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.SystemParameter", b =>
                {
                    b.HasOne("YasGMP.Models.User", "UpdatedByNavigation")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("YasGMP.Models.TrainingAuditLog", b =>
                {
                    b.HasOne("YasGMP.Models.TrainingRecord", "TrainingRecord")
                        .WithMany("AuditLogs")
                        .HasForeignKey("TrainingRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("TrainingRecord");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.TrainingLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastModifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.TrainingRecord", b =>
                {
                    b.HasOne("YasGMP.Models.DocumentControl", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("YasGMP.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("YasGMP.Models.User", "Trainee")
                        .WithMany()
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Document");

                    b.Navigation("Role");

                    b.Navigation("Trainee");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("YasGMP.Models.User", b =>
                {
                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");

                    b.HasOne("YasGMP.Models.SopDocument", null)
                        .WithMany("Approvers")
                        .HasForeignKey("SopDocumentId");

                    b.HasOne("YasGMP.Models.TrainingRecord", null)
                        .WithMany("Attendees")
                        .HasForeignKey("TrainingRecordId");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("YasGMP.Models.UserActivityLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.UserAudit", b =>
                {
                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.UserEsignature", b =>
                {
                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.UserLoginLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.UserPermission", b =>
                {
                    b.HasOne("YasGMP.Models.User", "AssignedBy")
                        .WithMany()
                        .HasForeignKey("AssignedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedBy");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.UserPermissionOverride", b =>
                {
                    b.HasOne("YasGMP.Models.User", "GrantedBy")
                        .WithMany()
                        .HasForeignKey("GrantedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GrantedBy");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.UserRoleAssignment", b =>
                {
                    b.HasOne("YasGMP.Models.User", "GrantedBy")
                        .WithMany()
                        .HasForeignKey("GrantedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GrantedBy");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.UserRoleHistory", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ChangedBy")
                        .WithMany()
                        .HasForeignKey("ChangedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChangedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.UserRoleMapping", b =>
                {
                    b.HasOne("YasGMP.Models.User", "AssignedBy")
                        .WithMany()
                        .HasForeignKey("AssignedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedBy");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.UserSubscription", b =>
                {
                    b.HasOne("YasGMP.Models.NotificationTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.UserTraining", b =>
                {
                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.UserWindowLayout", b =>
                {
                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YasGMP.Models.Warehouse", b =>
                {
                    b.HasOne("YasGMP.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.Part", null)
                        .WithMany("Warehouses")
                        .HasForeignKey("PartId");

                    b.HasOne("YasGMP.Models.User", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_wh_user");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("YasGMP.Models.WarehouseStock", b =>
                {
                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.Part", "Part")
                        .WithMany("WarehouseStocks")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Part");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("YasGMP.Models.WorkOrder", b =>
                {
                    b.HasOne("YasGMP.Models.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.CapaCase", "CapaCase")
                        .WithMany()
                        .HasForeignKey("CapaCaseId");

                    b.HasOne("YasGMP.Models.MachineComponent", "Component")
                        .WithMany("WorkOrders")
                        .HasForeignKey("ComponentId");

                    b.HasOne("YasGMP.Models.Component", null)
                        .WithMany("WorkOrders")
                        .HasForeignKey("ComponentId1");

                    b.HasOne("YasGMP.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.Incident", "Incident")
                        .WithMany()
                        .HasForeignKey("IncidentId");

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.Machine", "Machine")
                        .WithMany("WorkOrders")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.PreventiveMaintenancePlan", null)
                        .WithMany("LinkedWorkOrders")
                        .HasForeignKey("PreventiveMaintenancePlanId");

                    b.HasOne("YasGMP.Models.User", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.User", null)
                        .WithMany("AssignedWorkOrders")
                        .HasForeignKey("UserId");

                    b.HasOne("YasGMP.Models.User", null)
                        .WithMany("CreatedWorkOrders")
                        .HasForeignKey("UserId1");

                    b.Navigation("AssignedTo");

                    b.Navigation("CapaCase");

                    b.Navigation("Component");

                    b.Navigation("CreatedBy");

                    b.Navigation("Incident");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Machine");

                    b.Navigation("RequestedBy");
                });

            modelBuilder.Entity("YasGMP.Models.WorkOrderAttachment", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.WorkOrder", "WorkOrder")
                        .WithMany()
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("UploadedBy");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("YasGMP.Models.WorkOrderAudit", b =>
                {
                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.WorkOrder", "WorkOrder")
                        .WithMany("AuditTrail")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("YasGMP.Models.WorkOrderChecklistItem", b =>
                {
                    b.HasOne("YasGMP.Models.ChecklistItem", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.WorkOrder", "WorkOrder")
                        .WithMany()
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("YasGMP.Models.WorkOrderComment", b =>
                {
                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.WorkOrder", "WorkOrder")
                        .WithMany("Comments")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("YasGMP.Models.WorkOrderPart", b =>
                {
                    b.HasOne("YasGMP.Models.CapaCase", "CapaCase")
                        .WithMany()
                        .HasForeignKey("CapaCaseId");

                    b.HasOne("YasGMP.Models.Incident", "Incident")
                        .WithMany()
                        .HasForeignKey("IncidentId");

                    b.HasOne("YasGMP.Models.Part", "Part")
                        .WithMany("WorkOrderParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.SparePart", null)
                        .WithMany("WorkOrderParts")
                        .HasForeignKey("SparePartId");

                    b.HasOne("YasGMP.Models.User", "UsedBy")
                        .WithMany()
                        .HasForeignKey("UsedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YasGMP.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");

                    b.HasOne("YasGMP.Models.WorkOrder", "WorkOrder")
                        .WithMany("UsedParts")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CapaCase");

                    b.Navigation("Incident");

                    b.Navigation("Part");

                    b.Navigation("UsedBy");

                    b.Navigation("Warehouse");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("YasGMP.Models.WorkOrderSignature", b =>
                {
                    b.HasOne("YasGMP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.WorkOrder", "WorkOrder")
                        .WithMany("Signatures")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("YasGMP.Models.WorkOrderStatusLog", b =>
                {
                    b.HasOne("YasGMP.Models.User", "ChangedBy")
                        .WithMany()
                        .HasForeignKey("ChangedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasGMP.Models.WorkOrder", "WorkOrder")
                        .WithMany("StatusTimeline")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedBy");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("YasGMP.Models.ApiKey", b =>
                {
                    b.Navigation("UsageLogs");
                });

            modelBuilder.Entity("YasGMP.Models.ChangeControl", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("YasGMP.Models.Component", b =>
                {
                    b.Navigation("Calibrations");

                    b.Navigation("CapaCases");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("YasGMP.Models.Deviation", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("AuditTrail");
                });

            modelBuilder.Entity("YasGMP.Models.ExternalContractor", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("AuditLogs");

                    b.Navigation("Interventions");
                });

            modelBuilder.Entity("YasGMP.Models.Incident", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("YasGMP.Models.IncidentAction", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("YasGMP.Models.IncidentReport", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("AuditLogs");

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("YasGMP.Models.Machine", b =>
                {
                    b.Navigation("Calibrations");

                    b.Navigation("Components");

                    b.Navigation("Inspections");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("YasGMP.Models.MachineComponent", b =>
                {
                    b.Navigation("Calibrations");

                    b.Navigation("CapaCases");

                    b.Navigation("Photos");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("YasGMP.Models.MaintenanceExecutionLog", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("YasGMP.Models.Notification", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("YasGMP.Models.NotificationLog", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("ChannelHistory");
                });

            modelBuilder.Entity("YasGMP.Models.Part", b =>
                {
                    b.Navigation("ChangeLogs");

                    b.Navigation("StockHistory");

                    b.Navigation("StockLevels");

                    b.Navigation("SupplierPrices");

                    b.Navigation("WarehouseStocks");

                    b.Navigation("Warehouses");

                    b.Navigation("WorkOrderParts");
                });

            modelBuilder.Entity("YasGMP.Models.PartUsage", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("AuditLogs");
                });

            modelBuilder.Entity("YasGMP.Models.Permission", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("DelegatedPermissions");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("YasGMP.Models.PreventiveMaintenancePlan", b =>
                {
                    b.Navigation("ExecutionHistory");

                    b.Navigation("LinkedWorkOrders");
                });

            modelBuilder.Entity("YasGMP.Models.Qualification", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("YasGMP.Models.RiskAssessment", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("YasGMP.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("YasGMP.Models.Setting", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("YasGMP.Models.SopDocument", b =>
                {
                    b.Navigation("Approvers");
                });

            modelBuilder.Entity("YasGMP.Models.SparePart", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("DigitalSignatures");

                    b.Navigation("InventoryTransactions");

                    b.Navigation("StockLevels");

                    b.Navigation("SupplierPrices");

                    b.Navigation("WorkOrderParts");
                });

            modelBuilder.Entity("YasGMP.Models.Supplier", b =>
                {
                    b.Navigation("AuditHistory");

                    b.Navigation("CapaCases");

                    b.Navigation("PartsSupplied");
                });

            modelBuilder.Entity("YasGMP.Models.TrainingRecord", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Attendees");

                    b.Navigation("AuditLogs");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("YasGMP.Models.User", b =>
                {
                    b.Navigation("AdminActivityLogs");

                    b.Navigation("ApprovedAttachments");

                    b.Navigation("ApprovedPhotos");

                    b.Navigation("AssignedWorkOrders");

                    b.Navigation("AuditLogs");

                    b.Navigation("CreatedWorkOrders");

                    b.Navigation("DelegatedPermissions");

                    b.Navigation("DelegationsApproved");

                    b.Navigation("DelegationsGranted");

                    b.Navigation("DigitalSignatures");

                    b.Navigation("ModifiedPhotos");

                    b.Navigation("SessionLogs");

                    b.Navigation("UploadedAttachments");

                    b.Navigation("UploadedPhotos");
                });

            modelBuilder.Entity("YasGMP.Models.WorkOrder", b =>
                {
                    b.Navigation("AuditTrail");

                    b.Navigation("Comments");

                    b.Navigation("Photos");

                    b.Navigation("Signatures");

                    b.Navigation("StatusTimeline");

                    b.Navigation("UsedParts");
                });
#pragma warning restore 612, 618
        }
    }
}
