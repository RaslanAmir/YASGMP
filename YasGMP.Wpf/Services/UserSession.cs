using System;
using Microsoft.Extensions.Configuration;
using YasGMP.Models;
using YasGMP.Services;

namespace YasGMP.Wpf.Services
{
    /// <summary>
    /// Simple WPF shell user session implementing the shared <see cref="IUserSession"/> contract
    /// while exposing helpers so the login workflow can promote authenticated users into the
    /// ambient session context used by status bars, audits, and module telemetry.
    /// </summary>
    public sealed class UserSession : IUserSession
    {
        private readonly int? _fallbackUserId;
        private readonly string? _fallbackUsername;
        private readonly string? _fallbackFullName;

        private User? _currentUser;
        private string _sessionId;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserSession"/> class using optional
        /// configuration defaults when the operator has not logged in yet.
        /// </summary>
        public UserSession(IConfiguration configuration)
        {
            if (configuration is null)
            {
                throw new ArgumentNullException(nameof(configuration));
            }

            _fallbackUserId = configuration.GetValue<int?>("Shell:UserId");
            _fallbackUsername = configuration["Shell:Username"] ?? "wpf-shell";
            _fallbackFullName = configuration["Shell:FullName"];
            _sessionId = Guid.NewGuid().ToString("N");
        }

        /// <summary>Raised whenever the underlying session changes (login, logout, refresh).</summary>
        public event EventHandler? SessionChanged;

        /// <inheritdoc />
        public User? CurrentUser => _currentUser;

        /// <inheritdoc />
        public int? UserId => _currentUser?.Id ?? _fallbackUserId;

        /// <inheritdoc />
        public string? Username => _currentUser?.Username ?? _fallbackUsername;

        /// <inheritdoc />
        public string? FullName =>
            _currentUser?.FullName ?? _fallbackFullName ?? _currentUser?.Username ?? _fallbackUsername;

        /// <inheritdoc />
        public string SessionId => _sessionId;

        /// <summary>
        /// Applies a freshly authenticated user to the session and rotates the logical session id.
        /// </summary>
        /// <param name="user">Authenticated user instance.</param>
        /// <param name="sessionId">Logical session identifier generated by <see cref="AuthService"/>.</param>
        public void ApplyAuthenticatedUser(User user, string? sessionId)
        {
            if (user is null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            _currentUser = user;
            _sessionId = string.IsNullOrWhiteSpace(sessionId)
                ? Guid.NewGuid().ToString("N")
                : sessionId!;

            SessionChanged?.Invoke(this, EventArgs.Empty);
        }

        /// <summary>
        /// Clears the session back to defaults. Primarily used by logoff flows or failed re-authentication attempts.
        /// </summary>
        public void Reset()
        {
            _currentUser = null;
            _sessionId = Guid.NewGuid().ToString("N");
            SessionChanged?.Invoke(this, EventArgs.Empty);
        }
    }
}
