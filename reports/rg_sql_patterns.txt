Services\AuditService.cs:143:INSERT INTO entity_audit_log
Services\AuditService.cs:180:INSERT INTO export_audit_log
Services\AuditService.cs:218:                SELECT 
Services\AuditService.cs:242:                FROM entity_audit_log a
Services\AuditService.cs:243:                LEFT JOIN users u ON u.id = a.user_id
Services\AuditService.cs:317:                SELECT 
Services\AuditService.cs:329:                FROM system_event_log s
Services\AuditService.cs:330:                LEFT JOIN users u ON u.id = s.user_id
Services\AuditService.cs:404:            const string sql = @"SELECT COUNT(*) FROM information_schema.TABLES
Services\AuditService.cs:412:            const string sql = @"SELECT COUNT(*) FROM information_schema.COLUMNS
Models\ApiUsageLog.cs:63:        /// HTTP method used (GET, POST, PUT, DELETE, etc.).
ViewModels\AssetViewModel.cs:238:                await _dbService.LogAssetAuditAsync(SelectedAsset.Id, "UPDATE", userId, SafeIp, SafeDeviceInfo, SafeSessionId, signatureHash).ConfigureAwait(false);
ViewModels\AssetViewModel.cs:265:                await _dbService.LogAssetAuditAsync(SelectedAsset.Id, "DELETE", userId, SafeIp, SafeDeviceInfo, SafeSessionId, string.Empty).ConfigureAwait(false);
Services\CalibrationService.cs:123:            await LogAudit(cal.Id, userId, CalibrationActionType.UPDATE,
Services\CalibrationService.cs:137:            await LogAudit(calibrationId, userId, CalibrationActionType.DELETE,
Views\AuditDashboardPage.xaml.cs:293:            /// <summary>Event type (CREATE/UPDATE/ÔÇŽ)</summary>
Services\CAPAAuditService.cs:44:            const string sql = @"INSERT INTO capa_audit_log /* ANALYZER_IGNORE: audit table */ 
Services\CAPAAuditService.cs:70:            const string sql = @"UPDATE capa_audit_log /* ANALYZER_IGNORE: audit table */ SET 
Services\CAPAAuditService.cs:93:            const string sql = @"DELETE FROM capa_audit_log /* ANALYZER_IGNORE: audit table */ WHERE id=@id";
ViewModels\AuditDashboardViewModel.cs:81:        public string[] ActionTypes => new[] { "All", "CREATE", "UPDATE", "DELETE", "SIGN", "ROLLBACK", "EXPORT" };
Models\AttachmentAuditLog.cs:23:        /// Audit action (CREATE, APPROVE, ROLLBACK, DELETE, ...).
ViewModels\AuditLogViewModel.cs:39:    /// <item><description><c>EventType</c> (e.g., CREATE/UPDATE/DELETE/LOGIN/...)</description></item>
ViewModels\AuditLogViewModel.cs:94:            "CREATE","UPDATE","DELETE","APPROVE","CLOSE","ESCALATE","EXPORT","ROLLBACK","COMMENT","LOGIN","LOGOUT","PRINT","SIGN","CONFIG_CHANGE"
Services\CAPAService.cs:101:            await LogAudit(capa.Id, userId, CapaActionType.UPDATE, $"Updated CAPA ID={capa.Id}");
Services\CAPAService.cs:115:            await LogAudit(capaId, userId, CapaActionType.DELETE, $"Deleted CAPA ID={capaId}");
Models\AuditLog.cs:45:        /// Action performed (e.g., CREATE, UPDATE, DELETE, LOGIN, PRINT, SIGN, EXPORT, ...).
Services\ComponentService.cs:115:                "UPDATE",
Services\ComponentService.cs:138:                "DELETE",
Models\AuditLogEntry.cs:25:        /// <summary>Audit action (CREATE, UPDATE, DELETE, LOCK, UNLOCK, EXPORT, etc.).</summary>
Views\CalibrationsPage.xaml.cs:81:                    .ExecuteSelectAsync("SELECT * FROM calibrations ORDER BY calibration_date DESC")
Views\CalibrationsPage.xaml.cs:214:                const string sql = @"INSERT INTO calibrations
Views\CalibrationsPage.xaml.cs:265:                const string sql = @"UPDATE calibrations SET
Views\CalibrationsPage.xaml.cs:287:                await LogAudit("UPDATE", updatedCal.Id, signature).ConfigureAwait(false);
ViewModels\CalibrationsViewModel.cs:258:                    .ExecuteSelectAsync("SELECT * FROM calibrations ORDER BY calibration_date DESC")
ViewModels\CalibrationsViewModel.cs:310:                await _dbService.ExecuteNonQueryAsync("DELETE FROM calibrations WHERE id=@id", pars).ConfigureAwait(false);
ViewModels\CalibrationsViewModel.cs:311:                await _auditService.LogCalibrationAuditAsync(SelectedCalibration.Id, "DELETE", $"Deleted calibration ID={SelectedCalibration.Id}").ConfigureAwait(false);
Services\DatabaseService.Assets.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM machines ORDER BY name, id", null, token).ConfigureAwait(false);
Services\DatabaseService.Assets.Extensions.cs:31:                const string sql = @"INSERT INTO machines (code, name, description, model, manufacturer, location, install_date, procurement_date, purchase_date, status, urs_doc, digital_signature)
Services\DatabaseService.Assets.Extensions.cs:58:                const string sql = @"UPDATE machines SET code=@code, name=@name, description=@desc, model=@model, manufacturer=@mf, location=@loc, status=@status, urs_doc=@urs, digital_signature=@sig WHERE id=@id";
Services\DatabaseService.Assets.Extensions.cs:80:            try { await db.ExecuteNonQueryAsync("DELETE FROM machines WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false); } catch { }
ViewModels\CapaCaseViewModel.cs:250:                    "UPDATE",
ViewModels\CapaCaseViewModel.cs:289:                    "DELETE",
Services\DatabaseService.Attachments.Extensions.cs:20:            string sql = "SELECT * FROM attachments WHERE 1=1";
Services\DatabaseService.Attachments.Extensions.cs:35:            const string sql = @"INSERT INTO attachments (file_name, file_path, entity_type, entity_id, uploaded_by, created_at)
Services\DatabaseService.Attachments.Extensions.cs:46:            var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.Attachments.Extensions.cs:54:            await db.ExecuteNonQueryAsync("DELETE FROM attachments WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Audit.Helpers.cs:39:        /// <param name="action">Action verb (CREATE, UPDATE, DELETE, EXPORT, etc.).</param>
Services\DatabaseService.Audit.Helpers.cs:56:            action ??= "UPDATE";
Services\DatabaseService.Audit.Helpers.cs:81:        /// <param name="action">Action verb (CREATE, UPDATE, DELETE, EXPORT, etc.).</param>
Services\DatabaseService.Audit.Helpers.cs:98:            action ??= "UPDATE";
Models\CalibrationAuditLog.cs:53:        /// Action type (CREATE, UPDATE, DELETE, EXPORT, etc).
Services\DatabaseService.Audit.QueryExtensions.cs:34:                const string sql = @"SELECT id, ts_utc, user_id, event_type, table_name, related_module, record_id,
Services\DatabaseService.Audit.QueryExtensions.cs:36:                                     FROM system_event_log
Services\Database\ShadowReplicator.cs:197:                var sql = $"SELECT * FROM `{table}` WHERE `{pk}`=@id LIMIT 1";
Views\ComponentsPage.xaml.cs:72:SELECT id, machine_id, code, name, type, sop_doc, status, install_date
Views\ComponentsPage.xaml.cs:73:FROM machine_components
Views\ComponentsPage.xaml.cs:125:INSERT INTO machine_components (machine_id, code, name, type, sop_doc, status, install_date)
Views\ComponentsPage.xaml.cs:179:UPDATE machine_components SET
Views\ComponentsPage.xaml.cs:221:                const string sql = @"UPDATE machine_components SET is_deleted=1, deleted_at=NOW() WHERE id=@id;";
Services\DatabaseService.Calibrations.Extensions.cs:20:            const string sql = @"SELECT * FROM calibrations ORDER BY calibration_date DESC, id DESC";
Services\DatabaseService.Calibrations.Extensions.cs:29:            const string sql = @"SELECT * FROM calibrations WHERE id=@id LIMIT 1";
Services\DatabaseService.Calibrations.Extensions.cs:36:            const string sql = @"SELECT * FROM calibrations WHERE component_id=@cid ORDER BY calibration_date DESC, id DESC";
Services\DatabaseService.Calibrations.Extensions.cs:45:            const string sql = @"SELECT * FROM calibrations WHERE supplier_id=@sid ORDER BY calibration_date DESC, id DESC";
Services\DatabaseService.Calibrations.Extensions.cs:54:            const string sql = @"SELECT * FROM calibrations WHERE calibration_date BETWEEN @f AND @t ORDER BY calibration_date DESC, id DESC";
Services\DatabaseService.Calibrations.Extensions.cs:66:            string insert = @"INSERT INTO calibrations (component_id, supplier_id, calibration_date, next_due, cert_doc, result, comment, digital_signature)
Services\DatabaseService.Calibrations.Extensions.cs:68:            string updateSql = @"UPDATE calibrations SET component_id=@cid, supplier_id=@sid, calibration_date=@cd, next_due=@due, cert_doc=@doc, result=@res, comment=@comm, digital_signature=@sig WHERE id=@id";
Services\DatabaseService.Calibrations.Extensions.cs:86:                var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.Calibrations.Extensions.cs:104:            await db.ExecuteNonQueryAsync("DELETE FROM calibrations WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
ViewModels\ChangeControlViewModel.cs:141:                var controls = await _dbService.ExecuteSelectAsync("SELECT * FROM change_controls").ConfigureAwait(false);
ViewModels\ChangeControlViewModel.cs:194:                    "INSERT INTO change_controls (code, title, description, status, requested_by_id, date_requested) VALUES (@code, @title, @desc, @status, @rbid, @dt)",
ViewModels\ChangeControlViewModel.cs:225:                    "UPDATE change_controls SET status=@status WHERE id=@id",
ViewModels\ChangeControlViewModel.cs:269:                    "UPDATE change_controls SET status=@status WHERE id=@id",
ViewModels\ChangeControlViewModel.cs:296:                    "UPDATE change_controls SET status=@status WHERE id=@id",
Services\DatabaseService.Capa.Cases.Extensions.cs:20:            const string sql = @"SELECT * FROM capa_cases ORDER BY id DESC";
Services\DatabaseService.Capa.Cases.Extensions.cs:29:            const string sql = @"SELECT * FROM capa_cases WHERE id=@id LIMIT 1";
Services\DatabaseService.Capa.Cases.Extensions.cs:37:            const string sql = @"INSERT INTO capa_cases (title, description, component_id, date_open, date_close, assigned_to_id, priority, status, root_cause, corrective_action, preventive_action, reason, actions, doc_file, digital_signature)
Services\DatabaseService.Capa.Cases.Extensions.cs:58:            var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.Capa.Cases.Extensions.cs:72:            const string sql = @"UPDATE capa_cases SET title=@t, description=@d, component_id=@cid, date_open=@open, date_close=@close, assigned_to_id=@assn, priority=@prio, status=@status, root_cause=@rc, corrective_action=@corr, preventive_action=@prev, reason=@reason, actions=@acts, doc_file=@doc, digital_signature=@sig WHERE id=@id";
Services\DatabaseService.Capa.Cases.Extensions.cs:189:            await db.ExecuteNonQueryAsync("DELETE FROM capa_cases WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.CapaExtensions.cs:26:            // TODO: SELECT * FROM capa_action_log WHERE id = @id;
Services\DatabaseService.CapaExtensions.cs:35:            // TODO: SELECT * FROM capa_action_log WHERE capa_case_id = @capaId ORDER BY performed_at DESC;
Services\DatabaseService.CapaExtensions.cs:44:            // TODO: SELECT * FROM capa_action_log WHERE performed_by = @userId ORDER BY performed_at DESC;
Services\DatabaseService.CapaExtensions.cs:53:            // TODO: SELECT * FROM capa_action_log WHERE action_type = @action ORDER BY performed_at DESC;
Services\DatabaseService.CapaExtensions.cs:63:            // TODO: SELECT * FROM capa_action_log WHERE performed_at BETWEEN @from AND @to ORDER BY performed_at DESC;
ViewModels\ContractorInterventionViewModel.cs:215:                    SelectedIntervention.Id, userId, "UPDATE", comment).ConfigureAwait(false);
ViewModels\ContractorInterventionViewModel.cs:243:                    SelectedIntervention.Id, userId, "DELETE", comment).ConfigureAwait(false);
Services\DatabaseService.ComponentExtensions.cs:20:        // INSERT / UPDATE ÔÇö Component
Services\DatabaseService.ComponentExtensions.cs:54:        // INSERT / UPDATE ÔÇö MachineComponent (fixes CS1503 in ComponentService.cs)
Services\DatabaseService.ComponentExtensions.cs:88:        // DELETE (componentId is shared; both types use the same delete)
Services\DatabaseService.ComponentOverloads.cs:24:        // ======================= INSERT / UPDATE (Component) =======================
Services\DatabaseService.ComponentOverloads.cs:49:                ? @"INSERT INTO machine_components
Services\DatabaseService.ComponentOverloads.cs:53:                : @"UPDATE machine_components SET
Services\DatabaseService.ComponentOverloads.cs:75:                : Convert.ToInt32(await ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false));
Services\DatabaseService.ComponentOverloads.cs:185:        // ======================= DELETE (Component) ================================
Services\DatabaseService.ComponentOverloads.cs:199:                "DELETE FROM machine_components WHERE id=@id",
Services\DatabaseService.ComponentOverloads.cs:231:                "DELETE FROM machine_components WHERE id=@id",
Services\DatabaseService.Components.QueryExtensions.cs:23:            const string sql = @"SELECT * FROM machine_components ORDER BY id DESC";
Services\DatabaseService.Components.QueryExtensions.cs:36:            const string sql = @"SELECT * FROM machine_components WHERE id=@id LIMIT 1";
Services\DatabaseService.ContractorInterventionExtensions.cs:93:        // UPDATE (LEGACY FORWARDS)
Services\DatabaseService.ContractorInterventionExtensions.cs:128:        // DELETE (LEGACY FORWARDS)
Services\DatabaseService.ContractorInterventions.Extensions.cs:39:SELECT *
Services\DatabaseService.ContractorInterventions.Extensions.cs:40:FROM contractor_interventions
Services\DatabaseService.ContractorInterventions.Extensions.cs:61:SELECT id, intervention_id, user_id, action, description, timestamp, source_ip, device_info, session_id
Services\DatabaseService.ContractorInterventions.Extensions.cs:62:FROM contractor_intervention_audit
Services\DatabaseService.ContractorInterventions.Extensions.cs:91:        // CREATE / UPDATE (bridge to canonical Ultra method)
Services\DatabaseService.ContractorInterventions.Extensions.cs:120:            string insert = @"INSERT INTO contractor_interventions (contractor_id, component_id, intervention_date, reason, result, gmp_compliance, doc_file)
Services\DatabaseService.ContractorInterventions.Extensions.cs:122:            string updateSql = @"UPDATE contractor_interventions SET contractor_id=@cid, component_id=@comp, intervention_date=@date, reason=@reason, result=@result, gmp_compliance=@gmp, doc_file=@doc WHERE id=@id";
Services\DatabaseService.ContractorInterventions.Extensions.cs:139:                var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, cancellationToken).ConfigureAwait(false);
Services\DatabaseService.ContractorInterventions.Extensions.cs:195:            await db.LogSystemEventAsync(userId, "UPDATE", "contractor_interventions", "ContractorModule",
Services\DatabaseService.ContractorInterventions.Extensions.cs:212:        // DELETE
Services\DatabaseService.ContractorInterventions.Extensions.cs:224:            const string sql = "DELETE FROM contractor_interventions WHERE id=@id;";
Services\DatabaseService.ContractorInterventions.Extensions.cs:228:            await db.LogSystemEventAsync(userId, "DELETE", "contractor_interventions", "ContractorModule",
Services\DatabaseService.ContractorInterventions.Extensions.cs:323:                audit?.Action ?? "UPDATE",
Services\DatabaseService.ContractorInterventions.Extensions.cs:337:INSERT INTO contractor_intervention_audit
Services\DatabaseService.ContractorInterventions.Extensions.cs:346:                new MySqlParameter("@act", action ?? "UPDATE"),
Services\DatabaseService.cs:75:        /// <summary>Executes a non-query (INSERT/UPDATE/DELETE). Returns affected rows.</summary>
Services\DatabaseService.cs:123:        /// <summary>Executes a SELECT and returns a DataTable (loaded from a reader).</summary>
Services\DatabaseService.cs:222:        /// <param name="eventType">Event type (e.g., CREATE, UPDATE, DELETE, LOGIN). If null/empty and <paramref name="eventCode"/> is provided, that value is used.</param>
Services\DatabaseService.cs:262:INSERT INTO system_event_log
Services\DatabaseService.cs:304:INSERT INTO system_event_log (user_id, event_type, table_name, related_module, record_id, description, source_ip, severity)
Models\ContractorInterventionAudit.cs:16:        // e.g. "CREATE", "UPDATE", "DELETE", "ROLLBACK", "EXPORT"
Services\DatabaseService.DeviationAudit.Extensions.cs:24:            const string sql = @"INSERT INTO deviation_audit (deviation_id, user_id, action, details, changed_at, device_info, source_ip, session_id, digital_signature, regulatory_status, ai_anomaly_score, validated, comment, old_value, new_value, signature_type, signature_valid, export_status, export_time, exported_by, restored_from_snapshot, restoration_reference, approval_status, approval_time, approved_by, deleted, deleted_at, deleted_by, created_at, updated_at, related_file, related_photo, iot_event_id)
Services\DatabaseService.DeviationAudit.Extensions.cs:28:            var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.DeviationAudit.Extensions.cs:38:            const string sql = @"UPDATE deviation_audit SET deviation_id=@dev, user_id=@uid, action=@act, details=@det, changed_at=@chg, device_info=@devinfo, source_ip=@ip, session_id=@sid, digital_signature=@sig, regulatory_status=@reg, ai_anomaly_score=@ais, validated=@val, comment=@com, old_value=@old, new_value=@new, signature_type=@sigtype, signature_valid=@sigok, export_status=@expst, export_time=@exptm, exported_by=@expby, restored_from_snapshot=@restored, restoration_reference=@restref, approval_status=@apprst, approval_time=@apprtm, approved_by=@apprby, deleted=@del, deleted_at=@delat, deleted_by=@delby, updated_at=NOW(), related_file=@rfile, related_photo=@rphoto, iot_event_id=@iot WHERE id=@id";
Services\DatabaseService.DeviationAudit.Extensions.cs:48:            await db.ExecuteNonQueryAsync("DELETE FROM deviation_audit WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.DeviationAudit.Extensions.cs:55:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviation_audit WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.DeviationAudit.Extensions.cs:62:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviation_audit WHERE deviation_id=@id ORDER BY changed_at DESC, id DESC", new[] { new MySqlParameter("@id", deviationId) }, token).ConfigureAwait(false);
Services\DatabaseService.DeviationAudit.Extensions.cs:68:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviation_audit WHERE user_id=@id ORDER BY changed_at DESC, id DESC", new[] { new MySqlParameter("@id", userId) }, token).ConfigureAwait(false);
Services\DatabaseService.DeviationAudit.Extensions.cs:74:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviation_audit WHERE action=@a ORDER BY changed_at DESC, id DESC", new[] { new MySqlParameter("@a", action) }, token).ConfigureAwait(false);
Services\DatabaseService.DeviationAudit.Extensions.cs:80:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviation_audit WHERE changed_at BETWEEN @f AND @t ORDER BY changed_at DESC, id DESC",
ViewModels\MachineViewModel.cs:234:                    action: "UPDATE",
ViewModels\MachineViewModel.cs:267:                    action: "DELETE",
Services\DatabaseService.Deviations.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviations ORDER BY id DESC", null, token).ConfigureAwait(false);
Services\DatabaseService.Deviations.Extensions.cs:28:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviations WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Deviations.Extensions.cs:35:            string insert = @"INSERT INTO deviations (code, title, description, reported_at, reported_by_id, severity, is_critical, status, assigned_investigator_id, assigned_investigator_name, investigation_started_at, root_cause, linked_capa_id, closure_comment, closed_at, digital_signature, risk_score, anomaly_score, last_modified, last_modified_by_id, source_ip, audit_note)
Services\DatabaseService.Deviations.Extensions.cs:37:            string updateSql = @"UPDATE deviations SET code=@code, title=@title, description=@desc, reported_at=@rep, reported_by_id=@rby, severity=@sev, is_critical=@crit, status=@status, assigned_investigator_id=@assid, assigned_investigator_name=@assname, investigation_started_at=@invstart, root_cause=@rc, linked_capa_id=@lcapa, closure_comment=@clos, closed_at=@closed, digital_signature=@sig, risk_score=@risk, anomaly_score=@anom, last_modified=NOW(), last_modified_by_id=@lmb, source_ip=@ip, audit_note=@audit WHERE id=@id";
Services\DatabaseService.Deviations.Extensions.cs:67:                var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.Deviations.Extensions.cs:82:            await db.ExecuteNonQueryAsync("DELETE FROM deviations WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.DigitalSignatures.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM digital_signatures ORDER BY signed_at DESC, id DESC", null, token).ConfigureAwait(false);
Services\DatabaseService.DigitalSignatures.Extensions.cs:29:            const string sql = @"INSERT INTO digital_signatures (table_name, record_id, user_id, signature_hash, method, status, signed_at, device_info, ip_address, note, public_key)
Services\DatabaseService.DigitalSignatures.Extensions.cs:46:            var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.DigitalSignatures.Extensions.cs:56:                await db.ExecuteNonQueryAsync("UPDATE digital_signatures SET status='revoked', note=@note WHERE id=@id", new[]
Views\MachinesPage.xaml.cs:61:                const string sql = @"SELECT id, code, name, manufacturer, location, install_date, urs_doc, status, qr_code 
Views\MachinesPage.xaml.cs:62:                                     FROM machines";
Views\MachinesPage.xaml.cs:110:INSERT INTO machines (code, name, manufacturer, location, install_date, urs_doc, status, qr_code)
Views\MachinesPage.xaml.cs:164:UPDATE machines SET 
Views\MachinesPage.xaml.cs:206:                const string sql = "DELETE FROM machines WHERE id=@id";
ViewModels\NotificationViewModel.cs:366:                    action: "DELETE",
Views\PartsPage.xaml.cs:86:                const string sql = @"SELECT id, code, name, supplier, price, stock, location, image FROM parts";
Views\PartsPage.xaml.cs:131:                const string sql = @"INSERT INTO parts (code, name, supplier, price, stock, location, image)
Views\PartsPage.xaml.cs:181:                const string sql = @"UPDATE parts SET 
Views\PartsPage.xaml.cs:222:                const string sql = "DELETE FROM parts WHERE id=@id";
Services\DatabaseService.Documents.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM documentcontrol ORDER BY id DESC", null, token).ConfigureAwait(false);
Services\DatabaseService.Documents.Extensions.cs:28:            const string sql = @"INSERT INTO documentcontrol (code, title, revision, status, file_path, description, device_info)
Services\DatabaseService.Documents.Extensions.cs:40:            var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.Documents.Extensions.cs:50:                await db.ExecuteNonQueryAsync("UPDATE documentcontrol SET revision=@rev, file_path=@file WHERE id=@id", new[]
Services\DatabaseService.Documents.Extensions.cs:66:            try { await db.ExecuteNonQueryAsync("UPDATE documentcontrol SET status='approved' WHERE id=@id", new[] { new MySqlParameter("@id", documentId) }, token).ConfigureAwait(false); } catch { }
Services\DatabaseService.Documents.Extensions.cs:72:            try { await db.ExecuteNonQueryAsync("UPDATE documentcontrol SET status='published' WHERE id=@id", new[] { new MySqlParameter("@id", documentId) }, token).ConfigureAwait(false); } catch { }
Services\DatabaseService.Documents.Extensions.cs:78:            try { await db.ExecuteNonQueryAsync("UPDATE documentcontrol SET status='expired' WHERE id=@id", new[] { new MySqlParameter("@id", documentId) }, token).ConfigureAwait(false); } catch { }
Services\DatabaseService.Documents.Extensions.cs:87:                await db.ExecuteNonQueryAsync("UPDATE documentcontrol SET linked_change_controls = CONCAT(IFNULL(linked_change_controls,''), CASE WHEN linked_change_controls IS NULL OR linked_change_controls='' THEN '' ELSE ',' END, @cc) WHERE id=@id",
Services\DatabaseService.ExternalServicers.Extensions.cs:21:            var dt = await db.ExecuteSelectAsync("SELECT * FROM external_contractors ORDER BY name, id", null, token).ConfigureAwait(false);
Services\DatabaseService.ExternalServicers.Extensions.cs:30:            string insert = @"INSERT INTO external_contractors (name, code, registration_number, contact_person, email, phone, address, type, status, cooperation_start, cooperation_end, comment, digital_signature)
Services\DatabaseService.ExternalServicers.Extensions.cs:32:            string updateSql = @"UPDATE external_contractors SET name=@name, code=@code, registration_number=@reg, contact_person=@contact, email=@em, phone=@ph, address=@addr, type=@type, status=@status, cooperation_start=@start, cooperation_end=@end, comment=@comm, digital_signature=@sig WHERE id=@id";
Services\DatabaseService.ExternalServicers.Extensions.cs:55:                var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.ExternalServicers.Extensions.cs:84:            => db.ExecuteNonQueryAsync("DELETE FROM external_contractors WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token);
Views\RollbackPreviewPage.xaml.cs:380:                /// <summary>Action type (e.g., UPDATE/DELETE).</summary>
ViewModels\PpmViewModel.cs:202:        #region === DELETE ===
Models\DeviationAudit.cs:11:    /// Maps one row per action (CREATE/UPDATE/APPROVE/REJECT/ASSIGN/ESCALATE/EXPORT/ROLLBACK/etc.), including forensics.
Models\DeviationAudit.cs:49:            get => EnumTryParseOrDefault(Action, Enums.DeviationActionType.UPDATE);
Services\DatabaseService.IncidentAudits.Extensions.cs:36:                const string sql = @"INSERT INTO incident_audit /* ANALYZER_IGNORE: audit table */ (incident_id, user_id, action, old_value, new_value, action_at, note, source_ip, digital_signature, capa_id, work_order_id, device_info, integrity_hash, inspector_note)
Services\DatabaseService.IncidentAudits.Extensions.cs:56:                var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.IncidentAudits.Extensions.cs:71:                var dt = await db.ExecuteSelectAsync("SELECT * FROM incident_audit WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.IncidentAudits.Extensions.cs:84:                var dt = await db.ExecuteSelectAsync("SELECT * FROM incident_audit WHERE incident_id=@id ORDER BY action_at DESC, id DESC", new[] { new MySqlParameter("@id", incidentId) }, token).ConfigureAwait(false);
Services\DatabaseService.IncidentAudits.Extensions.cs:97:                var dt = await db.ExecuteSelectAsync("SELECT * FROM incident_audit WHERE user_id=@id ORDER BY action_at DESC, id DESC", new[] { new MySqlParameter("@id", userId) }, token).ConfigureAwait(false);
ViewModels\QualificationViewModel.cs:257:                await _dbService.LogQualificationAuditAsync(SelectedQualification, "UPDATE", _currentIpAddress, _currentDeviceInfo, _currentSessionId, sig);
ViewModels\QualificationViewModel.cs:279:                await _dbService.LogQualificationAuditAsync(SelectedQualification, "DELETE", _currentIpAddress, _currentDeviceInfo, _currentSessionId, null);
Models\DTO\CapaAuditLog.cs:16:        /// <summary>Action performed (CREATE/UPDATE/DELETE/APPROVE/ROLLBACK/...)</summary>
ViewModels\WorkOrderViewModel.cs:255:                await _dbService.LogWorkOrderAuditAsync(SelectedWorkOrder.Id, actorId, "UPDATE", null, _currentIpAddress, _currentDeviceInfo).ConfigureAwait(false);
ViewModels\WorkOrderViewModel.cs:277:                await _dbService.LogWorkOrderAuditAsync(SelectedWorkOrder.Id, actorId, "DELETE", null, _currentIpAddress, _currentDeviceInfo).ConfigureAwait(false);
Views\SuppliersPage.xaml.cs:71:            const string sql = @"SELECT id, name, vat_number, address, city, country, email, phone, website, supplier_type, notes, contract_file 
Views\SuppliersPage.xaml.cs:72:                                 FROM suppliers";
Views\SuppliersPage.xaml.cs:113:                const string sql = @"INSERT INTO suppliers (name, vat_number, address, city, country, email, phone, website, supplier_type, notes, contract_file)
Views\SuppliersPage.xaml.cs:169:                const string sql = @"UPDATE suppliers SET 
Views\SuppliersPage.xaml.cs:215:            const string sql = "DELETE FROM suppliers WHERE id=@id";
Services\WorkOrderAuditService.cs:54:        #region === UPDATE AUDIT ===
Services\WorkOrderAuditService.cs:70:        #region === DELETE AUDIT ===
Services\WindowManagerService.cs:162:SELECT pos_x, pos_y, width, height
Services\WindowManagerService.cs:163:FROM user_window_layouts
Services\WindowManagerService.cs:204:INSERT INTO user_window_layouts (user_id, page_type, pos_x, pos_y, width, height, saved_at)
Services\WindowManagerService.cs:206:ON DUPLICATE KEY UPDATE
Models\LogEntry.cs:51:        /// Action type (CREATE, UPDATE, DELETE, LOGIN, LOGOUT, EXPORT, PRINT, SIGN, etc.).
Models\PpmAudit.cs:21:        /// <summary>Enum ÔÇö Action performed (CREATE, UPDATE, EXECUTE, DELETE, EXPORT, etc.)</summary>
ViewModels\ValidationViewModel.cs:204:                await _dbService.LogValidationAuditAsync(SelectedValidation, "UPDATE", _currentIpAddress, _currentDeviceInfo, _currentSessionId, signatureHash).ConfigureAwait(false);
ViewModels\ValidationViewModel.cs:224:                await _dbService.LogValidationAuditAsync(SelectedValidation, "DELETE", _currentIpAddress, _currentDeviceInfo, _currentSessionId, null).ConfigureAwait(false);
Services\ValidationAuditService.cs:51:                const string sql = @"INSERT INTO validation_audit /* ANALYZER_IGNORE: audit table */ 
Services\ValidationAuditService.cs:103:                    "SELECT * FROM validation_audit WHERE validation_id=@vid ORDER BY changed_at DESC",
Services\ValidationAuditService.cs:122:                    "SELECT * FROM validation_audit WHERE id=@id",
Services\ValidationAuditService.cs:139:                    "DELETE FROM validation_audit /* ANALYZER_IGNORE: audit table */ WHERE id=@id",
ViewModels\UserViewModel.cs:204:                await _dbService.LogUserAuditAsync(SelectedUser, "UPDATE", _currentIpAddress, _currentDeviceInfo, _currentSessionId, signatureHash).ConfigureAwait(false);
ViewModels\UserViewModel.cs:227:                await _dbService.LogUserAuditAsync(SelectedUser, "DELETE", _currentIpAddress, _currentDeviceInfo, _currentSessionId, null).ConfigureAwait(false);
Services\ValidationAudit.cs:9:    /// <para>Ôťö Tracks every action performed on a validation (CREATE, UPDATE, EXECUTE, DELETE, etc.).</para>
Services\ValidationAudit.cs:27:        /// Type of action performed (CREATE, UPDATE, EXECUTE, DELETE, etc.).
Models\SqlQueryAuditLog.cs:9:    /// Tracks SELECT, INSERT, UPDATE, DELETE, DDL, EXPORT, API, IMPORT, REPORT, and more.
Models\SqlQueryAuditLog.cs:34:        /// <summary>Query type (SELECT, INSERT, UPDATE, DELETE, DDL, EXPORT, IMPORT, API, REPORT, SCALAR, STORED_PROC, OTHER).</summary>
Models\SqlQueryAuditLog.cs:48:        /// <summary>Number of affected rows (null for SELECT if unknown).</summary>
Models\SqlQueryAuditLog.cs:83:        /// <summary>JSON snapshot of data before change (for full rollback/audit, null for SELECT).</summary>
Models\SqlQueryAuditLog.cs:86:        /// <summary>JSON snapshot of data after change (for full rollback/audit, null for SELECT).</summary>
Models\ExternalContractor.cs:220:        /// <summary>Action type (CREATE/UPDATE/DELETE/ROLLBACK/...)</summary>
ViewModels\UserRolePermissionViewModel.cs:411:                await _dbService.LogUserAuditAsync(SelectedUser, "DELETE", _currentIpAddress, _currentDeviceInfo, _currentSessionId, null).ConfigureAwait(false);
Services\UserService.cs:134:            await _audit.LogEntityAuditAsync("users", user.Id, "UPDATE",
Services\UserService.cs:143:            await _audit.LogEntityAuditAsync("users", userId, "DELETE",
Services\UserService.cs:245:                "UPDATE users SET password_hash=@ph WHERE id=@id",
Models\SystemEventLog.cs:48:        /// Type of the event (e.g., CREATE, UPDATE, DELETE, LOGIN, LOGOUT, EXPORT, PRINT, AI, API, SYSTEM, CUSTOM).
Services\DatabaseService.WorkOrders.Extensions.cs:28:            const string sql = @"SELECT * FROM work_orders ORDER BY date_open DESC, id DESC";
Services\DatabaseService.WorkOrders.Extensions.cs:45:            const string sql = @"SELECT * FROM work_orders WHERE id=@id LIMIT 1";
Services\DatabaseService.WorkOrders.Extensions.cs:66:            string insert = @"INSERT INTO work_orders
Services\DatabaseService.WorkOrders.Extensions.cs:72:            string updateSql = @"UPDATE work_orders SET
Services\DatabaseService.WorkOrders.Extensions.cs:101:                    var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.WorkOrders.Extensions.cs:112:                string insertMin = @"INSERT INTO work_orders (machine_id, type, description, status, priority)
Services\DatabaseService.WorkOrders.Extensions.cs:114:                string updateMin = @"UPDATE work_orders SET machine_id=@mid, type=@type, description=@desc, status=@status, priority=@prio WHERE id=@id";
Services\DatabaseService.WorkOrders.Extensions.cs:128:                    var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.WorkOrders.Extensions.cs:191:            await db.ExecuteNonQueryAsync("DELETE FROM work_orders WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.WorkOrders.Extensions.cs:204:            await db.ExecuteNonQueryAsync("DELETE FROM work_orders WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.WorkOrders.Extensions.cs:231:            await db.ExecuteNonQueryAsync("UPDATE work_orders SET status='zavrsen' WHERE id=@id", new[] { new MySqlParameter("@id", workOrderId) }, token).ConfigureAwait(false);
Services\DatabaseService.WorkOrders.Extensions.cs:241:            await db.ExecuteNonQueryAsync("UPDATE work_orders SET status='zavrsen', date_close=NOW() WHERE id=@id", new[] { new MySqlParameter("@id", workOrderId) }, token).ConfigureAwait(false);
Services\DatabaseService.WorkOrders.Extensions.cs:280:                const string sql = @"INSERT INTO work_order_audit
Services\DatabaseService.WorkOrders.Extensions.cs:287:                    new MySqlParameter("@act", action ?? "UPDATE"),
Services\DatabaseService.RiskAssessments.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM risk_assessments ORDER BY id DESC", null, token).ConfigureAwait(false);
Services\DatabaseService.RiskAssessments.Extensions.cs:30:            => db.LogRiskAssessmentAuditAsync(risk, "UPDATE", ip, deviceInfo, sessionId, null, token);
Services\DatabaseService.Notifications.Extensions.cs:22:                var dt = await db.ExecuteSelectAsync("SELECT * FROM notifications /* ANALYZER_IGNORE: legacy table */ ORDER BY created_at DESC, id DESC", null, token).ConfigureAwait(false);
Services\DatabaseService.Notifications.Extensions.cs:30:SELECT nq.id,
Services\DatabaseService.Notifications.Extensions.cs:46:FROM notification_queue nq
Services\DatabaseService.Notifications.Extensions.cs:47:LEFT JOIN notification_templates nt ON nt.id = nq.template_id
Services\DatabaseService.Notifications.Extensions.cs:59:            const string sql = @"INSERT INTO notifications /* ANALYZER_IGNORE: legacy table */ (title, message, type, priority, status, entity, entity_id, link, recipients, recipient_id, sender_id, ip_address, device_info, session_id, created_at)
Services\DatabaseService.Notifications.Extensions.cs:81:                var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.Notifications.Extensions.cs:86:                const string q = @"INSERT INTO notification_queue (template_id, recipient_user_id, channel, payload, scheduled_at, status)
Services\DatabaseService.Notifications.Extensions.cs:98:                var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.Notifications.Extensions.cs:120:            try { await db.ExecuteNonQueryAsync("UPDATE notifications /* ANALYZER_IGNORE: legacy table */ SET status='acknowledged', acked_by=@u, acked_at=NOW() WHERE id=@id", new[] { new MySqlParameter("@u", actorUserId), new MySqlParameter("@id", notificationId) }, token).ConfigureAwait(false); } catch { }
Services\DatabaseService.Notifications.Extensions.cs:126:            try { await db.ExecuteNonQueryAsync("UPDATE notifications /* ANALYZER_IGNORE: legacy table */ SET status='muted', muted_until=@until WHERE id=@id", new[] { new MySqlParameter("@until", mutedUntilUtc), new MySqlParameter("@id", notificationId) }, token).ConfigureAwait(false); } catch { }
Services\DatabaseService.Notifications.Extensions.cs:132:            try { await db.ExecuteNonQueryAsync("DELETE FROM notifications /* ANALYZER_IGNORE: legacy table */ WHERE id=@id", new[] { new MySqlParameter("@id", notificationId) }, token).ConfigureAwait(false); } catch { }
Services\DatabaseService.Notifications.Extensions.cs:133:            await db.LogNotificationAuditAsync(notificationId, actorUserId, "DELETE", ip, deviceInfo, sessionId, null, token).ConfigureAwait(false);
Services\DatabaseService.Incidents.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM incidents /* ANALYZER_IGNORE: pending schema mapping */ ORDER BY id DESC", null, token).ConfigureAwait(false);
Services\DatabaseService.Incidents.Extensions.cs:28:            var dt = await db.ExecuteSelectAsync("SELECT * FROM incidents /* ANALYZER_IGNORE: pending schema mapping */ WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Incidents.Extensions.cs:35:            string insert = @"INSERT INTO incidents /* ANALYZER_IGNORE: pending schema mapping */ (title, description, type, priority, detected_at, reported_at, reported_by_id, assigned_to_id, work_order_id, capa_case_id, status, root_cause, closed_at, closed_by_id, digital_signature, last_modified, last_modified_by_id, source_ip, notes, is_deleted, anomaly_score, risk_level, assigned_investigator, classification, linked_deviation_id, linked_capa_id, closure_comment, is_critical)
Services\DatabaseService.Incidents.Extensions.cs:37:            string updateSql = @"UPDATE incidents /* ANALYZER_IGNORE: pending schema mapping */ SET title=@t, description=@d, type=@type, priority=@prio, detected_at=@det, reported_at=@rep, reported_by_id=@rby, assigned_to_id=@assn, work_order_id=@wo, capa_case_id=@capa, status=@status, root_cause=@rc, closed_at=@closed, closed_by_id=@cby, digital_signature=@sig, last_modified=NOW(), last_modified_by_id=@lmb, source_ip=@ip, notes=@notes, is_deleted=@del, anomaly_score=@anom, risk_level=@risk, assigned_investigator=@invest, classification=@class, linked_deviation_id=@ldev, linked_capa_id=@lcapa, closure_comment=@clos, is_critical=@critical WHERE id=@id";
Services\DatabaseService.Incidents.Extensions.cs:73:                var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.Incidents.Extensions.cs:88:            await db.ExecuteNonQueryAsync("DELETE FROM incidents /* ANALYZER_IGNORE: pending schema mapping */ WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
ViewModels\SupplierViewModel.cs:226:                    SelectedSupplier.Id, "UPDATE", userId, $"sig={signatureHash}; session={_currentSessionId}",
ViewModels\SupplierViewModel.cs:252:                    SelectedSupplier.Id, "DELETE", userId, $"session={_currentSessionId}",
Services\DatabaseService.Validations.Extensions.cs:22:        #region === SELECT ===
Services\DatabaseService.Validations.Extensions.cs:34:            const string sql = @"SELECT * FROM validations
Services\DatabaseService.Validations.Extensions.cs:50:            const string sql = @"SELECT * FROM validations WHERE id=@id LIMIT 1";
Services\DatabaseService.Validations.Extensions.cs:57:        #region === INSERT / UPDATE / DELETE ===
Services\DatabaseService.Validations.Extensions.cs:75:INSERT INTO validations
Services\DatabaseService.Validations.Extensions.cs:82:                v.Id = Convert.ToInt32(await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false));
Services\DatabaseService.Validations.Extensions.cs:101:UPDATE validations SET
Services\DatabaseService.Validations.Extensions.cs:162:            await db.LogValidationAuditAsync(v, "UPDATE", ip, deviceInfo, sessionId, signatureHash, token).ConfigureAwait(false);
Services\DatabaseService.Validations.Extensions.cs:174:            const string sql = @"DELETE FROM validations WHERE id=@id";
Services\DatabaseService.Validations.Extensions.cs:289:INSERT INTO validation_audit
Services\DatabaseService.Validations.Extensions.cs:340:        /// Builds parameter array for INSERT/UPDATE against the <c>validations</c> table.
Services\DatabaseService.Rbac.Extensions.cs:55:            const string sql = @"SELECT * FROM users ORDER BY full_name, username, id;";
Services\DatabaseService.Rbac.Extensions.cs:106:            const string sql = @"SELECT * FROM users WHERE id=@id LIMIT 1;";
Services\DatabaseService.Rbac.Extensions.cs:112:        // USERS: CREATE / UPDATE / DELETE
Services\DatabaseService.Rbac.Extensions.cs:178:            await db.LogUserAuditAsync(user, "UPDATE", ip, deviceInfo, sessionId, signatureHash, token).ConfigureAwait(false);
Services\DatabaseService.Rbac.Extensions.cs:198:                    "UPDATE users SET is_deleted=1, deleted_at=NOW() WHERE id=@id",
Services\DatabaseService.Rbac.Extensions.cs:209:                    "DELETE FROM users WHERE id=@id",
Services\DatabaseService.Rbac.Extensions.cs:213:            await db.LogUserAuditAsync(null, "DELETE", ip, deviceInfo, sessionId, $"Deleted by #{adminUserId} (UserId={userId})", token).ConfigureAwait(false);
Services\DatabaseService.Rbac.Extensions.cs:257:            var dt = await db.ExecuteSelectAsync("SELECT * FROM roles ORDER BY name, id", null, token).ConfigureAwait(false);
Services\DatabaseService.Rbac.Extensions.cs:269:            var dt = await db.ExecuteSelectAsync("SELECT * FROM permissions ORDER BY code, id", null, token).ConfigureAwait(false);
Services\DatabaseService.Rbac.Extensions.cs:288:INSERT INTO user_roles (user_id, role_id, granted_by, granted_at)
Services\DatabaseService.Rbac.Extensions.cs:290:ON DUPLICATE KEY UPDATE granted_by=VALUES(granted_by), granted_at=VALUES(granted_at);";
Services\DatabaseService.Rbac.Extensions.cs:315:                "DELETE FROM user_roles WHERE user_id=@u AND role_id=@r",
Services\DatabaseService.Rbac.Extensions.cs:334:INSERT INTO role_permissions (role_id, permission_id)
Services\DatabaseService.Rbac.Extensions.cs:336:ON DUPLICATE KEY UPDATE role_id=role_id;";
Services\DatabaseService.Rbac.Extensions.cs:360:                "DELETE FROM role_permissions WHERE role_id=@r AND permission_id=@p",
Services\DatabaseService.Rbac.Extensions.cs:401:INSERT INTO user_audit (user_id, action, description, created_at, source_ip, device_info, session_id)
Services\DatabaseService.Rbac.Extensions.cs:406:                    new MySqlParameter("@act",  action ?? "UPDATE"),
Services\DatabaseService.Rbac.Extensions.cs:446:INSERT INTO role_audit (role_id, action, description, created_at, source_ip, device_info, session_id)
Services\DatabaseService.Rbac.Extensions.cs:451:                    new MySqlParameter("@act",  action ?? "UPDATE"),
Services\DatabaseService.Rbac.Extensions.cs:487:INSERT INTO export_print_log (user_id, format, table_name, filter_used, file_path, source_ip, note)
Services\DatabaseService.Rbac.Extensions.cs:521:INSERT INTO export_print_log (user_id, format, table_name, filter_used, file_path, source_ip, note)
Services\DatabaseService.Rbac.Extensions.cs:555:INSERT INTO export_print_log (user_id, format, table_name, filter_used, file_path, source_ip, note)
Services\DatabaseService.Rbac.Extensions.cs:657:                    $"SELECT user_id, role_id FROM user_roles WHERE user_id IN ({inClause})", pars, token)
Services\DatabaseService.Rbac.Extensions.cs:691:                    $"SELECT user_id, permission_id FROM user_permissions WHERE user_id IN ({inClause})", pars, token)
Services\DatabaseService.Machines.CoreExtensions.cs:21:            var dt = await db.ExecuteSelectAsync("SELECT * FROM machines ORDER BY name, id", null, token).ConfigureAwait(false);
Services\DatabaseService.Machines.CoreExtensions.cs:50:            var dt = await db.ExecuteSelectAsync("SELECT * FROM machines WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Machines.CoreExtensions.cs:74:            string insert = @"INSERT INTO machines (code, name, description, model, manufacturer, location, install_date, procurement_date, status, urs_doc, serial_number, acquisition_cost, rfid_tag, qr_code, iot_device_id, cloud_device_guid)
Services\DatabaseService.Machines.CoreExtensions.cs:76:            string updateSql = @"UPDATE machines SET code=@code, name=@name, description=@desc, model=@model, manufacturer=@mf, location=@loc, install_date=@inst, procurement_date=@proc, status=@status, urs_doc=@urs, serial_number=@sn, acquisition_cost=@cost, rfid_tag=@rfid, qr_code=@qr, iot_device_id=@iot, cloud_device_guid=@cloud WHERE id=@id";
Services\DatabaseService.Machines.CoreExtensions.cs:102:                var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.Machines.CoreExtensions.cs:151:                await db.ExecuteNonQueryAsync("DELETE FROM machines WHERE id=@id", new[] { new MySqlConnector.MySqlParameter("@id", machineId) }, token).ConfigureAwait(false);
Services\DatabaseService.IncidentReports.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM incidents /* ANALYZER_IGNORE: pending schema mapping */ ORDER BY reported_at DESC, id DESC", null, token).ConfigureAwait(false);
Services\DatabaseService.IncidentReports.Extensions.cs:29:            const string sql = @"INSERT INTO incidents /* ANALYZER_IGNORE: pending schema mapping */ (title, type, status, description, detected_at, reported_at, reported_by_id, assigned_to_id, machine_id, component_id, root_cause, digital_signature, last_modified, last_modified_by_id, source_ip)
Services\DatabaseService.IncidentReports.Extensions.cs:53:            try { await db.ExecuteNonQueryAsync("UPDATE incidents /* ANALYZER_IGNORE: pending schema mapping */ SET assigned_to_id=@u WHERE id=@id", new[] { new MySqlParameter("@u", userId), new MySqlParameter("@id", incidentId) }, token).ConfigureAwait(false); } catch { }
Services\DatabaseService.IncidentReports.Extensions.cs:63:            try { await db.ExecuteNonQueryAsync("UPDATE incidents /* ANALYZER_IGNORE: pending schema mapping */ SET status='investigated' WHERE id=@id", new[] { new MySqlParameter("@id", report.Id) }, token).ConfigureAwait(false); } catch { }
Services\DatabaseService.IncidentReports.Extensions.cs:69:            try { await db.ExecuteNonQueryAsync("UPDATE incidents /* ANALYZER_IGNORE: pending schema mapping */ SET status='approved' WHERE id=@id", new[] { new MySqlParameter("@id", incidentId) }, token).ConfigureAwait(false); } catch { }
Services\DatabaseService.IncidentReports.Extensions.cs:78:            try { await db.ExecuteNonQueryAsync("UPDATE incidents /* ANALYZER_IGNORE: pending schema mapping */ SET status='closed', closed_at=NOW(), closed_by_id=@u WHERE id=@id", new[] { new MySqlParameter("@id", incidentId), new MySqlParameter("@u", actorUserId) }, token).ConfigureAwait(false); } catch { }
Services\DatabaseService.Qualifications.Extensions.cs:21:            var dt = await db.ExecuteSelectAsync("SELECT * FROM component_qualifications ORDER BY qualification_date DESC, id DESC", null, token).ConfigureAwait(false);
Services\DatabaseService.Qualifications.Extensions.cs:32:                await db.ExecuteNonQueryAsync(@"INSERT INTO component_qualifications (component_id, supplier_id, qualification_date, status, certificate_number)
Services\DatabaseService.Qualifications.Extensions.cs:51:                await db.ExecuteNonQueryAsync(@"UPDATE component_qualifications SET component_id=@comp, supplier_id=@supp, qualification_date=@date, status=@status, certificate_number=@cert WHERE id=@id", new[]
Services\DatabaseService.Qualifications.Extensions.cs:62:            await db.LogQualificationAuditAsync(q, "UPDATE", ip, device, sessionId, signature, token).ConfigureAwait(false);
Services\DatabaseService.Qualifications.Extensions.cs:67:            try { await db.ExecuteNonQueryAsync("DELETE FROM component_qualifications WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false); } catch { }
Services\DatabaseService.Qualifications.Extensions.cs:68:            await db.LogQualificationAuditAsync(null, "DELETE", ip, device, sessionId, null, token).ConfigureAwait(false);
Services\SystemEvent.Poco.cs:16:        /// <summary>Event type (e.g., CREATE, UPDATE, DELETE, LOGIN).</summary>
Services\DatabaseService.Users.Extensions.cs:60:            const string sql = @"SELECT * FROM users WHERE id=@id LIMIT 1;";
Services\DatabaseService.Users.Extensions.cs:75:            const string sql = @"SELECT * FROM users WHERE LOWER(username)=LOWER(@u) LIMIT 1;";
Services\DatabaseService.Users.Extensions.cs:94:            var dt = await db.ExecuteSelectAsync("SELECT * FROM users ORDER BY username", null, token).ConfigureAwait(false);
Services\DatabaseService.Users.Extensions.cs:115:                ? @"INSERT INTO users
Services\DatabaseService.Users.Extensions.cs:118:                : @"UPDATE users SET
Services\DatabaseService.Users.Extensions.cs:143:                    ? @"INSERT INTO users /* ANALYZER_IGNORE: legacy schema */
Services\DatabaseService.Users.Extensions.cs:146:                    : @"UPDATE users /* ANALYZER_IGNORE: legacy schema */ SET
Services\DatabaseService.Users.Extensions.cs:155:                var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.Users.Extensions.cs:171:                    "UPDATE users SET last_login=NOW(), failed_login_attempts=0 WHERE id=@id",
Services\DatabaseService.Users.Extensions.cs:177:                    "UPDATE users /* ANALYZER_IGNORE: legacy schema */ SET last_login=NOW(), failed_logins=0 WHERE id=@id",
Services\DatabaseService.Users.Extensions.cs:191:                    @"UPDATE users
Services\DatabaseService.Users.Extensions.cs:200:                    @"UPDATE users /* ANALYZER_IGNORE: legacy schema */
Services\DatabaseService.Users.Extensions.cs:214:            => db.ExecuteNonQueryAsync("UPDATE users SET is_locked=1 WHERE id=@id",
Services\DatabaseService.Users.Extensions.cs:230:                    "UPDATE users SET is_locked=0, failed_login_attempts=0 WHERE id=@id",
Services\DatabaseService.Users.Extensions.cs:236:                    "UPDATE users /* ANALYZER_IGNORE: legacy schema */ SET is_locked=0, failed_logins=0 WHERE id=@id",
Services\DatabaseService.Users.Extensions.cs:251:                "UPDATE users SET is_two_factor_enabled=@tfa WHERE id=@id",
Services\DatabaseService.Users.Extensions.cs:260:                    "UPDATE users SET password_reset_required=1 WHERE id=@id",
Services\DatabaseService.Users.Extensions.cs:282:            await db.ExecuteNonQueryAsync("DELETE FROM users WHERE id=@id",
Services\DatabaseService.Users.Extensions.cs:285:            await db.LogUserAuditShimAsync(actorUserId, "DELETE", ip, deviceInfo, sessionId, $"UserId={userId}", token).ConfigureAwait(false);
Services\DatabaseService.Rbac.CoreExtensions.cs:61:SELECT 1
Services\DatabaseService.Rbac.CoreExtensions.cs:62:FROM user_permissions up
Services\DatabaseService.Rbac.CoreExtensions.cs:63:JOIN permissions p ON p.id = up.permission_id
Services\DatabaseService.Rbac.CoreExtensions.cs:87:SELECT role_id
Services\DatabaseService.Rbac.CoreExtensions.cs:88:FROM user_roles
Services\DatabaseService.Rbac.CoreExtensions.cs:109:SELECT 1
Services\DatabaseService.Rbac.CoreExtensions.cs:110:FROM role_permissions rp
Services\DatabaseService.Rbac.CoreExtensions.cs:111:JOIN permissions p ON p.id = rp.permission_id
Services\DatabaseService.Rbac.CoreExtensions.cs:135:SELECT 1
Services\DatabaseService.Rbac.CoreExtensions.cs:136:FROM delegated_permissions d
Services\DatabaseService.Rbac.CoreExtensions.cs:137:JOIN permissions p ON p.id = d.permission_id
Services\DatabaseService.Rbac.CoreExtensions.cs:159:SELECT p.code
Services\DatabaseService.Rbac.CoreExtensions.cs:160:FROM user_permissions up
Services\DatabaseService.Rbac.CoreExtensions.cs:161:JOIN permissions p ON p.id = up.permission_id
Services\DatabaseService.Rbac.CoreExtensions.cs:184:SELECT p.code
Services\DatabaseService.Rbac.CoreExtensions.cs:185:FROM role_permissions rp
Services\DatabaseService.Rbac.CoreExtensions.cs:186:JOIN permissions p ON p.id=rp.permission_id
Services\DatabaseService.Rbac.CoreExtensions.cs:208:SELECT p.code
Services\DatabaseService.Rbac.CoreExtensions.cs:209:FROM delegated_permissions d
Services\DatabaseService.Rbac.CoreExtensions.cs:210:JOIN permissions p ON p.id = d.permission_id
Services\DatabaseService.Rbac.CoreExtensions.cs:244:INSERT INTO user_roles (user_id, role_id, granted_by, granted_at, expires_at)
Services\DatabaseService.Rbac.CoreExtensions.cs:246:ON DUPLICATE KEY UPDATE
Services\DatabaseService.Rbac.CoreExtensions.cs:288:                "DELETE FROM user_roles WHERE user_id=@uid AND role_id=@rid",
Services\DatabaseService.Rbac.CoreExtensions.cs:319:            var dt = await db.ExecuteSelectAsync("SELECT id FROM permissions WHERE code=@code LIMIT 1",
Services\DatabaseService.Rbac.CoreExtensions.cs:328:                "INSERT INTO permissions (code, name) VALUES (@code,@name)",
Services\DatabaseService.Rbac.CoreExtensions.cs:335:            return Convert.ToInt32(await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false));
Services\DatabaseService.Rbac.CoreExtensions.cs:354:INSERT INTO user_permissions (user_id, permission_id, allowed, reason, granted_by, granted_at, expires_at)
Services\DatabaseService.Rbac.CoreExtensions.cs:356:ON DUPLICATE KEY UPDATE
Services\DatabaseService.Rbac.CoreExtensions.cs:401:                "DELETE FROM user_permissions WHERE user_id=@uid AND permission_id=@pid",
Services\DatabaseService.Rbac.CoreExtensions.cs:440:INSERT INTO delegated_permissions (from_user_id, to_user_id, permission_id, expires_at, reason, granted_by)
Services\DatabaseService.Rbac.CoreExtensions.cs:477:UPDATE delegated_permissions
Services\DatabaseService.Rbac.CoreExtensions.cs:486:                    "SELECT to_user_id, permission_id FROM delegated_permissions WHERE id=@id",
Services\DatabaseService.Rbac.CoreExtensions.cs:511:INSERT INTO permission_change_log (user_id, changed_by, change_type, role_id, permission_id, action)
Services\DatabaseService.Rbac.CoreExtensions.cs:512:SELECT IFNULL(to_user_id, @actor), @actor, 'delegation', NULL, permission_id, 'revoke'
Services\DatabaseService.Rbac.CoreExtensions.cs:513:FROM delegated_permissions WHERE id=@id;",
Services\DatabaseService.Rbac.CoreExtensions.cs:543:INSERT INTO permission_requests (user_id, permission_id, reason, status, requested_at)
Services\DatabaseService.Rbac.CoreExtensions.cs:552:            return Convert.ToInt32(await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false));
Services\DatabaseService.Rbac.CoreExtensions.cs:564:            var dt = await db.ExecuteSelectAsync("SELECT * FROM permission_requests WHERE id=@id",
Services\DatabaseService.Rbac.CoreExtensions.cs:572:UPDATE permission_requests
Services\DatabaseService.Rbac.CoreExtensions.cs:594:            var dt = await db.ExecuteSelectAsync("SELECT * FROM permission_requests WHERE id=@id",
Services\DatabaseService.Rbac.CoreExtensions.cs:602:UPDATE permission_requests
Services\DatabaseService.Rbac.CoreExtensions.cs:633:            var dt = await db.ExecuteSelectAsync("SELECT * FROM roles ORDER BY name, id", null, token).ConfigureAwait(false);
Services\DatabaseService.Rbac.CoreExtensions.cs:650:            var dt = await db.ExecuteSelectAsync("SELECT * FROM permissions ORDER BY code, id", null, token).ConfigureAwait(false);
Services\DatabaseService.Rbac.CoreExtensions.cs:708:                // Minimal, schema-safe legacy INSERT (no fragile columns like 'changed_at' or optional fields).
Services\DatabaseService.Rbac.CoreExtensions.cs:710:INSERT INTO permission_change_log (user_id, changed_by, change_type, role_id, permission_id, action)
Services\DatabaseService.SpareParts.Extensions.cs:23:            var dt = await db.ExecuteSelectAsync("SELECT * FROM parts WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.SpareParts.Extensions.cs:38:            var dt = await db.ExecuteSelectAsync("SELECT * FROM parts ORDER BY name, id", null, token).ConfigureAwait(false);
Services\DatabaseService.SpareParts.Extensions.cs:47:            string insert = @"INSERT INTO parts (code, name, description, category, barcode, rfid, serial_or_lot, default_supplier_id, price, stock, min_stock_alert, location, image, status, blocked, regulatory_certificates, digital_signature, last_modified, last_modified_by_id, source_ip)
Services\DatabaseService.SpareParts.Extensions.cs:52:            var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.SpareParts.Extensions.cs:61:            string update = @"UPDATE parts SET code=@code, name=@name, description=@desc, category=@cat, barcode=@bar, rfid=@rfid, serial_or_lot=@serial, default_supplier_id=@supp, price=@price, stock=@stock, min_stock_alert=@min, location=@loc, image=@img, status=@status, blocked=@blocked, regulatory_certificates=@reg, digital_signature=@sig, last_modified=NOW(), last_modified_by_id=@lmb, source_ip=@ip WHERE id=@id";
Services\DatabaseService.SpareParts.Extensions.cs:65:            await db.LogSparePartAuditAsync(part.Id, "UPDATE", actorUserId, part.DigitalSignature, ip, deviceInfo, null, token).ConfigureAwait(false);
Services\DatabaseService.SpareParts.Extensions.cs:70:            await db.ExecuteNonQueryAsync("DELETE FROM parts WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.SpareParts.Extensions.cs:71:            await db.LogSparePartAuditAsync(id, "DELETE", actorUserId, null, ip, null, null, token).ConfigureAwait(false);
Services\DatabaseService.Ppm.Extensions.cs:23:                var dt = await db.ExecuteSelectAsync("SELECT * FROM preventive_maintenance_plans ORDER BY id DESC", null, token).ConfigureAwait(false);
Services\DatabaseService.Ppm.Extensions.cs:28:                var dt = await db.ExecuteSelectAsync("SELECT * FROM ppm_plans ORDER BY id DESC", null, token).ConfigureAwait(false);
Services\DatabaseService.Ppm.Extensions.cs:37:                var dt = await db.ExecuteSelectAsync("SELECT * FROM preventive_maintenance_plans WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Ppm.Extensions.cs:42:                var dt = await db.ExecuteSelectAsync("SELECT * FROM ppm_plans WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Ppm.Extensions.cs:51:            string insert = @"INSERT INTO preventive_maintenance_plans (code, name, description, machine_id, component_id, frequency, checklist_file, next_due, status)
Services\DatabaseService.Ppm.Extensions.cs:53:            string updateSql = @"UPDATE preventive_maintenance_plans SET code=@code, name=@name, description=@desc, machine_id=@mid, component_id=@cid, frequency=@freq, checklist_file=@file, next_due=@due, status=@status WHERE id=@id";
Services\DatabaseService.Ppm.Extensions.cs:74:                    var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.Ppm.Extensions.cs:89:                    var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.Ppm.Extensions.cs:105:                await db.ExecuteNonQueryAsync("DELETE FROM preventive_maintenance_plans WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Ppm.Extensions.cs:109:                await db.ExecuteNonQueryAsync("DELETE FROM ppm_plans WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Scheduler.Extensions.cs:17:            var dt = await db.ExecuteSelectAsync("SELECT * FROM scheduled_jobs ORDER BY next_due, id", null, token).ConfigureAwait(false);
ViewModels\SparePartViewModel.cs:221:                await _dbService.LogSparePartAuditAsync(SelectedSparePart.Id, "UPDATE", actor, sig, _currentIpAddress, _currentDeviceInfo, _currentSessionId);
ViewModels\SparePartViewModel.cs:243:                await _dbService.LogSparePartAuditAsync(SelectedSparePart.Id, "DELETE", actor, null, _currentIpAddress, _currentDeviceInfo, _currentSessionId);
Services\SupplierService.cs:63:                SupplierActionType.UPDATE,
Services\SupplierService.cs:74:                SupplierActionType.DELETE,
Services\DatabaseService.SystemEvents.QueryExtensions.cs:30:            string sql = "SELECT id, ts_utc, user_id, event_type, table_name, related_module, record_id, field_name, old_value, new_value, description, source_ip, device_info, session_id, severity, processed FROM system_event_log WHERE 1=1";
Services\DatabaseService.Settings.Extensions.cs:20:                var dt = await db.ExecuteSelectAsync("SELECT * FROM settings /* ANALYZER_IGNORE: legacy table */ ORDER BY `key`", null, token).ConfigureAwait(false);
Services\DatabaseService.Settings.Extensions.cs:58:SELECT id,
Services\DatabaseService.Settings.Extensions.cs:79:FROM system_parameters
Services\DatabaseService.Settings.Extensions.cs:122:            string insert = @"INSERT INTO settings /* ANALYZER_IGNORE: legacy table */ (`key`, `value`, default_value, value_type, min_value, max_value, description, category, subcategory, is_sensitive, is_global, user_id, role_id, approved_by_id, approved_at, digital_signature, status, updated_at, updated_by_id)
Services\DatabaseService.Settings.Extensions.cs:124:            string updateSql = @"UPDATE settings /* ANALYZER_IGNORE: legacy table */ SET `key`=@key, `value`=@val, default_value=@def, value_type=@type, min_value=@min, max_value=@max, description=@desc, category=@cat, subcategory=@sub, is_sensitive=@sens, is_global=@glob, user_id=@uid, role_id=@rid, approved_by_id=@apby, approved_at=@apat, digital_signature=@sig, status=@status, updated_at=NOW(), updated_by_id=@updby WHERE id=@id";
Services\DatabaseService.Settings.Extensions.cs:153:                    var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.Settings.Extensions.cs:165:                const string upsert = @"INSERT INTO system_parameters (param_name, param_value, updated_by, note)
Services\DatabaseService.Settings.Extensions.cs:167:                                      ON DUPLICATE KEY UPDATE param_value=VALUES(param_value), updated_by=VALUES(updated_by), updated_at=CURRENT_TIMESTAMP, note=VALUES(note)";
Services\DatabaseService.Settings.Extensions.cs:187:            try { await db.ExecuteNonQueryAsync("DELETE FROM settings /* ANALYZER_IGNORE: legacy table */ WHERE id=@id", new[] { new MySqlParameter("@id", settingId) }, token).ConfigureAwait(false); }
Services\DatabaseService.Settings.Extensions.cs:206:                const string upsert = @"INSERT INTO system_parameters (param_name, param_value, updated_by, note)
Services\DatabaseService.Settings.Extensions.cs:208:                                      ON DUPLICATE KEY UPDATE param_value=VALUES(param_value), updated_by=VALUES(updated_by), updated_at=CURRENT_TIMESTAMP, note=VALUES(note)";
Services\DatabaseService.Settings.Extensions.cs:226:                await db.ExecuteNonQueryAsync("DELETE FROM settings WHERE `key`=@k", new[] { new MySqlParameter("@k", key) }, token).ConfigureAwait(false);
Services\DatabaseService.Settings.Extensions.cs:230:                await db.ExecuteNonQueryAsync("DELETE FROM system_parameters WHERE param_name=@k", new[] { new MySqlParameter("@k", key) }, token).ConfigureAwait(false);
Services\DatabaseService.Settings.Extensions.cs:240:                await db.ExecuteNonQueryAsync("UPDATE settings SET `value`=default_value, updated_at=NOW(), updated_by_id=@u WHERE `key`=@k", new[] { new MySqlParameter("@u", actorUserId), new MySqlParameter("@k", key) }, token).ConfigureAwait(false);
Services\DatabaseService.Settings.Extensions.cs:245:                await db.ExecuteNonQueryAsync("DELETE FROM system_parameters WHERE param_name=@k", new[] { new MySqlParameter("@k", key) }, token).ConfigureAwait(false);
Services\DatabaseService.Suppliers.Extensions.cs:23:                var dt = await db.ExecuteSelectAsync("SELECT * FROM suppliers ORDER BY name, id", null, token).ConfigureAwait(false);
Services\DatabaseService.Suppliers.Extensions.cs:28:                var dt = await db.ExecuteSelectAsync("SELECT * FROM supplier /* ANALYZER_IGNORE: legacy table */ ORDER BY name, id", null, token).ConfigureAwait(false);
Services\DatabaseService.Suppliers.Extensions.cs:37:                var dt = await db.ExecuteSelectAsync("SELECT * FROM suppliers WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Suppliers.Extensions.cs:42:                var dt = await db.ExecuteSelectAsync("SELECT * FROM supplier /* ANALYZER_IGNORE: legacy table */ WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Suppliers.Extensions.cs:51:            string insert = @"INSERT INTO suppliers (name, vat_number, address, city, country, email, phone, website, supplier_type, notes, contract_file, status)
Services\DatabaseService.Suppliers.Extensions.cs:53:            string updateSql = @"UPDATE suppliers SET name=@name, vat_number=@vat, address=@addr, city=@city, country=@country, email=@em, phone=@ph, website=@web, supplier_type=@type, notes=@notes, contract_file=@contract, status=@status WHERE id=@id";
Services\DatabaseService.Suppliers.Extensions.cs:77:                    var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.Suppliers.Extensions.cs:93:                    var idObj = await db.ExecuteScalarAsync("SELECT LAST_INSERT_ID()", null, token).ConfigureAwait(false);
Services\DatabaseService.Suppliers.Extensions.cs:109:                await db.ExecuteNonQueryAsync("DELETE FROM suppliers WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Suppliers.Extensions.cs:113:                await db.ExecuteNonQueryAsync("DELETE FROM supplier WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Suppliers.Extensions.cs:178:            await db.LogSupplierAuditAsync(supplier.Id, "UPDATE", actorUserId, null, ip, device, sessionId: null, token: token).ConfigureAwait(false);
Services\DatabaseService.Suppliers.Extensions.cs:184:            await db.LogSupplierAuditAsync(id, "DELETE", actorUserId, null, ip, device, sessionId: null, token: token).ConfigureAwait(false);
Services\SupplierAuditService.cs:54:                        INSERT INTO supplier_audit
Services\DatabaseService.TrainingRecords.Extensions.cs:36:SELECT *
Services\DatabaseService.TrainingRecords.Extensions.cs:37:FROM user_training
Services\DatabaseService.TrainingRecords.Extensions.cs:69:INSERT INTO user_training
Services\DatabaseService.TrainingRecords.Extensions.cs:108:UPDATE user_training
Services\DatabaseService.TrainingRecords.Extensions.cs:136:UPDATE user_training
Services\DatabaseService.TrainingRecords.Extensions.cs:160:UPDATE user_training
Services\DatabaseService.TrainingRecords.Extensions.cs:184:UPDATE user_training
Services\DatabaseService.TrainingRecords.Extensions.cs:217:INSERT INTO export_print_log (user_id, format, table_name, filter_used, file_path, source_ip, note)
Services\DatabaseService.TrainingRecords.Extensions.cs:308:INSERT INTO export_print_log (user_id, format, table_name, filter_used, file_path, source_ip, note)
Services\DatabaseService.TrainingRecords.Extensions.cs:352:INSERT INTO training_record_audit /* ANALYZER_IGNORE: audit table */
Services\DatabaseService.TrainingRecords.Extensions.cs:359:                    new MySqlParameter("@act",  action ?? "UPDATE"),
Services\DeviationService.cs:75:            await LogAudit(dev.Id, userId, DeviationActionType.UPDATE, $"Updated deviation #{dev.Id}").ConfigureAwait(false);
Services\DeviationService.cs:84:            await LogAudit(deviationId, userId, DeviationActionType.DELETE, $"Deleted deviation #{deviationId}").ConfigureAwait(false);
Services\DeviationService.cs:172:            await LogAudit(dev.Id, actorUserId, DeviationActionType.UPDATE,
Services\DeviationService.cs:185:            await LogAudit(dev.Id, actorUserId, DeviationActionType.UPDATE,
Services\Interfaces\ICapaAuditService.cs:11:    /// <para>Ôťö Defines contract for full traceability of CAPA actions (CREATE, UPDATE, CLOSE, DELETE, etc.).</para>
Services\Interfaces\ICapaAuditService.cs:61:        /// Retrieves CAPA audit records filtered by a specific action type (CREATE, UPDATE, CLOSE, etc.).
ViewModels\SettingsViewModel.cs:203:                    SelectedSetting, "DELETE",
Services\IncidentService.cs:57:            await LogAudit(incident.Id, userId, IncidentActionType.UPDATE, $"A┼żuriran incident ID={incident.Id}");
Services\IncidentService.cs:63:            await LogAudit(incidentId, userId, IncidentActionType.DELETE, $"Obrisan incident ID={incidentId}");
ViewModels\SchedulerViewModel.cs:220:                await _dbService.LogScheduledJobAuditAsync(SelectedJob, "UPDATE", _currentIpAddress, _currentDeviceInfo, _currentSessionId, null).ConfigureAwait(false);
ViewModels\SchedulerViewModel.cs:240:                await _dbService.LogScheduledJobAuditAsync(SelectedJob, "DELETE", _currentIpAddress, _currentDeviceInfo, _currentSessionId, null).ConfigureAwait(false);
Models\UserActivityLog.cs:30:        /// Main action name, type or category (LOGIN, LOGOUT, UPDATE, EXPORT, SIGN, etc.).
Services\RBACService.cs:302:                INSERT INTO role_permissions (role_id, permission_id, allowed, assigned_by, assigned_at)
Services\RBACService.cs:304:                ON DUPLICATE KEY UPDATE
Services\RBACService.cs:335:            const string sql = "DELETE FROM role_permissions WHERE role_id=@r AND permission_id=@p";
Services\RBACService.cs:366:              INSERT INTO roles(name, description, org_unit, compliance_tags, is_deleted, notes, created_at, updated_at, created_by_id, last_modified_by_id, version)
Services\RBACService.cs:368:              SELECT LAST_INSERT_ID();";
Services\RBACService.cs:391:              UPDATE roles
Services\RBACService.cs:416:                "UPDATE roles SET is_deleted=1, updated_at=UTC_TIMESTAMP(), last_modified_by_id=@by, version=version+1 WHERE id=@id",
Services\RBACService.cs:421:                "DELETE FROM role_permissions WHERE role_id=@id",
Services\RBACService.cs:426:                "DELETE FROM user_roles WHERE role_id=@id",
Services\PreventiveMaintenancePlanService.cs:54:            await LogAudit(plan.Id, userId, PpmActionType.UPDATE, $"A┼żuriran PPM plan {plan.Code} ({plan.Name})");
Services\PreventiveMaintenancePlanService.cs:60:            await LogAudit(planId, userId, PpmActionType.DELETE, $"Obrisan PPM plan ID={planId}");
Services\PreventiveMaintenanceService.cs:60:            await LogAudit(plan.Id, userId, PpmActionType.UPDATE, $"PPM plan {plan.Code} a┼żuriran.");
Services\PreventiveMaintenanceService.cs:66:            await LogAudit(ppmId, userId, PpmActionType.DELETE, $"PPM plan ID={ppmId} obrisan.");
ViewModels\RiskAssessmentViewModel.cs:261:                    "UPDATE",
Models\Enums\DeviationActionType.cs:22:        UPDATE = 1,
Models\Enums\DeviationActionType.cs:27:        DELETE = 2,
Models\Enums\IncidentActionType.cs:7:        UPDATE = 1,
Models\Enums\IncidentActionType.cs:8:        DELETE = 2,
Models\Enums\CapaActionType.cs:25:        UPDATE = Update,
Models\Enums\CapaActionType.cs:81:        DELETE = Delete,
Models\WorkOrderAudit.cs:11:    /// Ôťů Tracks every CREATE, UPDATE, DELETE, CLOSE, SIGN, EXPORT, and ROLLBACK action.<br/>
Models\WorkOrderAudit.cs:45:        /// <summary>Type of action performed on the work order (CREATE, UPDATE, DELETE, SIGN, EXPORT, ROLLBACK, etc.).</summary>
Models\Enums\CalibrationActionType.cs:9:        UPDATE,
Models\Enums\CalibrationActionType.cs:10:        DELETE,
Services\Interfaces\IValidationAuditService.cs:25:        /// <param name="action">Action type (CREATE, UPDATE, EXECUTE, DELETE).</param>
Services\Interfaces\IWorkOrderAuditService.cs:57:        /// <param name="actionType">Action type (CREATE, UPDATE, DELETE, CLOSE, etc.).</param>
Models\Enums\PpmActionType.cs:21:        UPDATE = 1,
Models\Enums\PpmActionType.cs:29:        DELETE = 3,
Models\Enums\SupplierActionType.cs:9:        UPDATE = 1,
Models\Enums\SupplierActionType.cs:10:        DELETE = 2,
