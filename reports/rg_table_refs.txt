ViewModels\AdminViewModel.cs:21:    /// <b>AdminViewModel</b> ÔÇö ViewModel for the Admin console (Users, full RBAC editor,
ViewModels\AdminViewModel.cs:34:        public AdminViewModel(UserService users, AuditService audit, IRBACService rbac)
ViewModels\AdminViewModel.cs:36:            _users = users ?? throw new ArgumentNullException(nameof(users));
ViewModels\AdminViewModel.cs:127:        #region === Users ===
ViewModels\AdminViewModel.cs:129:        public ObservableCollection<User> Users { get; } = new();
ViewModels\AdminViewModel.cs:198:                    Users.Clear();
ViewModels\AdminViewModel.cs:199:                    foreach (var u in filtered) Users.Add(u);
ViewModels\AdminViewModel.cs:207:                await Services.SafeNavigator.ShowAlertAsync("Load users failed", ex.Message, "OK").ConfigureAwait(false);
ViewModels\AdminViewModel.cs:222:                var existing = Users.FirstOrDefault(u => u.Username?.Equals(EditUsername, StringComparison.OrdinalIgnoreCase) == true);
ViewModels\AdminViewModel.cs:237:                    await _audit.LogEntityAuditAsync("users", newUser.Id, "CREATE_UI", $"Kreiran kroz Admin UI: {newUser.Username}").ConfigureAwait(false);
ViewModels\AdminViewModel.cs:246:                    await _audit.LogEntityAuditAsync("users", existing.Id, "UPDATE_UI", $"A┼żuriran kroz Admin UI: {existing.Username}").ConfigureAwait(false);
ViewModels\AdminViewModel.cs:263:            await _audit.LogEntityAuditAsync("users", SelectedUser.Id, "LOCK_UI", "Zaklju─Źan kroz Admin UI").ConfigureAwait(false);
ViewModels\AdminViewModel.cs:273:            await _audit.LogEntityAuditAsync("users", SelectedUser.Id, "UNLOCK_UI", "Otklju─Źan kroz Admin UI").ConfigureAwait(false);
ViewModels\AdminViewModel.cs:298:            await _audit.LogEntityAuditAsync("users", SelectedUser.Id, "RESET_PASSWORD_UI", "Resetirana lozinka kroz Admin UI").ConfigureAwait(false);
ViewModels\AdminViewModel.cs:308:            await _audit.LogEntityAuditAsync("users", target.Id, "DEACTIVATE_UI", "Deaktiviran kroz Admin UI").ConfigureAwait(false);
ViewModels\AdminViewModel.cs:324:            await _audit.LogEntityAuditAsync("users", target.Id, "DELETE_UI", "Obrisan kroz Admin UI").ConfigureAwait(false);
ViewModels\AdminViewModel.cs:333:            await _audit.LogEntityAuditAsync("users", SelectedUser.Id, "ENABLE_2FA_UI", "Omogu─çen 2FA kroz Admin UI").ConfigureAwait(false);
ViewModels\AdminViewModel.cs:341:            await _audit.LogEntityAuditAsync("users", SelectedUser.Id, "DISABLE_2FA_UI", "Onemogu─çen 2FA kroz Admin UI").ConfigureAwait(false);
ViewModels\AdminViewModel.cs:367:        #region === RBAC ┬Ě Roles / Permissions / Assignments ===
ViewModels\AdminViewModel.cs:369:        public ObservableCollection<Role> Roles { get; } = new();
ViewModels\AdminViewModel.cs:480:                var roles = await _rbac.GetAllRolesAsync().ConfigureAwait(false);
ViewModels\AdminViewModel.cs:484:                    ? roles.Where(r => !r.IsDeleted).ToList()
ViewModels\AdminViewModel.cs:485:                    : roles.Where(r => !r.IsDeleted &&
ViewModels\AdminViewModel.cs:492:                    Roles.Clear();
ViewModels\AdminViewModel.cs:493:                    foreach (var r in filtered) Roles.Add(r);
ViewModels\AdminViewModel.cs:501:                await Services.SafeNavigator.ShowAlertAsync("RBAC", "Load roles failed: " + ex.Message, "OK").ConfigureAwait(false);
ViewModels\AdminViewModel.cs:678:                await Services.SafeNavigator.ShowAlertAsync("RBAC", "Failed to load permissions: " + ex.Message, "OK").ConfigureAwait(false);
ViewModels\AdminViewModel.cs:699:                DbTestResult = "DB OK (users query succeeded)";
Services\AuthService.cs:13:    /// <b>AuthService</b> ÔÇô GMP compliant central authentication/orchestration for YasGMP users.
Models\ApiUsageLog.cs:13:    [Table("api_usage_log")]
Models\ApiKey.cs:26:        /// Owner user id (FK to users.id).
Services\CalibrationService.cs:15:    /// <b>CalibrationService</b> ├óÔéČÔÇť Ultra robust, GMP &amp; ISO 17025 compliant service for managing calibrations.
Services\CalibrationService.cs:243:            if (cal.SupplierId <= 0) throw new InvalidOperationException("Supplier is required.");
Models\AuditLogEntry.cs:19:        /// <summary>Normalized table/entity name (e.g., "users", "roles", "calibrations").</summary>
Models\AuditLogEntry.cs:60:        /// Legacy alias that maps to <see cref="TableName"/> (e.g., "scheduled_jobs", "work_orders").
Models\AdminActivityLog.cs:51:        /// Target table/entity name (e.g., "users", "work_orders", "settings", ...).
Models\CalibrationAuditLog.cs:8:    /// <b>CalibrationAuditLog</b> ÔÇô Tracks all audit trail events for calibrations (create, update, delete, export).
Models\CalibrationAuditLog.cs:14:    [Table("calibration_audit_log")]
Models\Calibration.cs:13:    [Table("calibrations")]
Models\Calibration.cs:31:        /// <summary>FK ÔÇô ID of the external service/lab (supplier).</summary>
Models\Calibration.cs:36:        /// <summary>Navigation to the supplier/laboratory (optional).</summary>
Models\Calibration.cs:38:        public virtual Supplier? Supplier { get; set; }
Models\CalibrationExportLog.cs:14:    [Table("calibration_export_log")]
Models\ContractorIntervention.cs:14:    [Table("contractor_interventions")]
Models\ContractorIntervention.cs:117:        /// <summary>Comments or notes (bonus: for inspection, CAPA, incident context).</summary>
Models\ContractorIntervention.cs:120:        [Column("comments")]
Models\ContractorIntervention.cs:121:        public string Comments { get; set; } = string.Empty;
Models\Component.cs:11:    /// ÔşÉ SUPER-MEGA-ULTRA ROBUST: Audit, traceability, forensics, digital signature, SOP/document linkage, lifecycle, status, warranty, supplier, all navigation and compliance fields for total regulatory defense and inspection readiness.
Models\Component.cs:73:        public virtual List<Calibration> Calibrations { get; set; } = new();
Models\Component.cs:123:        /// <summary>Supplier/manufacturer name (bonus).</summary>
Models\Component.cs:125:        [Column("supplier")]
Models\Component.cs:127:        public string Supplier { get; set; } = string.Empty;
Models\Component.cs:133:        /// <summary>Comments, notes, or last action (bonus: for audit, UI, workflow, inspection).</summary>
Models\Component.cs:135:        [Column("comments")]
Models\Component.cs:136:        public string Comments { get; set; } = string.Empty;
Models\CapaActionLog.cs:11:    [Table("capa_action_log")]
Models\Attachment.cs:16:    [Table("attachments")]
Models\Attachment.cs:196:        /// Optional comments or notes about the attachment (legacy compatibility).
Models\Attachment.cs:204:        /// Optional rich notes/comments field for advanced audit modules (your code expects "Notes").
Models\Asset.cs:11:    [Table("machines")]
Models\Asset.cs:153:        /// Related validations/qualifications.
Models\Asset.cs:155:        public virtual ICollection<Validation> Validations { get; set; } = new List<Validation>();
Models\Asset.cs:158:        /// Related inspections.
Models\Asset.cs:160:        public virtual ICollection<Inspection> Inspections { get; set; } = new List<Inspection>();
Models\Asset.cs:168:        /// Related photos.
Models\Asset.cs:170:        public virtual ICollection<Photo> Photos { get; set; } = new List<Photo>();
Models\Asset.cs:173:        /// Related attachments/documents.
Models\Asset.cs:175:        public virtual ICollection<Attachment> Attachments { get; set; } = new List<Attachment>();
Models\CapaCase.cs:11:    /// Ôťů Full traceability: audit, workflow, signatures, timeline, comments, forensics, attachments, workflow history, and advanced risk features.<br/>
Models\CapaCase.cs:15:    [Table("capa_cases")]
Models\CapaCase.cs:165:        /// Normalized status ID (FK to ref_value in SQL; nullable).
Models\CapaCase.cs:176:        /// <summary>Linked finding(s), e.g., deviations, audit findings, etc.</summary>
Models\CapaCase.cs:182:        /// All user/internal notes and comments (JSON or long text).
Models\CapaCase.cs:189:        /// List of review/approval comments or regulatory notes (future use).
Models\CapaCase.cs:192:        [Column("comments")]
Models\CapaCase.cs:193:        public string Comments { get; set; } = string.Empty;
Models\CapaCase.cs:206:        /// List of file attachments (JSON, serialized, or direct reference).
Models\CapaCase.cs:209:        public List<string> Attachments { get; set; } = new List<string>();
Models\CapaCase.cs:212:        /// Type of CAPA (e.g., Corrective, Preventive, Systemic, Process, Supplier, etc).
Models\ChangeControl.cs:11:    /// Ôťů Tracks entire change lifecycle, reason, impact, risk, linked equipment, SOPs, CAPA, digital signatures, attachments, workflow, audit, and more.<br/>
Models\ChangeControl.cs:184:        public List<Attachment> Attachments { get; set; } = new();
Models\CapaStatusHistory.cs:12:    [Table("capa_status_history")]
Services\AuditService.cs:131:        /// Logs an audit entry for any entity (table). Also mirrors to system log for dashboards.
Services\AuditService.cs:139:            // Write to entity_audit_log if present
Services\AuditService.cs:140:            if (await TableExistsAsync("entity_audit_log").ConfigureAwait(false))
Services\AuditService.cs:143:INSERT INTO entity_audit_log
Services\AuditService.cs:170:            => LogEntityAuditAsync("calibrations", calibrationId, action, details);
Services\AuditService.cs:177:            if (await TableExistsAsync("export_audit_log").ConfigureAwait(false))
Services\AuditService.cs:180:INSERT INTO export_audit_log
Services\AuditService.cs:209:            if (await TableExistsAsync("entity_audit_log").ConfigureAwait(false))
Services\AuditService.cs:229:            bool hasSession = await ColumnExistsAsync("entity_audit_log", "session_id").ConfigureAwait(false);
Services\AuditService.cs:230:            bool hasStatus  = await ColumnExistsAsync("entity_audit_log", "status").ConfigureAwait(false);
Services\AuditService.cs:231:            bool hasDigSig  = await ColumnExistsAsync("entity_audit_log", "digital_signature").ConfigureAwait(false);
Services\AuditService.cs:232:            bool hasSigHash = await ColumnExistsAsync("entity_audit_log", "signature_hash").ConfigureAwait(false);
Services\AuditService.cs:242:                FROM entity_audit_log a
Services\AuditService.cs:243:                LEFT JOIN users u ON u.id = a.user_id
Services\AuditService.cs:329:                FROM system_event_log s
Services\AuditService.cs:330:                LEFT JOIN users u ON u.id = s.user_id
Services\AuditService.cs:534:            var parts = new[]
Services\AuditService.cs:557:            var line = string.Join("; ", parts);
Models\DigitalSignature.cs:11:    [Table("digital_signatures")]
Models\DataMigrationLog.cs:64:        /// Additional comments or notes.
Models\Enums\AuditLogType.cs:8:    /// <para>Used in all log/audit tables (system_event_log, forensic_user_change_log, capa_audit, etc).</para>
Models\Enums\AttachmentType.cs:6:    /// <b>AttachmentType</b> ÔÇô Enumerates all allowed types of attachments/documents in YasGMP.
Models\DeviationAudit.cs:10:    /// Ultra-robust GMP audit entry for a single deviation, aligned to the <c>deviation_audit</c> SQL table.
Models\DeviationAudit.cs:14:    /// SQL origin: table <c>deviation_audit</c> in YASGMP.sql. Columns are mirrored 1:1 where possible.  
Models\DeviationAudit.cs:17:    [Table("deviation_audit")]
Models\DeviationAudit.cs:101:        /// <summary>FK to <c>system_event_log</c> (cross-link).</summary>
Models\DashboardEvent.cs:7:    /// <b>DashboardEvent</b> ÔÇô Represents a dashboard event, notification, or recent activity for GMP/CMMS dashboards.
Models\DashboardEvent.cs:10:    /// Ôťů Supports linking to users, modules, records, audit severity, status, timestamp, and deep linking.<br/>
Models\DelegatedPermission.cs:22:    [Table("delegated_permissions")]
Models\DocumentationVersion.cs:10:    /// ÔşÉ SUPER-MEGA-ULTRA ROBUST: Versioning, audit, digital signature, file hash, workflow/approval, user navigation, rollback, forensics, soft delete, and unlimited extensibility for inspections and legal defensibility.
Models\DTO\AuditEntryDto.cs:11:    /// Ôťů Used for rollback preview, forensic investigation, audit dashboards, and regulatory review.<br/>
Models\DTO\AuditEntryDto.cs:12:    /// Ôťů Captures full before/after values, user, action, entity, timestamp, device, IP, session, attachments.<br/>
Models\DTO\AuditEntryDto.cs:13:    /// Ôťů Extensible for digital signature, change group, approval, comments, escalation, ML/AI, fraud, and regulatory fields.
Models\DTO\AuditEntryDto.cs:108:        public List<Attachment> Attachments { get; set; } = new List<Attachment>();
Models\DTO\AuditEntryDto.cs:118:        /// <summary>Regulatory notes, escalation, comments.</summary>
Models\Deviation.cs:10:    /// <para>Supports complete GMP/Annex 11/21 CFR Part 11 requirements, forensics, workflow, advanced escalation, custom fields, attachments, and AI/ML hooks.</para>
Models\Deviation.cs:52:        /// User ID who reported (FK to Users).
Models\Deviation.cs:85:        /// User ID currently responsible/investigator (FK to Users).
Models\Deviation.cs:140:        /// Attachments (file IDs).
Models\Deviation.cs:147:        public List<Attachment> Attachments { get; set; } = new();
Models\Deviation.cs:184:        /// Inspector/audit note (free text, for QA comments).
Models\DocumentControl.cs:9:    /// <b>DocumentControl</b> ÔÇô Ultra-robust, audit-ready document/SOP master record for GMP/CMMS/QMS systems.
Models\DocumentControl.cs:11:    /// Ôťů Supports versioning, workflow, approvals, digital signatures, users/roles, and full traceability.<br/>
Models\DocumentControl.cs:17:    [Table("documentcontrol")]
Models\DocumentControl.cs:18:    public class DocumentControl
Models\DocumentControl.cs:88:        [Column("attachments")]
Models\DocumentControl.cs:90:        public string? Attachments { get; set; }
Models\DocumentControl.cs:145:        /// User ID of the creator (FK to users).
Models\DocumentControl.cs:165:        /// User ID of approver (FK to users).
Models\DocumentControl.cs:185:        /// User ID of the assignee/owner (FK to users).
Models\DocumentControl.cs:273:        /// List of users with read access (bonus: field-level/document-level security).
Models\DocumentControl.cs:290:    [Table("document_versions")]
Models\DocumentControl.cs:298:        /// <summary>FK to <see cref="DocumentControl"/>.</summary>
Models\DocumentControl.cs:305:        public DocumentControl? Document { get; set; }
Models\DocumentControl.cs:355:        /// <summary>FK to <see cref="DocumentControl"/>.</summary>
Models\DocumentControl.cs:362:        public DocumentControl? Document { get; set; }
Models\Enums\InspectionType.cs:4:    /// <b>InspectionType</b> ÔÇô Specifies types of inspections or audits performed in YasGMP.
Models\Enums\InspectionType.cs:8:    /// <b>Extensible for regulatory, internal, supplier, customer, or special inspections.</b>
Models\Enums\DocumentStatus.cs:32:        /// <summary>Pending approval/signature (waiting for authorized users).</summary>
Models\Enums\CapaStatus.cs:6:    /// Used in <see cref="YasGMP.Models.CapaCase"/>, <see cref="YasGMP.Models.CapaAudit"/>, dashboards, workflow automation, and compliance reports.
Models\Enums\IncidentSeverity.cs:4:    /// <b>IncidentSeverity</b> ÔÇô Enumerates all risk and impact levels for incidents, deviations, or CAPA events.
Models\Enums\MachineStatus.cs:4:    /// <b>MachineStatus</b> ÔÇô Comprehensive status for machines/equipment/assets in a GMP/CMMS environment.
Models\Enums\MachineStatus.cs:6:    /// Supports maintenance planning, OEE, lifecycle management, regulatory tracking, dashboards, and downtime analytics.
Models\Enums\IncidentType.cs:6:    /// Enables analytics, risk scoring, workflow automation, escalation, and compliance dashboards.
Models\Enums\IncidentType.cs:57:        /// <summary>Supplier or contractor issue (delay, non-conformance, documentation...)</summary>
Models\Enums\IncidentType.cs:58:        Supplier = 15,
Models\Enums\DeviationStatus.cs:6:    /// <b>DeviationStatus</b> ÔÇö All workflow states for deviations/non-conformances.
Models\Enums\PhotoType.cs:4:    /// <b>PhotoType</b> ÔÇô Enumerates all types of photos/images used in the GMP/CMMS system.
Models\Enums\PhotoType.cs:6:    /// Used for work orders, inspections, incidents, audits, documentation, before/after, and more.
Models\Enums\PhotoType.cs:39:        /// <summary>Supplier/contractor evidence (GMP audit).</summary>
Models\Enums\PhotoType.cs:40:        Supplier = 9,
Models\Enums\PermissionType.cs:33:        /// Can approve/validate records, actions, or workflows (for supervisor/QC roles).
Models\Enums\PermissionType.cs:38:        /// Can assign tasks, work orders, users, or roles.
Models\Enums\PermissionType.cs:98:        /// Can add comments, notes, or feedback to records.
Models\Enums\PermissionType.cs:128:        /// Reserved for custom/advanced permissions not covered above.
Models\Incident.cs:59:        public virtual ICollection<Attachment> Attachments { get; set; } = new List<Attachment>();
Models\Incident.cs:136:        [NotMapped] public bool HasEvidence => Attachments?.Count > 0;
Models\FieldPermissionChangeLog.cs:43:        /// <summary>Old permissions (e.g. "read=true; write=false; approve=false; export=false").</summary>
Models\FieldPermissionChangeLog.cs:47:        /// <summary>New permissions (e.g. "read=true; write=true; approve=false; export=false").</summary>
Models\IncidentLog.cs:69:        /// <summary>Attachments or evidence (JSON/CSV/Blob/IDs for photos, PDFs, reports).</summary>
Models\IncidentLog.cs:70:        public string? Attachments { get; set; }
Models\KpiWidget.cs:9:    /// Ôťů Used for dashboards, analytics panels, status overviews.<br/>
Models\IncidentAudit.cs:8:    [Table("incident_audit")]
Models\Inspection.cs:13:    /// extendable for attachments, workflow approvals, and AI-based analysis.
Models\Inspection.cs:142:        /// JSON payload storing file attachments (photos, certificates, evidence).
Models\ExternalServicer.cs:14:    /// - Workflow, status, dates, comments, soft delete, and extensibility  
Models\ExternalServicer.cs:153:        /// Bonus: Extra notes, inspection results, supervisor comments.
Models\IncidentReport.cs:10:    /// Fully instrumented for dashboards, workflows, and audit trails.
Models\IncidentReport.cs:81:        public List<Photo> Photos { get; set; } = new();
Models\IncidentReport.cs:82:        public List<Attachment> Attachments { get; set; } = new();
Models\MachineLifecycleEvent.cs:13:    /// Ôťů Extensible for attachments, IoT, evidence, and full change traceability.
Models\InventoryTransaction.cs:11:    /// Ôťů Supports GMP/CSV traceability, regulatory audit, attachments, and forensic analysis.
Models\InventoryTransaction.cs:91:        // === BONUS: Attachments, audit trail, advanced links can be added here
Models\IncidentAction.cs:13:    /// - Full navigation to users, attachments, digital signature, device/IP, modification chain<br/>
Models\IncidentAction.cs:63:        /// <summary>List of file attachments (photos, documents, reports) linked to this action.</summary>
Models\IncidentAction.cs:64:        public List<Attachment> Attachments { get; set; } = new();
Models\IncidentAction.cs:76:        /// <summary>Additional notes or comments about this action.</summary>
Models\IncidentAction.cs:96:        /// <summary>Creates a deep copy of the incident action for rollback or audit inspections.</summary>
Models\IncidentAction.cs:111:                Attachments = new List<Attachment>(this.Attachments.ConvertAll(a => a.DeepCopy())),
ViewModels\WorkOrderViewModel.cs:22:    /// Ôťů Attachments, comments, asset/part/supplier linkage, timeline, escalation, dashboard stats<br/>
ViewModels\WorkOrderViewModel.cs:442:            var raw = await _dbService.GetAuditLogForEntityAsync("work_orders", workOrderId).ConfigureAwait(false);
ViewModels\WorkOrderViewModel.cs:470:                TableName   = Cast<string>(Get("Table", "TableName", "EntityTable")) ?? "work_orders",
Models\Enums\WorkOrderType.cs:7:    /// <para>Supports all modern CMMS/asset management operations, inspections, audits, automation, and custom extensions.</para>
Models\Enums\UserRoleType.cs:6:    /// <b>UserRoleType</b> ÔÇô UI- and logic-facing user roles for workflow, permissions, audit, and analytics.
Models\Enums\UserRoleType.cs:9:    /// - Enables mapping to `UserRole` (technical), permissions, and auditing.<br/>
Models\Enums\UserRoleType.cs:11:    /// - Designed for extensibility (add, localize, or map custom roles).
Models\Enums\UserRoleType.cs:14:    /// <b>How to extend:</b> Add new roles with <see cref="DisplayAttribute"/> for UI localization.<br/>
Models\Enums\UserRoleType.cs:15:    /// Keep <c>Custom</c> and reserved ranges for future-proofing and client-specific roles.
Models\Enums\UserRoleType.cs:51:        /// Storekeeper/inventory manager (warehouse, logistics, parts).
Models\MachineComponent.cs:12:    /// ÔÇó Full lifecycle tracking (calibration, validation, CAPA, docs, photos, signatures, IoT)<br/>
Models\MachineComponent.cs:111:        /// Supplier or manufacturer.
Models\MachineComponent.cs:115:        public string? Supplier { get; set; }
Models\MachineComponent.cs:194:        /// <summary>All photos linked to this component.</summary>
Models\MachineComponent.cs:195:        public virtual ICollection<Photo> Photos { get; set; } = new List<Photo>();
Models\MachineComponent.cs:197:        /// <summary>All calibrations linked to this component.</summary>
Models\MachineComponent.cs:198:        public virtual ICollection<Calibration> Calibrations { get; set; } = new List<Calibration>();
Models\MachineComponent.cs:239:            Calibrations != null && Calibrations.Any(c => c.NextDue.Date < DateTime.UtcNow.Date);
Models\MachineComponent.cs:282:                Supplier = Supplier,
Models\MachineComponent.cs:296:                Photos = new List<Photo>(Photos.Select(p => p.DeepCopy())),
Models\MachineComponent.cs:297:                Calibrations = new List<Calibration>(Calibrations),
Models\LoginAttemptLog.cs:38:        /// Username attempted (snapshot, for non-existent or deactivated users).
Views\WorkOrderEditDialog.xaml:62:                    ItemsSource="{Binding Machines}"
Views\WorkOrderEditDialog.xaml:84:                    ItemsSource="{Binding Users}"
Models\ExternalContractor.cs:13:    /// Ôťů Extensible for attachments, contract docs, insurance, roles, risk audit, external/internal mapping, bonus options.
Models\ExternalContractor.cs:109:        /// Optional FK to a supplier record.
Models\ExternalContractor.cs:115:        /// Navigation to linked supplier (optional).
Models\ExternalContractor.cs:118:        public virtual Supplier? Supplier { get; set; }
Models\ExternalContractor.cs:130:        public List<Attachment> Attachments { get; set; } = new List<Attachment>();
Models\WorkOrderStatusLog.cs:11:    [Table("work_order_status_log")]
Models\WorkOrderStatusLog.cs:59:        /// <summary>Reason for the status change (CAPA, inspection, comments...).</summary>
Models\Machine.cs:12:    /// Ôťů Maps to <c>machines</c> SQL table with bonus fields for legacy/UI/compatibility.
Models\Machine.cs:15:    [Table("machines")]
Models\Machine.cs:156:        public virtual ICollection<Inspection> Inspections { get; set; } = new List<Inspection>();
Models\Machine.cs:157:        public virtual ICollection<Calibration> Calibrations { get; set; } = new List<Calibration>();
Models\Machine.cs:217:                Inspections        = new List<Inspection>(this.Inspections),
Models\Machine.cs:218:                Calibrations       = new List<Calibration>(this.Calibrations),
Models\Enums\SupplierActionType.cs:4:    /// SupplierActionType ÔÇô Defines all actions on a supplier that require audit and digital signature.
Models\Enums\UserRole.cs:6:    /// <b>UserRole</b> ÔÇô All possible system roles for the GMP/CMMS/YasGMP platform.
Models\Enums\UserRole.cs:30:        /// <summary>Storekeeper/Inventory (warehouse, spare parts, logistics).</summary>
Models\Enums\UserRole.cs:50:        // === Reserved for advanced/future roles ===
Models\Enums\TrainingType.cs:4:    /// <b>TrainingType</b> ÔÇô Enumerates all training, education, and competency types for GMP/CMMS users.
Models\Enums\TrainingType.cs:32:        /// <summary>Supplier/contractor qualification or onboarding.</summary>
Models\Enums\TrainingType.cs:33:        Supplier = 7,
Models\Enums\WarehouseEventType.cs:11:        /// <summary>Stock received into warehouse (purchase, return, supplier delivery).</summary>
Models\Enums\WarehouseEventType.cs:17:        /// <summary>Stock transfer between warehouses/locations.</summary>
Models\Enums\WarehouseEventType.cs:38:        /// <summary>Stock returned (customer, supplier, internal transfer back).</summary>
Models\Enums\SupplierStatus.cs:4:    /// <b>SupplierStatus</b> ÔÇô Statuses representing the full lifecycle and qualification state of a supplier/vendor.
Models\Enums\SupplierStatus.cs:17:        /// Supplier contract or qualification has expired.
Models\Enums\SupplierStatus.cs:22:        /// Supplier is temporarily suspended (pending investigation or review).
Models\Enums\SupplierStatus.cs:57:        /// BlacklistedÔÇösupplier is prohibited due to major compliance or performance failure.
Services\WindowManagerService.cs:118:            var parts = key.Split('|');
Services\WindowManagerService.cs:119:            _ = int.TryParse(parts[0], out var userId);
Services\WindowManagerService.cs:120:            var pageType = parts.Length > 1 ? parts[1] : "Unknown";
Services\WindowManagerService.cs:163:FROM user_window_layouts
Services\WindowManagerService.cs:204:INSERT INTO user_window_layouts (user_id, page_type, pos_x, pos_y, width, height, saved_at)
Services\ValidationService.cs:36:        /// <summary>Retrieves all validations.</summary>
Services\ValidationService.cs:121:        /// <summary>Returns validations with NextDue in the past.</summary>
Services\ValidationService.cs:128:        /// <summary>Returns validations due within <paramref name="days"/> days.</summary>
Models\Enums\WorkOrderPriority.cs:6:    /// Supports dashboards, auto-escalation, notification, and SLA response metrics.
Models\Enums\WorkOrderExportFormat.cs:54:        /// PNG image file ÔÇö for visual snapshots, dashboards, or diagrams.
Models\Enums\WorkOrderStatus.cs:42:        /// On hold (waiting on parts, contractor, decision, info, etc.).
Models\UserLoginLog.cs:11:    [Table("user_login_audit")]
Services\ValidationAuditService.cs:38:                tableName: "validation_audit",
Services\ValidationAuditService.cs:51:                const string sql = @"INSERT INTO validation_audit /* ANALYZER_IGNORE: audit table */ 
Services\ValidationAuditService.cs:103:                    "SELECT * FROM validation_audit WHERE validation_id=@vid ORDER BY changed_at DESC",
Services\ValidationAuditService.cs:122:                    "SELECT * FROM validation_audit WHERE id=@id",
Services\ValidationAuditService.cs:139:                    "DELETE FROM validation_audit /* ANALYZER_IGNORE: audit table */ WHERE id=@id",
ViewModels\WorkOrderEditDialogViewModel.cs:15:    /// Handles validation, rollback, digital signature, audit, forensics, attachments, escalation, and extensibility.
ViewModels\WorkOrderEditDialogViewModel.cs:42:        /// <summary>All machines/assets (for selection).</summary>
ViewModels\WorkOrderEditDialogViewModel.cs:43:        public ObservableCollection<Machine> Machines { get; set; } = new();
ViewModels\WorkOrderEditDialogViewModel.cs:45:        /// <summary>All users (for assignment).</summary>
ViewModels\WorkOrderEditDialogViewModel.cs:46:        public ObservableCollection<User> Users { get; set; } = new();
ViewModels\WorkOrderEditDialogViewModel.cs:75:            get => Machines?.FirstOrDefault(m => m.Id == WorkOrder.MachineId);
ViewModels\WorkOrderEditDialogViewModel.cs:81:            get => Users?.FirstOrDefault(u => u.Id == WorkOrder.AssignedToId);
ViewModels\WorkOrderEditDialogViewModel.cs:135:        public ObservableCollection<Photo> Photos { get; set; } = new();
ViewModels\WorkOrderEditDialogViewModel.cs:137:        public ObservableCollection<WorkOrderComment> Comments { get; set; } = new();
ViewModels\WorkOrderEditDialogViewModel.cs:190:            Photos         = new ObservableCollection<Photo>(WorkOrder.Photos?.ToList() ?? new System.Collections.Generic.List<Photo>());
ViewModels\WorkOrderEditDialogViewModel.cs:192:            Comments       = new ObservableCollection<WorkOrderComment>(WorkOrder.Comments?.ToList() ?? new System.Collections.Generic.List<WorkOrderComment>());
Services\ValidationAudit.cs:37:        /// <summary>Additional details describing the action (reason, comments, context).</summary>
Models\Warehouse.cs:8:    /// <b>Warehouse</b> ÔÇö Ultra-robust model for all warehouse/storage locations, with full GMP/CSV/audit traceability.
Models\Warehouse.cs:17:        /// <summary>Warehouse name (e.g., "Main Warehouse", "Spare Parts").</summary>
Models\Warehouse.cs:67:        /// <summary>(Bonus) Linked compliance certificates or documents (GMP cert, photos, docs).</summary>
Models\SupplierAudit.cs:8:    /// Immutable audit trail entry for Supplier changes (21 CFR Part 11 / Annex 11).
Models\SupplierAudit.cs:16:        /// <summary>FK to the audited supplier.</summary>
Models\Supplier.cs:9:    /// <b>Supplier</b> ÔÇö GMP/CSV/21 CFR Part 11 compliant vendor/partner model with compatibility aliases.
Models\Supplier.cs:12:    [Table("supplier")]
Models\Supplier.cs:13:    public class Supplier
Models\Supplier.cs:19:        /// <summary>Full supplier or external service name.</summary>
Models\Supplier.cs:53:        /// <summary>Vendor category: parts, equipment, service, lab, validationÔÇŽ</summary>
Models\Supplier.cs:58:        /// <summary>General notes/comments (legacy alias provided below).</summary>
Models\Supplier.cs:166:        /// Alias for supplier code used by legacy UIs. Not persisted; defaults to <see cref="Name"/>.
Models\Supplier.cs:208:        /// <summary>Alias so generic list templates compile (supplier isn't an asset/part).</summary>
ViewModels\WarehouseViewModel.cs:12:        public ObservableCollection<Warehouse> Warehouses { get; set; } = new ObservableCollection<Warehouse>();
ViewModels\ValidationViewModel.cs:19:    /// Ultra-robust ViewModel for managing equipment/system validations.
ViewModels\ValidationViewModel.cs:76:        /// <summary>All validations (process, CSV, software, etc.).</summary>
ViewModels\ValidationViewModel.cs:77:        public ObservableCollection<Validation> Validations
ViewModels\ValidationViewModel.cs:83:        /// <summary>Filtered validations for UI.</summary>
ViewModels\ValidationViewModel.cs:154:        /// <summary>Loads all validations, including protocol docs and audit trail.</summary>
ViewModels\ValidationViewModel.cs:160:                var validations = await _dbService.GetAllValidationsAsync(includeAudit: true, includeProtocols: true, includeAttachments: true).ConfigureAwait(false);
ViewModels\ValidationViewModel.cs:161:                Validations = new ObservableCollection<Validation>(validations ?? new List<Validation>());
ViewModels\ValidationViewModel.cs:163:                StatusMessage = $"Loaded {Validations.Count} validations.";
ViewModels\ValidationViewModel.cs:167:                StatusMessage = $"Error loading validations: {ex.Message}";
ViewModels\ValidationViewModel.cs:254:        /// <summary>Exports filtered validations to file, with audit.</summary>
ViewModels\ValidationViewModel.cs:262:                StatusMessage = "Validations exported successfully.";
ViewModels\ValidationViewModel.cs:271:        /// <summary>Real-time filter for validations (by type, status, search).</summary>
ViewModels\ValidationViewModel.cs:274:            var filtered = Validations.Where(v =>
ViewModels\ValidationViewModel.cs:285:        /// <summary>Can the current user edit validations? (admin/superadmin)</summary>
ViewModels\ValidationViewModel.cs:296:            var raw = await _dbService.GetAuditLogForEntityAsync("validations", validationId).ConfigureAwait(false);
ViewModels\ValidationViewModel.cs:324:                TableName   = Cast<string>(Get("Table", "TableName", "EntityTable")) ?? "validations",
Models\SystemEventLog.cs:12:    [Table("system_event_log")]
Models\SystemEventLog.cs:197:        /// Returns a human-readable summary of the event for dashboards and logs.
Models\User.cs:23:    [Table("users")]
Models\User.cs:50:        /// <para>Legacy convenience; full RBAC is via <see cref="Roles"/>.</para>
Models\User.cs:188:        public virtual ICollection<Role> Roles { get; set; } = new List<Role>();
Models\User.cs:189:        public virtual ICollection<Permission> Permissions { get; set; } = new List<Permission>();
ViewModels\UserViewModel.cs:73:        /// <summary>All users.</summary>
ViewModels\UserViewModel.cs:74:        public ObservableCollection<User> Users
ViewModels\UserViewModel.cs:80:        /// <summary>Filtered users for UI.</summary>
ViewModels\UserViewModel.cs:108:        /// <summary>Include inactive users?</summary>
ViewModels\UserViewModel.cs:129:        /// <summary>Available roles for filtering.</summary>
ViewModels\UserViewModel.cs:148:        /// <summary>Loads all users using DatabaseService user operations.</summary>
ViewModels\UserViewModel.cs:154:                var users = await _dbService.GetAllUsersAsync(includeAudit: true).ConfigureAwait(false);
ViewModels\UserViewModel.cs:155:                Users = new ObservableCollection<User>(users ?? new());
ViewModels\UserViewModel.cs:157:                StatusMessage = $"Loaded {Users.Count} users.";
ViewModels\UserViewModel.cs:161:                StatusMessage = $"Error loading users: {ex.Message}";
ViewModels\UserViewModel.cs:263:        /// <summary>Exports current filtered users and writes export audit.</summary>
ViewModels\UserViewModel.cs:272:                StatusMessage = "Users exported successfully.";
ViewModels\UserViewModel.cs:284:        /// <summary>Applies in-memory filtering on <see cref="Users"/>.</summary>
ViewModels\UserViewModel.cs:287:            var filtered = Users.Where(u =>
ViewModels\UserViewModel.cs:305:            var raw = await _dbService.GetAuditLogForEntityAsync("users", userId).ConfigureAwait(false);
ViewModels\UserViewModel.cs:333:                TableName   = Cast<string>(Get("Table", "TableName", "EntityTable")) ?? "users",
Services\UserService.cs:34:                    $"username={username}; reason=empty_credentials", "users", null);
Services\UserService.cs:41:                $"username={username}; note=attempt", "users", user?.Id);
Services\UserService.cs:46:                    $"username={username}; reason=unknown_user", "users", null);
Services\UserService.cs:53:                    $"username={username}; reason=lockout", "users", user.Id);
Services\UserService.cs:69:                    $"username={username}; auth=local; shape={vf.StoredShape}", "users", user.Id);
Services\UserService.cs:80:                "users", user.Id);
Services\UserService.cs:105:            await _audit.LogEntityAuditAsync("users", userId, "LOCK",
Services\UserService.cs:125:            await _audit.LogEntityAuditAsync("users", user.Id, "CREATE",
Services\UserService.cs:134:            await _audit.LogEntityAuditAsync("users", user.Id, "UPDATE",
Services\UserService.cs:143:            await _audit.LogEntityAuditAsync("users", userId, "DELETE",
Services\UserService.cs:155:            await _audit.LogEntityAuditAsync("users", userId, "DEACTIVATE",
Services\UserService.cs:161:        #region === ROLE, PERMISSIONS, PROFILE ===
Services\UserService.cs:177:                    userId: adminId, eventType: "RBAC_DENY", tableName: "users", module: "RBAC",
Services\UserService.cs:181:                await _db.LogExceptionAsync(ex, module: "UserService.ChangePassword", table: "users", recordId: userId);
Services\UserService.cs:191:            await _audit.LogEntityAuditAsync("users", userId, "CHANGE_PASSWORD",
Services\UserService.cs:210:            => _audit.LogEntityAuditAsync("users", userId, eventType, details);
Services\UserService.cs:217:            await _audit.LogEntityAuditAsync("users", userId, "UNLOCK",
Services\UserService.cs:226:            await _audit.LogEntityAuditAsync("users", userId,
Services\UserService.cs:233:            await _audit.LogEntityAuditAsync("users", user.Id, "PROFILE_UPDATE",
Services\UserService.cs:245:                "UPDATE users SET password_hash=@ph WHERE id=@id",
Models\SqlQueryAuditLog.cs:122:        /// <summary>Human-readable summary for dashboards/logging.</summary>
Views\ValidationPage.xaml.cs:16:    /// This page loads validations, supports add/update/delete flows via <see cref="DatabaseService"/>,
Views\ValidationPage.xaml.cs:163:        /// Loads data (validations + lookup lists) and optionally attempts to reselect &amp; scroll to an item by Id.
Views\ValidationPage.xaml.cs:211:                // Populate pickers (Machines)
Views\ValidationPage.xaml.cs:212:                var machines = await _db.GetAllMachinesAsync().ConfigureAwait(false) ?? new();
Views\ValidationPage.xaml.cs:217:                        p.ItemsSource = machines;
ViewModels\UserRolePermissionViewModel.cs:16:    /// Super-ultra robust ViewModel for managing users, roles, and permissions.
ViewModels\UserRolePermissionViewModel.cs:19:    /// Ôťů Granular entity/action permissions, templates, permission history, batch assignment, security audit.
ViewModels\UserRolePermissionViewModel.cs:91:        public ObservableCollection<User> Users
ViewModels\UserRolePermissionViewModel.cs:97:        public ObservableCollection<Role> Roles
ViewModels\UserRolePermissionViewModel.cs:103:        public ObservableCollection<Permission> Permissions
ViewModels\UserRolePermissionViewModel.cs:205:                var users = await _dbService.GetAllUsersFullAsync().ConfigureAwait(false);
ViewModels\UserRolePermissionViewModel.cs:206:                Users = new ObservableCollection<User>(users ?? new());
ViewModels\UserRolePermissionViewModel.cs:208:                StatusMessage = $"Loaded {Users.Count} users.";
ViewModels\UserRolePermissionViewModel.cs:212:                StatusMessage = $"Error loading users: {ex.Message}";
ViewModels\UserRolePermissionViewModel.cs:222:                var roles = await _dbService.GetAllRolesFullAsync().ConfigureAwait(false);
ViewModels\UserRolePermissionViewModel.cs:223:                Roles = new ObservableCollection<Role>(roles ?? new());
ViewModels\UserRolePermissionViewModel.cs:225:                StatusMessage = $"Loaded {Roles.Count} roles.";
ViewModels\UserRolePermissionViewModel.cs:229:                StatusMessage = $"Error loading roles: {ex.Message}";
ViewModels\UserRolePermissionViewModel.cs:240:                Permissions = new ObservableCollection<Permission>(perms ?? new());
ViewModels\UserRolePermissionViewModel.cs:242:                StatusMessage = $"Loaded {Permissions.Count} permissions.";
ViewModels\UserRolePermissionViewModel.cs:246:                StatusMessage = $"Error loading permissions: {ex.Message}";
ViewModels\UserRolePermissionViewModel.cs:428:                StatusMessage = "Users exported successfully.";
ViewModels\UserRolePermissionViewModel.cs:443:                StatusMessage = "Roles exported successfully.";
ViewModels\UserRolePermissionViewModel.cs:458:                StatusMessage = "Permissions exported successfully.";
ViewModels\UserRolePermissionViewModel.cs:470:                Users.Where(u =>
ViewModels\UserRolePermissionViewModel.cs:476:                Roles.Where(r =>
ViewModels\UserRolePermissionViewModel.cs:482:                Permissions.Where(p =>
ViewModels\UserRolePermissionViewModel.cs:494:            var raw = await _dbService.GetAuditLogForEntityAsync("users", userId).ConfigureAwait(false);
ViewModels\UserRolePermissionViewModel.cs:501:            var raw = await _dbService.GetAuditLogForEntityAsync("roles", roleId).ConfigureAwait(false);
ViewModels\UserRolePermissionViewModel.cs:508:            var raw = await _dbService.GetAuditLogForEntityAsync("permissions", permissionId).ConfigureAwait(false);
Models\Setting.cs:99:        /// <summary>Digital signature for regulatory settings.</summary>
Models\StockLevel.cs:103:        /// <summary>Human-readable summary for dashboards/logging.</summary>
Services\SystemEvent.Poco.cs:6:    /// Lightweight POCO representing a row in system_event_log for view-layer consumption.
ViewModels\TrainingRecordViewModel.cs:18:    /// Ôťů Links to users, SOPs, roles, effectiveness, attachments, analytics, dashboard, integration, future-proofed.
ViewModels\TrainingRecordViewModel.cs:149:        /// <summary>Loads all training records, including effectiveness, expiry, attachments, audit.</summary>
ViewModels\TrainingRecordViewModel.cs:185:                    Attachments = new(),
Models\SopDocument.cs:9:    /// Covers every detail for GMP/CSV/21 CFR Part 11: PDF, metadata, versioning, lifecycle, signatures, blockchain, e-sign, workflow, attachments, and AI/ML readiness.
Models\SopDocument.cs:52:        public List<string> Attachments { get; set; } = new();
Models\SopDocument.cs:94:        /// <summary>Reviewer or auditor notes/comments (for review cycle/audit).</summary>
Models\SopDocument.cs:98:        /// <summary>PDF metadata (author, company, tags, extracted for AI/ML/search).</summary>
Models\SopDocument.cs:126:        /// <summary>AI/ML tags, topics, or keywords for future analytics/search.</summary>
Models\SopDocument.cs:145:                Attachments = new List<string>(this.Attachments),
Models\SopDocument.cs:171:        /// <summary>Human-readable ToString for dashboards/logging.</summary>
Models\UserRoleAssignment.cs:11:    /// ÔÇó Multi-role, escalation, incident or temporary roles (expiry), digital signature, advanced audit.
Services\SupplierService.cs:15:    /// Provides CRUD and contract-management operations for <see cref="Supplier"/> entities,
Services\SupplierService.cs:35:        public Task<List<Supplier>> GetAllAsync() => _db.GetAllSuppliersAsync();
Services\SupplierService.cs:37:        public Task<Supplier?> GetByIdAsync(int id) => _db.GetSupplierByIdAsync(id);
Services\SupplierService.cs:39:        public async Task CreateAsync(Supplier supplier, int userId)
Services\SupplierService.cs:41:            ValidateSupplier(supplier);
Services\SupplierService.cs:43:            supplier.DigitalSignature = GenerateDigitalSignature(supplier);
Services\SupplierService.cs:44:            await _db.InsertOrUpdateSupplierAsync(supplier, update: false);
Services\SupplierService.cs:47:                supplier.Id,
Services\SupplierService.cs:50:                $"Created new supplier: {supplier.Name}");
Services\SupplierService.cs:53:        public async Task UpdateAsync(Supplier supplier, int userId)
Services\SupplierService.cs:55:            ValidateSupplier(supplier);
Services\SupplierService.cs:57:            supplier.DigitalSignature = GenerateDigitalSignature(supplier);
Services\SupplierService.cs:58:            await _db.InsertOrUpdateSupplierAsync(supplier, update: true);
Services\SupplierService.cs:61:                supplier.Id,
Services\SupplierService.cs:64:                $"Updated supplier ID={supplier.Id}");
Services\SupplierService.cs:75:                $"Deleted supplier ID={supplierId}");
Services\SupplierService.cs:82:        /// <summary>Determines whether the specified supplier's cooperation/contract is currently active.</summary>
Services\SupplierService.cs:83:        public bool IsContractActive(Supplier supplier)
Services\SupplierService.cs:85:            if (supplier == null) return false;
Services\SupplierService.cs:87:            return supplier.CooperationStart <= now
Services\SupplierService.cs:88:                && (supplier.CooperationEnd == null || supplier.CooperationEnd >= now);
Services\SupplierService.cs:91:        /// <summary>Suspends a supplier and appends a reason to <see cref="Supplier.Notes"/>.</summary>
Services\SupplierService.cs:94:            var supplier = await _db.GetSupplierByIdAsync(supplierId)
Services\SupplierService.cs:95:                ?? throw new InvalidOperationException($"Supplier ID={supplierId} not found.");
Services\SupplierService.cs:97:            supplier.Status = "SUSPENDED";
Services\SupplierService.cs:98:            supplier.Notes  = string.Concat(
Services\SupplierService.cs:99:                supplier.Notes ?? string.Empty,
Services\SupplierService.cs:102:            supplier.DigitalSignature = GenerateDigitalSignature(supplier);
Services\SupplierService.cs:103:            await _db.InsertOrUpdateSupplierAsync(supplier, update: true);
Services\SupplierService.cs:109:                $"Suspended supplier ID={supplierId}, reason: {reason}");
Services\SupplierService.cs:112:        /// <summary>Determines whether the specified supplier's cooperation/contract has expired as of now.</summary>
Services\SupplierService.cs:113:        public bool IsContractExpired(Supplier supplier)
Services\SupplierService.cs:114:            => supplier != null && supplier.CooperationEnd != null && supplier.CooperationEnd < DateTime.UtcNow;
Services\SupplierService.cs:121:        /// Validates that required fields exist and dates are logical against your current <see cref="Supplier"/> model.
Services\SupplierService.cs:123:        private static void ValidateSupplier(Supplier s)
Services\SupplierService.cs:127:                throw new InvalidOperationException("Supplier name is required.");
Services\SupplierService.cs:129:                throw new InvalidOperationException("Supplier email address is required.");
Services\SupplierService.cs:145:        private static string GenerateDigitalSignature(Supplier s)
Services\SupplierService.cs:199:                $"Triggered re-qualification for supplier ID={supplierId}");
Services\SupplierService.cs:208:                $"Linked supplier ID={supplierId} to CAPA ID={capaId}");
Models\SparePart.cs:9:    /// <b>SparePart</b> ÔÇô Ultra robust master record for all parts in the GMP/CMMS inventory system.
Models\SparePart.cs:11:    /// Ôťů Supports full audit, digital signatures, multi-supplier, price history, attachments, regulatory traceability.<br/>
Models\SparePart.cs:31:        /// <summary>Default supplier for this part (foreign key).</summary>
Models\SparePart.cs:56:        /// <summary>Default supplier (navigation property).</summary>
Models\SparePart.cs:57:        public virtual Supplier DefaultSupplier { get; set; } = null!;
Models\SparePart.cs:59:        /// <summary>Price history for this part (all suppliers).</summary>
Models\SparePart.cs:62:        /// <summary>Current stock levels in all warehouses.</summary>
Models\SparePart.cs:71:        /// <summary>Attachments and documents for this part (certificates, manuals, photos).</summary>
Models\SparePart.cs:72:        public virtual ICollection<Attachment> Attachments { get; set; } = new List<Attachment>();
Services\SupplierAuditService.cs:11:    /// Ultra Mega Robust GMP-compliant audit service for Supplier actions.
Services\SupplierAuditService.cs:13:    /// Fully documented with XML comments for IntelliSense and maintainability.
Services\SupplierAuditService.cs:31:        /// Creates an audit log entry asynchronously for a Supplier action.
Services\SupplierAuditService.cs:54:                        INSERT INTO supplier_audit
Models\UserRoleMapping.cs:11:    [Table("user_roles")]
ViewModels\SupplierViewModel.cs:17:    /// Ultra-robust ViewModel for supplier/vendor management (GMP/Annex 11/21 CFR Part 11 ready).
ViewModels\SupplierViewModel.cs:27:        private ObservableCollection<Supplier> _suppliers = new();
ViewModels\SupplierViewModel.cs:28:        private ObservableCollection<Supplier> _filteredSuppliers = new();
ViewModels\SupplierViewModel.cs:31:        private Supplier? _selectedSupplier;
ViewModels\SupplierViewModel.cs:74:        /// <summary>All suppliers loaded from the database.</summary>
ViewModels\SupplierViewModel.cs:75:        public ObservableCollection<Supplier> Suppliers
ViewModels\SupplierViewModel.cs:82:        public ObservableCollection<Supplier> FilteredSuppliers
ViewModels\SupplierViewModel.cs:88:        /// <summary>Currently selected supplier or <c>null</c>.</summary>
ViewModels\SupplierViewModel.cs:89:        public Supplier? SelectedSupplier
ViewModels\SupplierViewModel.cs:95:        /// <summary>Search phrase for suppliers.</summary>
ViewModels\SupplierViewModel.cs:162:        /// <summary>Loads suppliers and applies active filters.</summary>
ViewModels\SupplierViewModel.cs:168:                var suppliers = await _dbService.GetAllSuppliersFullAsync().ConfigureAwait(false);
ViewModels\SupplierViewModel.cs:169:                Suppliers = new ObservableCollection<Supplier>(suppliers ?? new List<Supplier>());
ViewModels\SupplierViewModel.cs:171:                StatusMessage = $"Loaded {Suppliers.Count} suppliers.";
ViewModels\SupplierViewModel.cs:175:                StatusMessage = $"Error loading suppliers: {ex.Message}";
ViewModels\SupplierViewModel.cs:180:        /// <summary>Adds a supplier and records an audit entry.</summary>
ViewModels\SupplierViewModel.cs:183:            if (SelectedSupplier is null) { StatusMessage = "No supplier selected."; return; }
ViewModels\SupplierViewModel.cs:201:                StatusMessage = $"Supplier '{SelectedSupplier.Name}' added.";
ViewModels\SupplierViewModel.cs:211:        /// <summary>Updates the selected supplier and logs the change.</summary>
ViewModels\SupplierViewModel.cs:214:            if (SelectedSupplier is null) { StatusMessage = "No supplier selected."; return; }
ViewModels\SupplierViewModel.cs:229:                StatusMessage = $"Supplier '{SelectedSupplier.Name}' updated.";
ViewModels\SupplierViewModel.cs:239:        /// <summary>Deletes the selected supplier and writes an audit entry.</summary>
ViewModels\SupplierViewModel.cs:242:            if (SelectedSupplier is null) { StatusMessage = "No supplier selected."; return; }
ViewModels\SupplierViewModel.cs:255:                StatusMessage = $"Supplier '{SelectedSupplier.Name}' deleted.";
ViewModels\SupplierViewModel.cs:268:            if (SelectedSupplier is null) { StatusMessage = "No supplier selected."; return; }
ViewModels\SupplierViewModel.cs:277:                StatusMessage = $"Rollback completed for supplier '{SelectedSupplier.Name}'.";
ViewModels\SupplierViewModel.cs:287:        /// <summary>Exports the filtered suppliers and records an export audit line.</summary>
ViewModels\SupplierViewModel.cs:296:                    FilteredSuppliers?.ToList() ?? new List<Supplier>(),
ViewModels\SupplierViewModel.cs:308:                StatusMessage = "Suppliers exported successfully.";
ViewModels\SupplierViewModel.cs:320:            var filtered = Suppliers.Where(s =>
ViewModels\SupplierViewModel.cs:333:            FilteredSuppliers = new ObservableCollection<Supplier>(filtered);
ViewModels\SupplierViewModel.cs:336:        /// <summary>Gate to enable edit actions for privileged roles.</summary>
ViewModels\SupplierViewModel.cs:374:        /// <summary>Loads audit entries for a supplier and maps them to UI model.</summary>
ViewModels\SupplierViewModel.cs:377:            var dtos = await _dbService.GetAuditLogForEntityAsync("suppliers", supplierId).ConfigureAwait(false);
Models\UserPermissionOverride.cs:8:    /// Can override role-based permissions for escalation, emergencies, or fine-tuning.
Models\UserPermissionOverride.cs:48:        /// True = granted, False = denied (overrides role-based permissions).
Models\Validation.cs:10:    [Table("validations")]
Views\UsersPage.xaml.cs:3:// Purpose: Users admin page (users, roles, permissions) ÔÇö resolves VMs via DI
Views\UsersPage.xaml.cs:22:    /// Users admin page for managing users, roles, and permissions.
Services\DatabaseService.Ppm.Extensions.cs:23:                var dt = await db.ExecuteSelectAsync("SELECT * FROM preventive_maintenance_plans ORDER BY id DESC", null, token).ConfigureAwait(false);
Services\DatabaseService.Ppm.Extensions.cs:28:                var dt = await db.ExecuteSelectAsync("SELECT * FROM ppm_plans ORDER BY id DESC", null, token).ConfigureAwait(false);
Services\DatabaseService.Ppm.Extensions.cs:37:                var dt = await db.ExecuteSelectAsync("SELECT * FROM preventive_maintenance_plans WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Ppm.Extensions.cs:42:                var dt = await db.ExecuteSelectAsync("SELECT * FROM ppm_plans WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Ppm.Extensions.cs:51:            string insert = @"INSERT INTO preventive_maintenance_plans (code, name, description, machine_id, component_id, frequency, checklist_file, next_due, status)
Services\DatabaseService.Ppm.Extensions.cs:53:            string updateSql = @"UPDATE preventive_maintenance_plans SET code=@code, name=@name, description=@desc, machine_id=@mid, component_id=@cid, frequency=@freq, checklist_file=@file, next_due=@due, status=@status WHERE id=@id";
Services\DatabaseService.Ppm.Extensions.cs:84:                insert = insert.Replace("preventive_maintenance_plans", "ppm_plans");
Services\DatabaseService.Ppm.Extensions.cs:85:                updateSql = updateSql.Replace("preventive_maintenance_plans", "ppm_plans");
Services\DatabaseService.Ppm.Extensions.cs:105:                await db.ExecuteNonQueryAsync("DELETE FROM preventive_maintenance_plans WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Ppm.Extensions.cs:109:                await db.ExecuteNonQueryAsync("DELETE FROM ppm_plans WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Views\UsersPage.xaml:7:    Title="Users">
Views\UsersPage.xaml:34:            <Picker ItemsSource="{Binding RolePermVM.Roles}"
Views\UsersPage.xaml:43:            <Label Text="Permissions" FontAttributes="Bold" />
Views\UsersPage.xaml:44:            <CollectionView ItemsSource="{Binding RolePermVM.Permissions}"
Services\DatabaseService.Notifications.Extensions.cs:46:FROM notification_queue nq
Services\DatabaseService.Notifications.Extensions.cs:47:LEFT JOIN notification_templates nt ON nt.id = nq.template_id
Services\DatabaseService.Notifications.Extensions.cs:86:                const string q = @"INSERT INTO notification_queue (template_id, recipient_user_id, channel, payload, scheduled_at, status)
Models\TrainingRecord.cs:12:    /// Ôťů Supports full linkage to users, roles, departments, trainers, training modules, SOPs, certificates, audit, and digital signatures.<br/>
Models\TrainingRecord.cs:13:    /// Ôťů Forensic-ready: attendance, attachments, session history, skill matrix, expiry, re-training, escalation, and regulatory inspection.<br/>
Models\TrainingRecord.cs:100:        public DocumentControl Document { get; set; } = null!;
Models\TrainingRecord.cs:104:        public List<DocumentControl> Documents { get; set; } = new List<DocumentControl>();
Models\TrainingRecord.cs:129:        /// <summary>List of attached files (proof, photos, evidence).</summary>
Models\TrainingRecord.cs:131:        public List<Attachment> Attachments { get; set; } = new List<Attachment>();
Models\TrainingRecord.cs:137:        /// <summary>Notes, regulatory comments, inspection history.</summary>
Services\DatabaseService.Machines.CoreExtensions.cs:2:// File: Services/DatabaseService.Machines.CoreExtensions.cs
Services\DatabaseService.Machines.CoreExtensions.cs:21:            var dt = await db.ExecuteSelectAsync("SELECT * FROM machines ORDER BY name, id", null, token).ConfigureAwait(false);
Services\DatabaseService.Machines.CoreExtensions.cs:50:            var dt = await db.ExecuteSelectAsync("SELECT * FROM machines WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Machines.CoreExtensions.cs:74:            string insert = @"INSERT INTO machines (code, name, description, model, manufacturer, location, install_date, procurement_date, status, urs_doc, serial_number, acquisition_cost, rfid_tag, qr_code, iot_device_id, cloud_device_guid)
Services\DatabaseService.Machines.CoreExtensions.cs:76:            string updateSql = @"UPDATE machines SET code=@code, name=@name, description=@desc, model=@model, manufacturer=@mf, location=@loc, install_date=@inst, procurement_date=@proc, status=@status, urs_doc=@urs, serial_number=@sn, acquisition_cost=@cost, rfid_tag=@rfid, qr_code=@qr, iot_device_id=@iot, cloud_device_guid=@cloud WHERE id=@id";
Services\DatabaseService.Machines.CoreExtensions.cs:110:            await db.LogSystemEventAsync(actorUserId, update ? "MACHINE_UPDATE" : "MACHINE_CREATE", "machines", "MachineModule", m.Id, m.Name, ip, "audit", deviceInfo, sessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.Machines.CoreExtensions.cs:136:            await db.LogSystemEventAsync(actorUserId, "MACHINE_EXPORT", "machines", "MachineModule", null, $"fmt={format}; file={path}; count={count}", ip, "info", deviceInfo, sessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.Machines.CoreExtensions.cs:151:                await db.ExecuteNonQueryAsync("DELETE FROM machines WHERE id=@id", new[] { new MySqlConnector.MySqlParameter("@id", machineId) }, token).ConfigureAwait(false);
Services\DatabaseService.Machines.CoreExtensions.cs:154:            await db.LogSystemEventAsync(actorUserId, "MACHINE_DELETE", "machines", "MachineModule", machineId, null, ip, "audit", deviceInfo, sessionId, token: token).ConfigureAwait(false);
Models\StockChangeLog.cs:11:    /// Ôťů Forensic: user, time, device/IP, signature, incident/ref, attachments
Services\DatabaseService.Components.QueryExtensions.cs:23:            const string sql = @"SELECT * FROM machine_components ORDER BY id DESC";
Services\DatabaseService.Components.QueryExtensions.cs:36:            const string sql = @"SELECT * FROM machine_components WHERE id=@id LIMIT 1";
Services\DatabaseService.Components.QueryExtensions.cs:65:                Supplier = GetString("supplier"),
ViewModels\SupplierContractorViewModel.cs:16:        public ObservableCollection<Supplier> Suppliers { get; set; } = new ObservableCollection<Supplier>();
ViewModels\SupplierContractorViewModel.cs:22:        public Supplier? SelectedSupplier { get; set; }
ViewModels\SupplierContractorViewModel.cs:41:            Suppliers.Clear();
ViewModels\SupplierContractorViewModel.cs:43:                Suppliers.Add(sup);
ViewModels\SupplierContractorViewModel.cs:50:        /// <summary>Dodaje ili a┼żurira dobavlja─Źa (Supplier).</summary>
ViewModels\SupplierContractorViewModel.cs:51:        public async Task SaveSupplierAsync(Supplier supplier, bool update)
ViewModels\SupplierContractorViewModel.cs:53:            await _db.InsertOrUpdateSupplierAsync(supplier, update).ConfigureAwait(false);
Views\UserRolePermissionPage.xaml:17:      <!-- ================= USERS ================= -->
Views\UserRolePermissionPage.xaml:18:      <Label Text="Users" FontAttributes="Bold" FontSize="18" />
Views\UserRolePermissionPage.xaml:19:      <CollectionView ItemsSource="{Binding Users}"
Views\UserRolePermissionPage.xaml:42:      <!-- ================= ROLES ================= -->
Views\UserRolePermissionPage.xaml:43:      <Label Text="Roles" FontAttributes="Bold" FontSize="18" Margin="0,20,0,0" />
Views\UserRolePermissionPage.xaml:44:      <CollectionView ItemsSource="{Binding Roles}"
Views\UserRolePermissionPage.xaml:67:      <!-- ============== PERMISSIONS ============== -->
Views\UserRolePermissionPage.xaml:68:      <Label Text="Permissions" FontAttributes="Bold" FontSize="18" Margin="0,20,0,0" />
Views\UserRolePermissionPage.xaml:69:      <CollectionView ItemsSource="{Binding Permissions}"
Models\UserPermission.cs:20:    [Table("user_permissions")]
Services\DatabaseService.Audit.Helpers.cs:65:                tableName: "users",
Services\DatabaseService.Audit.Helpers.cs:108:                tableName: "validations",
Services\DatabaseService.MachineExtensions.cs:12:    /// (ÔÇťcannot convert from 'Machine' to 'Asset'ÔÇŁ) at call sites once and for all.
Services\DatabaseService.MachineExtensions.cs:150:            => db.LogSystemEventAsync(userId, $"MACHINE_{action}", "machines", "MachineModule", machineId == 0 ? null : machineId, note, ip, "audit", deviceInfo, sessionId, token: token);
Services\DatabaseService.Attachments.Extensions.cs:2:// File: Services/DatabaseService.Attachments.Extensions.cs
Services\DatabaseService.Attachments.Extensions.cs:3:// Purpose: Attachments minimal APIs: filter, add, approve, delete, export log
Services\DatabaseService.Attachments.Extensions.cs:20:            string sql = "SELECT * FROM attachments WHERE 1=1";
Services\DatabaseService.Attachments.Extensions.cs:35:            const string sql = @"INSERT INTO attachments (file_name, file_path, entity_type, entity_id, uploaded_by, created_at)
Services\DatabaseService.Attachments.Extensions.cs:48:            await db.LogSystemEventAsync(actorUserId, "ATTACHMENT_CREATE", "attachments", entity, id, filePath, ip, "audit", device, sessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.Attachments.Extensions.cs:54:            await db.ExecuteNonQueryAsync("DELETE FROM attachments WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Attachments.Extensions.cs:55:            await db.LogSystemEventAsync(actorUserId, "ATTACHMENT_DELETE", "attachments", null, id, null, ip, "audit", device, sessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.Attachments.Extensions.cs:63:            => db.LogSystemEventAsync(actorUserId, "ATTACHMENT_APPROVE", "attachments", null, attachmentId, $"sig={signatureHash}", ip, "audit", deviceInfo, null, token: token);
Services\DatabaseService.Assets.Extensions.cs:3:// Purpose: Assets (machines) minimal APIs used by AssetViewModel
Services\DatabaseService.Assets.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM machines ORDER BY name, id", null, token).ConfigureAwait(false);
Services\DatabaseService.Assets.Extensions.cs:31:                const string sql = @"INSERT INTO machines (code, name, description, model, manufacturer, location, install_date, procurement_date, purchase_date, status, urs_doc, digital_signature)
Services\DatabaseService.Assets.Extensions.cs:51:            await db.LogSystemEventAsync(actorUserId, "ASSET_CREATE", "machines", "AssetModule", null, asset?.Name, ip, "audit", device, sessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.Assets.Extensions.cs:58:                const string sql = @"UPDATE machines SET code=@code, name=@name, description=@desc, model=@model, manufacturer=@mf, location=@loc, status=@status, urs_doc=@urs, digital_signature=@sig WHERE id=@id";
Services\DatabaseService.Assets.Extensions.cs:75:            await db.LogSystemEventAsync(actorUserId, "ASSET_UPDATE", "machines", "AssetModule", asset?.Id, asset?.Name, ip, "audit", device, sessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.Assets.Extensions.cs:80:            try { await db.ExecuteNonQueryAsync("DELETE FROM machines WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false); } catch { }
Services\DatabaseService.Assets.Extensions.cs:81:            await db.LogSystemEventAsync(actorUserId, "ASSET_DELETE", "machines", "AssetModule", id, null, ip, "audit", device, sessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.Assets.Extensions.cs:85:            => db.LogSystemEventAsync(actorUserId, "ASSET_ROLLBACK", "machines", "AssetModule", id, null, ip, "audit", device, sessionId, token: token);
Services\DatabaseService.Assets.Extensions.cs:88:            => db.LogSystemEventAsync(actorUserId, "ASSET_EXPORT", "machines", "AssetModule", null, $"count={items?.Count ?? 0}", ip, "info", device, sessionId, token: token);
Services\DatabaseService.Assets.Extensions.cs:133:            await db.LogSystemEventAsync(actorUserId, "ASSET_EXPORT", "machines", "AssetModule", null, $"fmt={fmt}; count={list.Count}; file={path}", ip, "info", device, sessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.Assets.Extensions.cs:147:            => db.LogSystemEventAsync(actorUserId, $"ASSET_{action}", "machines", "AssetModule", assetId == 0 ? null : assetId, details, ip, "audit", deviceInfo, sessionId, token: token);
Services\DatabaseService.IncidentAudits.Extensions.cs:23:                tableName: "incident_audit",
Services\DatabaseService.IncidentAudits.Extensions.cs:36:                const string sql = @"INSERT INTO incident_audit /* ANALYZER_IGNORE: audit table */ (incident_id, user_id, action, old_value, new_value, action_at, note, source_ip, digital_signature, capa_id, work_order_id, device_info, integrity_hash, inspector_note)
Services\DatabaseService.IncidentAudits.Extensions.cs:71:                var dt = await db.ExecuteSelectAsync("SELECT * FROM incident_audit WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.IncidentAudits.Extensions.cs:84:                var dt = await db.ExecuteSelectAsync("SELECT * FROM incident_audit WHERE incident_id=@id ORDER BY action_at DESC, id DESC", new[] { new MySqlParameter("@id", incidentId) }, token).ConfigureAwait(false);
Services\DatabaseService.IncidentAudits.Extensions.cs:97:                var dt = await db.ExecuteSelectAsync("SELECT * FROM incident_audit WHERE user_id=@id ORDER BY action_at DESC, id DESC", new[] { new MySqlParameter("@id", userId) }, token).ConfigureAwait(false);
Services\DatabaseService.ComponentOverloads.cs:28:        /// Schema-tolerant and aligned with table <c>machine_components</c>.
Services\DatabaseService.ComponentOverloads.cs:49:                ? @"INSERT INTO machine_components
Services\DatabaseService.ComponentOverloads.cs:53:                : @"UPDATE machine_components SET
Services\DatabaseService.ComponentOverloads.cs:80:                tableName: "machine_components",
Services\DatabaseService.ComponentOverloads.cs:109:                tableName: "machine_components",
Services\DatabaseService.ComponentOverloads.cs:139:                tableName: "machine_components",
Services\DatabaseService.ComponentOverloads.cs:199:                "DELETE FROM machine_components WHERE id=@id",
Services\DatabaseService.ComponentOverloads.cs:207:                tableName: "machine_components",
Services\DatabaseService.ComponentOverloads.cs:231:                "DELETE FROM machine_components WHERE id=@id",
Services\DatabaseService.ComponentOverloads.cs:239:                tableName: "machine_components",
Services\DatabaseService.ExternalServicers.Extensions.cs:3:// Purpose: External servicers (external_contractors) minimal CRUD for UI
Services\DatabaseService.ExternalServicers.Extensions.cs:21:            var dt = await db.ExecuteSelectAsync("SELECT * FROM external_contractors ORDER BY name, id", null, token).ConfigureAwait(false);
Services\DatabaseService.ExternalServicers.Extensions.cs:30:            string insert = @"INSERT INTO external_contractors (name, code, registration_number, contact_person, email, phone, address, type, status, cooperation_start, cooperation_end, comment, digital_signature)
Services\DatabaseService.ExternalServicers.Extensions.cs:32:            string updateSql = @"UPDATE external_contractors SET name=@name, code=@code, registration_number=@reg, contact_person=@contact, email=@em, phone=@ph, address=@addr, type=@type, status=@status, cooperation_start=@start, cooperation_end=@end, comment=@comm, digital_signature=@sig WHERE id=@id";
Services\DatabaseService.ExternalServicers.Extensions.cs:84:            => db.ExecuteNonQueryAsync("DELETE FROM external_contractors WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token);
Services\DatabaseService.Documents.Extensions.cs:3:// Purpose: Minimal Document Control shims mapped to `documentcontrol` table
Services\DatabaseService.Documents.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM documentcontrol ORDER BY id DESC", null, token).ConfigureAwait(false);
Services\DatabaseService.Documents.Extensions.cs:28:            const string sql = @"INSERT INTO documentcontrol (code, title, revision, status, file_path, description, device_info)
Services\DatabaseService.Documents.Extensions.cs:42:            await db.LogSystemEventAsync(actorUserId, "DOC_INITIATE", "documentcontrol", "DocControl", id, notes, null, "audit", null, null, token: token).ConfigureAwait(false);
Services\DatabaseService.Documents.Extensions.cs:50:                await db.ExecuteNonQueryAsync("UPDATE documentcontrol SET revision=@rev, file_path=@file WHERE id=@id", new[]
Services\DatabaseService.Documents.Extensions.cs:58:            await db.LogSystemEventAsync(actorUserId, "DOC_REVISE", "documentcontrol", "DocControl", documentId, $"rev={newVersion}", ip, "audit", deviceInfo, null, token: token).ConfigureAwait(false);
Services\DatabaseService.Documents.Extensions.cs:62:            => db.LogSystemEventAsync(actorUserId, "DOC_ASSIGN", "documentcontrol", "DocControl", documentId, $"user={userId}; note={note}", ip, "audit", device, null, token: token);
Services\DatabaseService.Documents.Extensions.cs:66:            try { await db.ExecuteNonQueryAsync("UPDATE documentcontrol SET status='approved' WHERE id=@id", new[] { new MySqlParameter("@id", documentId) }, token).ConfigureAwait(false); } catch { }
Services\DatabaseService.Documents.Extensions.cs:67:            await db.LogSystemEventAsync(approverUserId, "DOC_APPROVE", "documentcontrol", "DocControl", documentId, signatureHash, ip, "audit", deviceInfo, null, token: token).ConfigureAwait(false);
Services\DatabaseService.Documents.Extensions.cs:72:            try { await db.ExecuteNonQueryAsync("UPDATE documentcontrol SET status='published' WHERE id=@id", new[] { new MySqlParameter("@id", documentId) }, token).ConfigureAwait(false); } catch { }
Services\DatabaseService.Documents.Extensions.cs:73:            await db.LogSystemEventAsync(actorUserId, "DOC_PUBLISH", "documentcontrol", "DocControl", documentId, null, ip, "audit", deviceInfo, null, token: token).ConfigureAwait(false);
Services\DatabaseService.Documents.Extensions.cs:78:            try { await db.ExecuteNonQueryAsync("UPDATE documentcontrol SET status='expired' WHERE id=@id", new[] { new MySqlParameter("@id", documentId) }, token).ConfigureAwait(false); } catch { }
Services\DatabaseService.Documents.Extensions.cs:79:            await db.LogSystemEventAsync(actorUserId, "DOC_EXPIRE", "documentcontrol", "DocControl", documentId, null, ip, "audit", deviceInfo, null, token: token).ConfigureAwait(false);
Services\DatabaseService.Documents.Extensions.cs:87:                await db.ExecuteNonQueryAsync("UPDATE documentcontrol SET linked_change_controls = CONCAT(IFNULL(linked_change_controls,''), CASE WHEN linked_change_controls IS NULL OR linked_change_controls='' THEN '' ELSE ',' END, @cc) WHERE id=@id",
Services\DatabaseService.Documents.Extensions.cs:91:            await db.LogSystemEventAsync(actorUserId, "DOC_LINK_CHANGE", "documentcontrol", "DocControl", documentId, $"cc={changeControlId}", ip, "audit", device, null, token: token).ConfigureAwait(false);
Services\DatabaseService.Documents.Extensions.cs:141:            await db.LogSystemEventAsync(actorUserId, "DOC_EXPORT", "documentcontrol", "DocControl", null, $"count={rows?.Count ?? 0}; file={path}", ip, "info", deviceInfo, sessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.Documents.Extensions.cs:146:            => db.LogSystemEventAsync(actorUserId, $"DOC_{action}", "documentcontrol", "DocControl", documentId == 0 ? null : documentId, description, ip, "audit", deviceInfo, sessionId, token: token);
ViewModels\SparePartViewModel.cs:71:        /// <summary>All spare parts.</summary>
ViewModels\SparePartViewModel.cs:120:        /// <summary>Supplier filter.</summary>
ViewModels\SparePartViewModel.cs:147:        /// <summary>Whether current user can change spare parts.</summary>
ViewModels\SparePartViewModel.cs:166:        /// <summary>Loads all spare parts.</summary>
ViewModels\SparePartViewModel.cs:175:                StatusMessage = $"Loaded {SpareParts.Count} spare parts.";
ViewModels\SparePartViewModel.cs:179:                StatusMessage = $"Error loading spare parts: {ex.Message}";
ViewModels\SparePartViewModel.cs:275:        /// <summary>Exports the filtered spare parts and logs audit.</summary>
ViewModels\SparePartViewModel.cs:285:                StatusMessage = "Spare parts exported successfully.";
ViewModels\SparePartViewModel.cs:294:        /// <summary>Applies free-text filter to the spare parts list.</summary>
ViewModels\SparePartViewModel.cs:309:            var audits = await _dbService.GetAuditLogForEntityAsync("parts", sparePartId);
Models\WorkOrderAudit.cs:16:    [Table("work_order_audit")]
Services\RBACService.cs:13:    /// Manages users, roles, permissions, delegations, approval workflow and audit-grade security events.
Services\RBACService.cs:71:        /// Returns all effective permission codes for a user (direct + roles + delegations).
Services\RBACService.cs:93:        #region === User Ôćö Roles ===
Services\RBACService.cs:137:        /// <summary>Gets roles assigned to the user.</summary>
Services\RBACService.cs:141:            var roles = await _db.GetAllRolesAsync().ConfigureAwait(false);
Services\RBACService.cs:142:            return roles.Where(r => ids.Contains(r.Id)).ToList();
Services\RBACService.cs:145:        /// <summary>Gets roles not assigned to the user (available to add).</summary>
Services\RBACService.cs:149:            var roles = await _db.GetAllRolesAsync().ConfigureAwait(false);
Services\RBACService.cs:150:            return roles.Where(r => !assigned.Contains(r.Id)).ToList();
Services\RBACService.cs:155:        #region === User Ôćö Permissions (direct) ===
Services\RBACService.cs:269:        /// <summary>Returns all non-deleted roles.</summary>
Services\RBACService.cs:272:        /// <summary>Returns all permissions.</summary>
Services\RBACService.cs:275:        /// <summary>Returns permissions assigned to the role.</summary>
Services\RBACService.cs:283:        /// <summary>Returns permissions not assigned to the role (available to add).</summary>
Services\RBACService.cs:300:            // match schema exactly; there is no 'reason' column in role_permissions.
Services\RBACService.cs:302:                INSERT INTO role_permissions (role_id, permission_id, allowed, assigned_by, assigned_at)
Services\RBACService.cs:335:            const string sql = "DELETE FROM role_permissions WHERE role_id=@r AND permission_id=@p";
Services\RBACService.cs:358:        #region === Roles CRUD (soft delete) ===
Services\RBACService.cs:366:              INSERT INTO roles(name, description, org_unit, compliance_tags, is_deleted, notes, created_at, updated_at, created_by_id, last_modified_by_id, version)
Services\RBACService.cs:391:              UPDATE roles
Services\RBACService.cs:416:                "UPDATE roles SET is_deleted=1, updated_at=UTC_TIMESTAMP(), last_modified_by_id=@by, version=version+1 WHERE id=@id",
Services\RBACService.cs:421:                "DELETE FROM role_permissions WHERE role_id=@id",
Services\RBACService.cs:426:                "DELETE FROM user_roles WHERE role_id=@id",
ViewModels\SettingsViewModel.cs:16:    /// Robust ViewModel for system/app/user/security settings with audit & rollback (GMP/Annex 11/21 CFR Part 11).
ViewModels\SettingsViewModel.cs:66:        /// <summary>All settings loaded from persistence.</summary>
ViewModels\SettingsViewModel.cs:67:        public ObservableCollection<Setting> Settings
ViewModels\SettingsViewModel.cs:122:        /// <summary>Role gate for mutating settings.</summary>
ViewModels\SettingsViewModel.cs:140:        /// <summary>Loads all settings and applies current filters.</summary>
ViewModels\SettingsViewModel.cs:146:                var settings = await _dbService.GetAllSettingsFullAsync().ConfigureAwait(false);
ViewModels\SettingsViewModel.cs:147:                Settings = new ObservableCollection<Setting>(settings);
ViewModels\SettingsViewModel.cs:149:                StatusMessage = $"Loaded {Settings.Count} settings.";
ViewModels\SettingsViewModel.cs:153:                StatusMessage = $"Error loading settings: {ex.Message}";
ViewModels\SettingsViewModel.cs:241:        /// <summary>Exports filtered settings (format chosen by user) and logs an export entry.</summary>
ViewModels\SettingsViewModel.cs:261:                StatusMessage = "Settings exported successfully.";
ViewModels\SettingsViewModel.cs:273:            var filtered = Settings.Where(s =>
ViewModels\SettingsViewModel.cs:286:            var audits = await _dbService.GetAuditLogForEntityAsync("settings", settingId).ConfigureAwait(false);
Services\DatabaseService.WorkOrders.Extensions.cs:28:            const string sql = @"SELECT * FROM work_orders ORDER BY date_open DESC, id DESC";
Services\DatabaseService.WorkOrders.Extensions.cs:45:            const string sql = @"SELECT * FROM work_orders WHERE id=@id LIMIT 1";
Services\DatabaseService.WorkOrders.Extensions.cs:66:            string insert = @"INSERT INTO work_orders
Services\DatabaseService.WorkOrders.Extensions.cs:72:            string updateSql = @"UPDATE work_orders SET
Services\DatabaseService.WorkOrders.Extensions.cs:112:                string insertMin = @"INSERT INTO work_orders (machine_id, type, description, status, priority)
Services\DatabaseService.WorkOrders.Extensions.cs:114:                string updateMin = @"UPDATE work_orders SET machine_id=@mid, type=@type, description=@desc, status=@status, priority=@prio WHERE id=@id";
Services\DatabaseService.WorkOrders.Extensions.cs:141:                tableName: "work_orders",
Services\DatabaseService.WorkOrders.Extensions.cs:170:                tableName: "work_orders",
Services\DatabaseService.WorkOrders.Extensions.cs:191:            await db.ExecuteNonQueryAsync("DELETE FROM work_orders WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.WorkOrders.Extensions.cs:192:            await db.LogSystemEventAsync(actorUserId, "WO_DELETE", "work_orders", "WorkOrders", id, "Work order deleted", ip, "audit", device, null, token: token).ConfigureAwait(false);
Services\DatabaseService.WorkOrders.Extensions.cs:204:            await db.ExecuteNonQueryAsync("DELETE FROM work_orders WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.WorkOrders.Extensions.cs:205:            await db.LogSystemEventAsync(actorUserId, "WO_DELETE", "work_orders", "WorkOrders", id, "Work order deleted", ip, "audit", device, sessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.WorkOrders.Extensions.cs:223:            => db.LogSystemEventAsync(actorUserId, "WO_EXPORT", "work_orders", "WorkOrders", null, $"count={items?.Count ?? 0}", ip, "info", device, sessionId, token: token);
Services\DatabaseService.WorkOrders.Extensions.cs:231:            await db.ExecuteNonQueryAsync("UPDATE work_orders SET status='zavrsen' WHERE id=@id", new[] { new MySqlParameter("@id", workOrderId) }, token).ConfigureAwait(false);
Services\DatabaseService.WorkOrders.Extensions.cs:232:            await db.LogSystemEventAsync(actorUserId, "WO_APPROVE", "work_orders", "WorkOrders", workOrderId, null, ip, "audit", device, null, token: token).ConfigureAwait(false);
Services\DatabaseService.WorkOrders.Extensions.cs:237:            => db.LogSystemEventAsync(actorUserId, "WO_APPROVE", "work_orders", "WorkOrders", workOrderId, note, ip, "audit", device, null, token: token);
Services\DatabaseService.WorkOrders.Extensions.cs:241:            await db.ExecuteNonQueryAsync("UPDATE work_orders SET status='zavrsen', date_close=NOW() WHERE id=@id", new[] { new MySqlParameter("@id", workOrderId) }, token).ConfigureAwait(false);
Services\DatabaseService.WorkOrders.Extensions.cs:242:            await db.LogSystemEventAsync(actorUserId, "WO_CLOSE", "work_orders", "WorkOrders", workOrderId, null, ip, "audit", device, null, token: token).ConfigureAwait(false);
Services\DatabaseService.WorkOrders.Extensions.cs:247:            => db.LogSystemEventAsync(actorUserId, "WO_CLOSE", "work_orders", "WorkOrders", workOrderId, note, ip, "audit", device, null, token: token);
Services\DatabaseService.WorkOrders.Extensions.cs:250:            => db.LogSystemEventAsync(actorUserId, "WO_ESCALATE", "work_orders", "WorkOrders", workOrderId, null, ip, "warn", device, sessionId, token: token);
Services\DatabaseService.WorkOrders.Extensions.cs:254:            => db.LogSystemEventAsync(actorUserId, "WO_ESCALATE", "work_orders", "WorkOrders", workOrderId, note, ip, "warn", device, sessionId, token: token);
Services\DatabaseService.WorkOrders.Extensions.cs:257:            => db.LogSystemEventAsync(actorUserId, "WO_COMMENT", "work_orders", "WorkOrders", workOrderId, comment, ip, "info", device, sessionId, token: token);
Services\DatabaseService.WorkOrders.Extensions.cs:266:        /// Writes a row into work_order_audit if present; falls back to system_event_log.
Services\DatabaseService.WorkOrders.Extensions.cs:280:                const string sql = @"INSERT INTO work_order_audit
Services\DatabaseService.WorkOrders.Extensions.cs:296:                await db.LogSystemEventAsync(userId, $"WO_{action}", "work_orders", "WorkOrders", workOrderId, note, ip, "audit", device, null, token: token).ConfigureAwait(false);
Services\DatabaseService.DashboardExtensions.cs:56:        /// <summary>Mirror overload: some call sites pass the token first.</summary>
Services\DatabaseService.DashboardExtensions.cs:121:        /// <summary>Mirror overload for call sites that pass (token, "last30").</summary>
Services\DatabaseService.DashboardExtensions.cs:169:        /// <summary>Mirror overload for call sites that pass (token, "25").</summary>
Services\DatabaseService.Deviations.Extensions.cs:2:// File: Services/DatabaseService.Deviations.Extensions.cs
Services\DatabaseService.Deviations.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviations ORDER BY id DESC", null, token).ConfigureAwait(false);
Services\DatabaseService.Deviations.Extensions.cs:28:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviations WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Deviations.Extensions.cs:35:            string insert = @"INSERT INTO deviations (code, title, description, reported_at, reported_by_id, severity, is_critical, status, assigned_investigator_id, assigned_investigator_name, investigation_started_at, root_cause, linked_capa_id, closure_comment, closed_at, digital_signature, risk_score, anomaly_score, last_modified, last_modified_by_id, source_ip, audit_note)
Services\DatabaseService.Deviations.Extensions.cs:37:            string updateSql = @"UPDATE deviations SET code=@code, title=@title, description=@desc, reported_at=@rep, reported_by_id=@rby, severity=@sev, is_critical=@crit, status=@status, assigned_investigator_id=@assid, assigned_investigator_name=@assname, investigation_started_at=@invstart, root_cause=@rc, linked_capa_id=@lcapa, closure_comment=@clos, closed_at=@closed, digital_signature=@sig, risk_score=@risk, anomaly_score=@anom, last_modified=NOW(), last_modified_by_id=@lmb, source_ip=@ip, audit_note=@audit WHERE id=@id";
Services\DatabaseService.Deviations.Extensions.cs:76:            await db.LogSystemEventAsync(actorUserId, update ? "DEVIATION_UPDATE" : "DEVIATION_CREATE", "deviations", "DeviationModule", d.Id, d.Title, ip, "audit", device, sessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.Deviations.Extensions.cs:82:            await db.ExecuteNonQueryAsync("DELETE FROM deviations WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Deviations.Extensions.cs:83:            await db.LogSystemEventAsync(actorUserId, "DEVIATION_DELETE", "deviations", "DeviationModule", id, null, ip, "audit", device, sessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.Validations.Extensions.cs:25:        /// Retrieves all validations. Extra flags are accepted for call-site compatibility.
Services\DatabaseService.Validations.Extensions.cs:34:            const string sql = @"SELECT * FROM validations
Services\DatabaseService.Validations.Extensions.cs:50:            const string sql = @"SELECT * FROM validations WHERE id=@id LIMIT 1";
Services\DatabaseService.Validations.Extensions.cs:75:INSERT INTO validations
Services\DatabaseService.Validations.Extensions.cs:88:                    tableName: "validations",
Services\DatabaseService.Validations.Extensions.cs:101:UPDATE validations SET
Services\DatabaseService.Validations.Extensions.cs:111:                    tableName: "validations",
Services\DatabaseService.Validations.Extensions.cs:174:            const string sql = @"DELETE FROM validations WHERE id=@id";
Services\DatabaseService.Validations.Extensions.cs:180:                tableName: "validations",
Services\DatabaseService.Validations.Extensions.cs:209:                tableName: "validations",
Services\DatabaseService.Validations.Extensions.cs:221:        /// Exports the provided validations to CSV under app data and logs the action.
Services\DatabaseService.Validations.Extensions.cs:231:            string root = Path.Combine(FileSystem.Current.AppDataDirectory, "Exports", "Validations");
Services\DatabaseService.Validations.Extensions.cs:260:                tableName: "validations",
Services\DatabaseService.Validations.Extensions.cs:276:        /// Writes a row to the <c>validation_audit</c> table for a given action.
Services\DatabaseService.Validations.Extensions.cs:289:INSERT INTO validation_audit
Services\DatabaseService.Validations.Extensions.cs:340:        /// Builds parameter array for INSERT/UPDATE against the <c>validations</c> table.
Services\DatabaseService.cs:59:                var parts = _connectionString.Split(';', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
Services\DatabaseService.cs:60:                for (int i = 0; i < parts.Length; i++)
Services\DatabaseService.cs:62:                    var kv = parts[i].Split('=', 2, StringSplitOptions.TrimEntries);
Services\DatabaseService.cs:64:                        parts[i] = $"Database={shadowDb}";
Services\DatabaseService.cs:66:                return string.Join(';', parts);
Services\DatabaseService.cs:218:        /// system_event_log with rich context (table, record, field, before/after values, device, session, severity).
Services\DatabaseService.cs:262:INSERT INTO system_event_log
Services\DatabaseService.cs:304:INSERT INTO system_event_log (user_id, event_type, table_name, related_module, record_id, description, source_ip, severity)
Services\DatabaseService.cs:328:        /// Schema-tolerant: emits to system_event_log with details payload.
Services\DatabaseService.cs:348:                tableName: "permissions",
Services\DatabaseService.DeviationAudit.Extensions.cs:24:            const string sql = @"INSERT INTO deviation_audit (deviation_id, user_id, action, details, changed_at, device_info, source_ip, session_id, digital_signature, regulatory_status, ai_anomaly_score, validated, comment, old_value, new_value, signature_type, signature_valid, export_status, export_time, exported_by, restored_from_snapshot, restoration_reference, approval_status, approval_time, approved_by, deleted, deleted_at, deleted_by, created_at, updated_at, related_file, related_photo, iot_event_id)
Services\DatabaseService.DeviationAudit.Extensions.cs:30:            // Also mirror into system_event_log for unified audit if desired
Services\DatabaseService.DeviationAudit.Extensions.cs:31:            await db.LogSystemEventAsync(a.UserId, $"DEV_{a.Action}", "deviation_audit", "DeviationAuditPage", a.Id, a.Details, a.SourceIp, "audit", a.DeviceInfo, a.SessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.DeviationAudit.Extensions.cs:38:            const string sql = @"UPDATE deviation_audit SET deviation_id=@dev, user_id=@uid, action=@act, details=@det, changed_at=@chg, device_info=@devinfo, source_ip=@ip, session_id=@sid, digital_signature=@sig, regulatory_status=@reg, ai_anomaly_score=@ais, validated=@val, comment=@com, old_value=@old, new_value=@new, signature_type=@sigtype, signature_valid=@sigok, export_status=@expst, export_time=@exptm, exported_by=@expby, restored_from_snapshot=@restored, restoration_reference=@restref, approval_status=@apprst, approval_time=@apprtm, approved_by=@apprby, deleted=@del, deleted_at=@delat, deleted_by=@delby, updated_at=NOW(), related_file=@rfile, related_photo=@rphoto, iot_event_id=@iot WHERE id=@id";
Services\DatabaseService.DeviationAudit.Extensions.cs:42:            await db.LogSystemEventAsync(a.UserId, $"DEV_{a.Action}_UPDATE", "deviation_audit", "DeviationAuditPage", a.Id, a.Details, a.SourceIp, "audit", a.DeviceInfo, a.SessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.DeviationAudit.Extensions.cs:48:            await db.ExecuteNonQueryAsync("DELETE FROM deviation_audit WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.DeviationAudit.Extensions.cs:49:            await db.LogSystemEventAsync(0, "DEV_DELETE", "deviation_audit", "DeviationAuditPage", id, null, null, "audit", null, null, token: token).ConfigureAwait(false);
Services\DatabaseService.DeviationAudit.Extensions.cs:55:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviation_audit WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.DeviationAudit.Extensions.cs:62:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviation_audit WHERE deviation_id=@id ORDER BY changed_at DESC, id DESC", new[] { new MySqlParameter("@id", deviationId) }, token).ConfigureAwait(false);
Services\DatabaseService.DeviationAudit.Extensions.cs:68:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviation_audit WHERE user_id=@id ORDER BY changed_at DESC, id DESC", new[] { new MySqlParameter("@id", userId) }, token).ConfigureAwait(false);
Services\DatabaseService.DeviationAudit.Extensions.cs:74:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviation_audit WHERE action=@a ORDER BY changed_at DESC, id DESC", new[] { new MySqlParameter("@a", action) }, token).ConfigureAwait(false);
Services\DatabaseService.DeviationAudit.Extensions.cs:80:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviation_audit WHERE changed_at BETWEEN @f AND @t ORDER BY changed_at DESC, id DESC",
Services\DatabaseService.DeviationAudit.Extensions.cs:106:            await db.LogSystemEventAsync(0, "DEV_EXPORT", "deviation_audit", "DeviationAuditPage", null, $"count={audits?.Count ?? 0}; file={path}", null, "info", null, null, token: token).ConfigureAwait(false);
Models\WorkOrder.cs:12:    /// Ôťů Full forensic audit, rollback, AI/ML support, signatures, attachments, CAPA, incidents<br/>
Models\WorkOrder.cs:16:    [Table("work_orders")]
Models\WorkOrder.cs:85:        // ========== USERS & ROLES ==========
Models\WorkOrder.cs:117:        // ========== MACHINES & COMPONENTS ==========
Models\WorkOrder.cs:159:        /// <summary>Free-form notes or comments (max 512 chars).</summary>
Models\WorkOrder.cs:218:        // ========== PHOTOS, PARTS, COMMENTS, LOGS, ETC ==========
Models\WorkOrder.cs:228:        public virtual ICollection<Photo> Photos { get; set; } = new List<Photo>();
Models\WorkOrder.cs:230:        public virtual ICollection<WorkOrderComment> Comments { get; set; } = new List<WorkOrderComment>();
Models\WorkOrder.cs:295:                Photos = new List<Photo>(this.Photos),
Models\WorkOrder.cs:296:                Comments = new List<WorkOrderComment>(this.Comments),
Services\DatabaseService.ContractorInterventions.Extensions.cs:40:FROM contractor_interventions
Services\DatabaseService.ContractorInterventions.Extensions.cs:53:        /// Returns audit entries for a specific intervention from <c>contractor_intervention_audit</c>.
Services\DatabaseService.ContractorInterventions.Extensions.cs:62:FROM contractor_intervention_audit
Services\DatabaseService.ContractorInterventions.Extensions.cs:108:        /// Ultra method performing actual insert/update against contractor_interventions table and writing audit.
Services\DatabaseService.ContractorInterventions.Extensions.cs:120:            string insert = @"INSERT INTO contractor_interventions (contractor_id, component_id, intervention_date, reason, result, gmp_compliance, doc_file)
Services\DatabaseService.ContractorInterventions.Extensions.cs:122:            string updateSql = @"UPDATE contractor_interventions SET contractor_id=@cid, component_id=@comp, intervention_date=@date, reason=@reason, result=@result, gmp_compliance=@gmp, doc_file=@doc WHERE id=@id";
Services\DatabaseService.ContractorInterventions.Extensions.cs:147:            await db.LogSystemEventAsync(actorUserId, update ? "CONTR_INT_UPDATE" : "CONTR_INT_CREATE", "contractor_interventions", "ContractorModule",
Services\DatabaseService.ContractorInterventions.Extensions.cs:165:            await db.LogSystemEventAsync(userId, "CREATE", "contractor_interventions", "ContractorModule",
Services\DatabaseService.ContractorInterventions.Extensions.cs:195:            await db.LogSystemEventAsync(userId, "UPDATE", "contractor_interventions", "ContractorModule",
Services\DatabaseService.ContractorInterventions.Extensions.cs:224:            const string sql = "DELETE FROM contractor_interventions WHERE id=@id;";
Services\DatabaseService.ContractorInterventions.Extensions.cs:228:            await db.LogSystemEventAsync(userId, "DELETE", "contractor_interventions", "ContractorModule",
Services\DatabaseService.ContractorInterventions.Extensions.cs:268:            await db.LogSystemEventAsync(userId, "ROLLBACK", "contractor_interventions", "ContractorModule",
Services\DatabaseService.ContractorInterventions.Extensions.cs:298:            await db.LogSystemEventAsync(null, "EXPORT", "contractor_interventions", "ContractorModule",
Services\DatabaseService.ContractorInterventions.Extensions.cs:337:INSERT INTO contractor_intervention_audit
Services\DatabaseService.DigitalSignatures.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM digital_signatures ORDER BY signed_at DESC, id DESC", null, token).ConfigureAwait(false);
Services\DatabaseService.DigitalSignatures.Extensions.cs:29:            const string sql = @"INSERT INTO digital_signatures (table_name, record_id, user_id, signature_hash, method, status, signed_at, device_info, ip_address, note, public_key)
Services\DatabaseService.DigitalSignatures.Extensions.cs:48:            await db.LogSystemEventAsync(sig.UserId, "SIG_CREATE", "digital_signatures", "DigitalSignatures", sig.Id, sig.SignatureHash, sig.IpAddress, "audit", sig.DeviceInfo, null, token: token).ConfigureAwait(false);
Services\DatabaseService.DigitalSignatures.Extensions.cs:56:                await db.ExecuteNonQueryAsync("UPDATE digital_signatures SET status='revoked', note=@note WHERE id=@id", new[]
Services\DatabaseService.DigitalSignatures.Extensions.cs:63:            await db.LogSystemEventAsync(null, "SIG_REVOKE", "digital_signatures", "DigitalSignatures", id, reason, null, "audit", null, null, token: token).ConfigureAwait(false);
Services\DatabaseService.DigitalSignatures.Extensions.cs:73:            => db.LogSystemEventAsync(actorUserId, "SIG_EXPORT", "digital_signatures", "DigitalSignatures", null, $"count={rows?.Count ?? 0}; fmt={format}", ip, "info", deviceInfo, sessionId, token: token);
Services\DatabaseService.CapaExtensions.cs:5://       Likely tables: capa_action_log, capa_status_history (per your SQL).
Services\DatabaseService.CapaExtensions.cs:26:            // TODO: SELECT * FROM capa_action_log WHERE id = @id;
Services\DatabaseService.CapaExtensions.cs:35:            // TODO: SELECT * FROM capa_action_log WHERE capa_case_id = @capaId ORDER BY performed_at DESC;
Services\DatabaseService.CapaExtensions.cs:44:            // TODO: SELECT * FROM capa_action_log WHERE performed_by = @userId ORDER BY performed_at DESC;
Services\DatabaseService.CapaExtensions.cs:53:            // TODO: SELECT * FROM capa_action_log WHERE action_type = @action ORDER BY performed_at DESC;
Services\DatabaseService.CapaExtensions.cs:63:            // TODO: SELECT * FROM capa_action_log WHERE performed_at BETWEEN @from AND @to ORDER BY performed_at DESC;
Services\DatabaseService.Docs.cs:15:    /// <c>system_event_log</c>. It is intentionally written as a partial class and organized in
Services\DatabaseService.Docs.cs:16:    /// regions so the codebase can evolve by functional area (CAPA, Deviations, Documents,
Services\DatabaseService.Docs.cs:37:    /// <b>Canonical audit</b> ÔÇö sensitive actions log to <c>system_event_log</c> with rich context
Services\DatabaseService.Docs.cs:81:    ///     tableName: "sop_documents",
Services\DatabaseService.Scheduler.Extensions.cs:17:            var dt = await db.ExecuteSelectAsync("SELECT * FROM scheduled_jobs ORDER BY next_due, id", null, token).ConfigureAwait(false);
Services\DatabaseService.Scheduler.Extensions.cs:49:            => db.LogSystemEventAsync(0, "SCHED_CREATE", "scheduled_jobs", "SchedulerModule", null, job?.Name, job?.IpAddress, "audit", job?.DeviceInfo, job?.SessionId, token: token);
Services\DatabaseService.Scheduler.Extensions.cs:52:            => db.LogSystemEventAsync(actorUserId, "SCHED_UPDATE", "scheduled_jobs", "SchedulerModule", job?.Id, job?.Name, ip, "audit", deviceInfo, sessionId, token: token);
Services\DatabaseService.Scheduler.Extensions.cs:55:            => db.LogSystemEventAsync(0, "SCHED_DELETE", "scheduled_jobs", "SchedulerModule", jobId, null, ip, "audit", deviceInfo, sessionId, token: token);
Services\DatabaseService.Scheduler.Extensions.cs:57:            => db.LogSystemEventAsync(actorUserId, "SCHED_ACK", "scheduled_jobs", "SchedulerModule", jobId, null, ip, "audit", deviceInfo, sessionId, token: token);
Services\DatabaseService.Scheduler.Extensions.cs:60:            => db.LogSystemEventAsync(actorUserId, "SCHED_EXECUTE", "scheduled_jobs", "SchedulerModule", jobId, null, ip, "audit", deviceInfo, sessionId, token: token);
Services\DatabaseService.Scheduler.Extensions.cs:67:                path = YasGMP.Helpers.CsvExportHelper.WriteCsv(items ?? new List<ScheduledJob>(), "scheduled_jobs",
Services\DatabaseService.Scheduler.Extensions.cs:81:                path = YasGMP.Helpers.XlsxExporter.WriteSheet(items ?? new List<ScheduledJob>(), "scheduled_jobs",
Services\DatabaseService.Scheduler.Extensions.cs:95:                path = YasGMP.Helpers.PdfExporter.WriteTable(items ?? new List<ScheduledJob>(), "scheduled_jobs",
Services\DatabaseService.Scheduler.Extensions.cs:105:            return db.LogSystemEventAsync(0, "SCHED_EXPORT", "scheduled_jobs", "SchedulerModule", null, $"count={items?.Count ?? 0}; fmt={format}; file={path}", ip, "info", deviceInfo, sessionId, token: token);
Services\DatabaseService.Scheduler.Extensions.cs:109:            => db.LogSystemEventAsync(0, $"SCHED_{action}", "scheduled_jobs", "SchedulerModule", job?.Id, details, ip, "audit", deviceInfo, sessionId, token: token);
Services\DatabaseService.Capa.Cases.Extensions.cs:20:            const string sql = @"SELECT * FROM capa_cases ORDER BY id DESC";
Services\DatabaseService.Capa.Cases.Extensions.cs:29:            const string sql = @"SELECT * FROM capa_cases WHERE id=@id LIMIT 1";
Services\DatabaseService.Capa.Cases.Extensions.cs:37:            const string sql = @"INSERT INTO capa_cases (title, description, component_id, date_open, date_close, assigned_to_id, priority, status, root_cause, corrective_action, preventive_action, reason, actions, doc_file, digital_signature)
Services\DatabaseService.Capa.Cases.Extensions.cs:61:            await db.LogSystemEventAsync(actorUserId, "CAPA_CREATE", "capa_cases", "CAPA", c.Id, c.Title, ip, "audit", deviceInfo, sessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.Capa.Cases.Extensions.cs:72:            const string sql = @"UPDATE capa_cases SET title=@t, description=@d, component_id=@cid, date_open=@open, date_close=@close, assigned_to_id=@assn, priority=@prio, status=@status, root_cause=@rc, corrective_action=@corr, preventive_action=@prev, reason=@reason, actions=@acts, doc_file=@doc, digital_signature=@sig WHERE id=@id";
Services\DatabaseService.Capa.Cases.Extensions.cs:94:            await db.LogSystemEventAsync(actorUserId, "CAPA_UPDATE", "capa_cases", "CAPA", c.Id, c.Title, ip, "audit", deviceInfo, sessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.Capa.Cases.Extensions.cs:103:            => db.LogSystemEventAsync(actorUserId, $"CAPA_{action}", "capa_cases", "CAPA", capaId, details, ip, "audit", deviceInfo, sessionId, token: token);
Services\DatabaseService.Capa.Cases.Extensions.cs:106:            => db.LogSystemEventAsync(actorUserId, "CAPA_ROLLBACK", "capa_cases", "CAPA", capaId, null, ip, "audit", deviceInfo, sessionId, token: token);
Services\DatabaseService.Capa.Cases.Extensions.cs:110:            var path = YasGMP.Helpers.CsvExportHelper.WriteCsv(items ?? new System.Collections.Generic.List<CapaCase>(), "capa_cases",
Services\DatabaseService.Capa.Cases.Extensions.cs:120:            return db.LogSystemEventAsync(actorUserId, "CAPA_EXPORT", "capa_cases", "CAPA", null, $"count={items?.Count ?? 0}; file={path}", ip, "info", deviceInfo, sessionId, token: token);
Services\DatabaseService.Capa.Cases.Extensions.cs:133:                path = YasGMP.Helpers.XlsxExporter.WriteSheet(items ?? new System.Collections.Generic.List<CapaCase>(), "capa_cases",
Services\DatabaseService.Capa.Cases.Extensions.cs:146:                path = YasGMP.Helpers.PdfExporter.WriteTable(items ?? new System.Collections.Generic.List<CapaCase>(), "capa_cases",
Services\DatabaseService.Capa.Cases.Extensions.cs:158:                path = YasGMP.Helpers.CsvExportHelper.WriteCsv(items ?? new System.Collections.Generic.List<CapaCase>(), "capa_cases",
Services\DatabaseService.Capa.Cases.Extensions.cs:169:            return db.LogSystemEventAsync(actorUserId, "CAPA_EXPORT", "capa_cases", "CAPA", null, $"fmt={format}; count={items?.Count ?? 0}; file={path}", ip, "info", deviceInfo, sessionId, token: token);
Services\DatabaseService.Capa.Cases.Extensions.cs:179:            => db.LogSystemEventAsync(actorUserId, "CAPA_ESCALATE", "capa_cases", "CAPA", capaId, reason, ip, "warn", deviceInfo, sessionId, token: token);
Services\DatabaseService.Capa.Cases.Extensions.cs:182:            => db.LogSystemEventAsync(actorUserId, "CAPA_APPROVE", "capa_cases", "CAPA", capaId, note, ip, "audit", deviceInfo, sessionId, token: token);
Services\DatabaseService.Capa.Cases.Extensions.cs:185:            => db.LogSystemEventAsync(actorUserId, "CAPA_REJECT", "capa_cases", "CAPA", capaId, $"sig={signatureHash}", ip, "audit", deviceInfo, null, token: token);
Services\DatabaseService.Capa.Cases.Extensions.cs:189:            await db.ExecuteNonQueryAsync("DELETE FROM capa_cases WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Capa.Cases.Extensions.cs:190:            await db.LogSystemEventAsync(actorUserId, "CAPA_DELETE", "capa_cases", "CAPA", id, null, ip, "audit", deviceInfo, null, token: token).ConfigureAwait(false);
Services\DatabaseService.Capa.Cases.Extensions.cs:229:                Comments = S("comments"),
Services\DatabaseService.Suppliers.Extensions.cs:2:// File: Services/DatabaseService.Suppliers.Extensions.cs
Services\DatabaseService.Suppliers.Extensions.cs:3:// Purpose: Suppliers CRUD/read helpers expected by services/viewmodels
Services\DatabaseService.Suppliers.Extensions.cs:18:        public static async Task<List<Supplier>> GetAllSuppliersAsync(this DatabaseService db, CancellationToken token = default)
Services\DatabaseService.Suppliers.Extensions.cs:20:            // Some dumps use table name 'suppliers', others 'supplier' (singular). Try plural first.
Services\DatabaseService.Suppliers.Extensions.cs:23:                var dt = await db.ExecuteSelectAsync("SELECT * FROM suppliers ORDER BY name, id", null, token).ConfigureAwait(false);
Services\DatabaseService.Suppliers.Extensions.cs:28:                var dt = await db.ExecuteSelectAsync("SELECT * FROM supplier /* ANALYZER_IGNORE: legacy table */ ORDER BY name, id", null, token).ConfigureAwait(false);
Services\DatabaseService.Suppliers.Extensions.cs:33:        public static async Task<Supplier?> GetSupplierByIdAsync(this DatabaseService db, int id, CancellationToken token = default)
Services\DatabaseService.Suppliers.Extensions.cs:37:                var dt = await db.ExecuteSelectAsync("SELECT * FROM suppliers WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Suppliers.Extensions.cs:42:                var dt = await db.ExecuteSelectAsync("SELECT * FROM supplier /* ANALYZER_IGNORE: legacy table */ WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Suppliers.Extensions.cs:47:        public static async Task<int> InsertOrUpdateSupplierAsync(this DatabaseService db, Supplier s, bool update, CancellationToken token = default)
Services\DatabaseService.Suppliers.Extensions.cs:51:            string insert = @"INSERT INTO suppliers (name, vat_number, address, city, country, email, phone, website, supplier_type, notes, contract_file, status)
Services\DatabaseService.Suppliers.Extensions.cs:53:            string updateSql = @"UPDATE suppliers SET name=@name, vat_number=@vat, address=@addr, city=@city, country=@country, email=@em, phone=@ph, website=@web, supplier_type=@type, notes=@notes, contract_file=@contract, status=@status WHERE id=@id";
Services\DatabaseService.Suppliers.Extensions.cs:88:                insert = insert.Replace("suppliers", "supplier /* ANALYZER_IGNORE: legacy table */");
Services\DatabaseService.Suppliers.Extensions.cs:89:                updateSql = updateSql.Replace("suppliers", "supplier /* ANALYZER_IGNORE: legacy table */");
Services\DatabaseService.Suppliers.Extensions.cs:109:                await db.ExecuteNonQueryAsync("DELETE FROM suppliers WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Suppliers.Extensions.cs:113:                await db.ExecuteNonQueryAsync("DELETE FROM supplier WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Suppliers.Extensions.cs:118:            => db.LogSystemEventAsync(actorUserId, "SUPPLIER_ROLLBACK", "suppliers", "SupplierModule", id, null, ip, "audit", device, sessionId, token: token);
Services\DatabaseService.Suppliers.Extensions.cs:120:        public static Task ExportSuppliersAsync(this DatabaseService db, List<Supplier> items, string format, int actorUserId, string ip, string device, string? sessionId, CancellationToken token = default)
Services\DatabaseService.Suppliers.Extensions.cs:125:                path = YasGMP.Helpers.XlsxExporter.WriteSheet(items ?? new List<Supplier>(), "suppliers",
Services\DatabaseService.Suppliers.Extensions.cs:126:                    new (string, Func<Supplier, object?>)[]
Services\DatabaseService.Suppliers.Extensions.cs:138:                path = YasGMP.Helpers.PdfExporter.WriteTable(items ?? new List<Supplier>(), "suppliers",
Services\DatabaseService.Suppliers.Extensions.cs:139:                    new (string, Func<Supplier, object?>)[]
Services\DatabaseService.Suppliers.Extensions.cs:146:                    }, title: "Suppliers Export");
Services\DatabaseService.Suppliers.Extensions.cs:150:                path = YasGMP.Helpers.CsvExportHelper.WriteCsv(items ?? new List<Supplier>(), "suppliers",
Services\DatabaseService.Suppliers.Extensions.cs:151:                    new (string, Func<Supplier, object?>)[]
Services\DatabaseService.Suppliers.Extensions.cs:161:            return db.LogSystemEventAsync(actorUserId, "SUPPLIER_EXPORT", "suppliers", "SupplierModule", null, $"format={format}; count={items?.Count ?? 0}; file={path}", ip, "info", device, sessionId, token: token);
Services\DatabaseService.Suppliers.Extensions.cs:165:            => db.LogSystemEventAsync(actorUserId, $"SUPPLIER_{action}", "suppliers", "SupplierModule", supplierId, details, ip, "audit", device, sessionId, token: token);
Services\DatabaseService.Suppliers.Extensions.cs:168:        public static async Task<int> AddSupplierAsync(this DatabaseService db, Supplier supplier, int actorUserId, string ip, string device, CancellationToken token = default)
Services\DatabaseService.Suppliers.Extensions.cs:170:            var id = await db.InsertOrUpdateSupplierAsync(supplier, update: false, token).ConfigureAwait(false);
Services\DatabaseService.Suppliers.Extensions.cs:175:        public static async Task UpdateSupplierAsync(this DatabaseService db, Supplier supplier, int actorUserId, string ip, string device, CancellationToken token = default)
Services\DatabaseService.Suppliers.Extensions.cs:177:            await db.InsertOrUpdateSupplierAsync(supplier, update: true, token).ConfigureAwait(false);
Services\DatabaseService.Suppliers.Extensions.cs:178:            await db.LogSupplierAuditAsync(supplier.Id, "UPDATE", actorUserId, null, ip, device, sessionId: null, token: token).ConfigureAwait(false);
Services\DatabaseService.Suppliers.Extensions.cs:187:        public static Task<List<Supplier>> GetAllSuppliersFullAsync(this DatabaseService db, CancellationToken token = default)
Services\DatabaseService.Suppliers.Extensions.cs:190:        private static List<Supplier> MapList(DataTable dt)
Services\DatabaseService.Suppliers.Extensions.cs:192:            var list = new List<Supplier>(dt.Rows.Count);
Services\DatabaseService.Suppliers.Extensions.cs:197:        private static Supplier Map(DataRow r)
Services\DatabaseService.Suppliers.Extensions.cs:202:            return new Supplier
Services\DatabaseService.Calibrations.Extensions.cs:2:// File: Services/DatabaseService.Calibrations.Extensions.cs
Services\DatabaseService.Calibrations.Extensions.cs:3:// Purpose: Calibrations CRUD/read helpers expected by services/viewmodels
Services\DatabaseService.Calibrations.Extensions.cs:20:            const string sql = @"SELECT * FROM calibrations ORDER BY calibration_date DESC, id DESC";
Services\DatabaseService.Calibrations.Extensions.cs:29:            const string sql = @"SELECT * FROM calibrations WHERE id=@id LIMIT 1";
Services\DatabaseService.Calibrations.Extensions.cs:36:            const string sql = @"SELECT * FROM calibrations WHERE component_id=@cid ORDER BY calibration_date DESC, id DESC";
Services\DatabaseService.Calibrations.Extensions.cs:45:            const string sql = @"SELECT * FROM calibrations WHERE supplier_id=@sid ORDER BY calibration_date DESC, id DESC";
Services\DatabaseService.Calibrations.Extensions.cs:54:            const string sql = @"SELECT * FROM calibrations WHERE calibration_date BETWEEN @f AND @t ORDER BY calibration_date DESC, id DESC";
Services\DatabaseService.Calibrations.Extensions.cs:66:            string insert = @"INSERT INTO calibrations (component_id, supplier_id, calibration_date, next_due, cert_doc, result, comment, digital_signature)
Services\DatabaseService.Calibrations.Extensions.cs:68:            string updateSql = @"UPDATE calibrations SET component_id=@cid, supplier_id=@sid, calibration_date=@cd, next_due=@due, cert_doc=@doc, result=@res, comment=@comm, digital_signature=@sig WHERE id=@id";
Services\DatabaseService.Calibrations.Extensions.cs:94:            await db.LogSystemEventAsync(actorUserId, update ? "CAL_UPDATE" : "CAL_CREATE", "calibrations", "CalibrationModule", c.Id, null, ip, "audit", device, null, token: token).ConfigureAwait(false);
Services\DatabaseService.Calibrations.Extensions.cs:104:            await db.ExecuteNonQueryAsync("DELETE FROM calibrations WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.Calibrations.Extensions.cs:105:            await db.LogSystemEventAsync(actorUserId, "CAL_DELETE", "calibrations", "CalibrationModule", id, null, ip, "audit", device, null, token: token).ConfigureAwait(false);
Services\DatabaseService.RiskAssessments.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM risk_assessments ORDER BY id DESC", null, token).ConfigureAwait(false);
Services\DatabaseService.RiskAssessments.Extensions.cs:46:            => db.LogSystemEventAsync(null, $"RA_{action}", "risk_assessments", "RiskAssessment", risk?.Id, details ?? risk?.Code, ip, "audit", deviceInfo, sessionId, token: token);
Services\DatabaseService.SpareParts.Extensions.cs:3:// Purpose: Minimal Parts/SpareParts CRUD + audit/export shims used by SparePartViewModel
Services\DatabaseService.SpareParts.Extensions.cs:23:            var dt = await db.ExecuteSelectAsync("SELECT * FROM parts WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.SpareParts.Extensions.cs:38:            var dt = await db.ExecuteSelectAsync("SELECT * FROM parts ORDER BY name, id", null, token).ConfigureAwait(false);
Services\DatabaseService.SpareParts.Extensions.cs:47:            string insert = @"INSERT INTO parts (code, name, description, category, barcode, rfid, serial_or_lot, default_supplier_id, price, stock, min_stock_alert, location, image, status, blocked, regulatory_certificates, digital_signature, last_modified, last_modified_by_id, source_ip)
Services\DatabaseService.SpareParts.Extensions.cs:61:            string update = @"UPDATE parts SET code=@code, name=@name, description=@desc, category=@cat, barcode=@bar, rfid=@rfid, serial_or_lot=@serial, default_supplier_id=@supp, price=@price, stock=@stock, min_stock_alert=@min, location=@loc, image=@img, status=@status, blocked=@blocked, regulatory_certificates=@reg, digital_signature=@sig, last_modified=NOW(), last_modified_by_id=@lmb, source_ip=@ip WHERE id=@id";
Services\DatabaseService.SpareParts.Extensions.cs:70:            await db.ExecuteNonQueryAsync("DELETE FROM parts WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
Services\DatabaseService.SpareParts.Extensions.cs:82:                path = YasGMP.Helpers.XlsxExporter.WriteSheet(items ?? new List<Part>(), "parts",
Services\DatabaseService.SpareParts.Extensions.cs:95:                path = YasGMP.Helpers.PdfExporter.WriteTable(items ?? new List<Part>(), "parts",
Services\DatabaseService.SpareParts.Extensions.cs:103:                    }, title: "Parts Export");
Services\DatabaseService.SpareParts.Extensions.cs:107:                path = YasGMP.Helpers.CsvExportHelper.WriteCsv(items ?? new List<Part>(), "parts",
Services\DatabaseService.SpareParts.Extensions.cs:122:            => db.LogSystemEventAsync(actorUserId, $"PART_{action}", "parts", "PartModule", partId == 0 ? null : partId, signature, ip, "audit", deviceInfo, sessionId, token: token);
Views\SuppliersPage.xaml.cs:24:        public ObservableCollection<Supplier> Suppliers { get; } = new();
Views\SuppliersPage.xaml.cs:67:        /// U─Źitava sve dobavlja─Źe i puni kolekciju <see cref="Suppliers"/> na glavnoj niti.
Views\SuppliersPage.xaml.cs:72:                                 FROM suppliers";
Views\SuppliersPage.xaml.cs:80:                    Suppliers.Clear();
Views\SuppliersPage.xaml.cs:83:                        Suppliers.Add(new Supplier
Views\SuppliersPage.xaml.cs:110:            var s = new Supplier();
Views\SuppliersPage.xaml.cs:113:                const string sql = @"INSERT INTO suppliers (name, vat_number, address, city, country, email, phone, website, supplier_type, notes, contract_file)
Views\SuppliersPage.xaml.cs:145:            if (SupplierListView.SelectedItem is not Supplier selected)
Views\SuppliersPage.xaml.cs:151:            var s = new Supplier
Views\SuppliersPage.xaml.cs:169:                const string sql = @"UPDATE suppliers SET 
Views\SuppliersPage.xaml.cs:206:            if (SupplierListView.SelectedItem is not Supplier selected)
Views\SuppliersPage.xaml.cs:215:            const string sql = "DELETE FROM suppliers WHERE id=@id";
Views\SuppliersPage.xaml.cs:232:        private async Task<bool> ShowSupplierFormAsync(Supplier supplier, string title)
Views\SuppliersPage.xaml.cs:234:            var name = await DisplayPromptAsync(title, "Naziv dobavlja─Źa/servisera:", initialValue: supplier.Name);
Views\SuppliersPage.xaml.cs:236:            supplier.Name = name;
Views\SuppliersPage.xaml.cs:238:            var vat = await DisplayPromptAsync(title, "OIB/Porezni broj:", initialValue: supplier.VatNumber);
Views\SuppliersPage.xaml.cs:239:            supplier.VatNumber = vat ?? supplier.VatNumber;
Views\SuppliersPage.xaml.cs:241:            var addr = await DisplayPromptAsync(title, "Adresa:", initialValue: supplier.Address);
Views\SuppliersPage.xaml.cs:242:            supplier.Address = addr ?? supplier.Address;
Views\SuppliersPage.xaml.cs:244:            var city = await DisplayPromptAsync(title, "Grad/mjesto:", initialValue: supplier.City);
Views\SuppliersPage.xaml.cs:245:            supplier.City = city ?? supplier.City;
Views\SuppliersPage.xaml.cs:247:            var country = await DisplayPromptAsync(title, "Dr┼żava:", initialValue: supplier.Country);
Views\SuppliersPage.xaml.cs:248:            supplier.Country = country ?? supplier.Country;
Views\SuppliersPage.xaml.cs:250:            var email = await DisplayPromptAsync(title, "Email:", initialValue: supplier.Email);
Views\SuppliersPage.xaml.cs:251:            supplier.Email = email ?? supplier.Email;
Views\SuppliersPage.xaml.cs:253:            var phone = await DisplayPromptAsync(title, "Telefon:", initialValue: supplier.Phone);
Views\SuppliersPage.xaml.cs:254:            supplier.Phone = phone ?? supplier.Phone;
Views\SuppliersPage.xaml.cs:256:            var web = await DisplayPromptAsync(title, "Web stranica:", initialValue: supplier.Website);
Views\SuppliersPage.xaml.cs:257:            supplier.Website = web ?? supplier.Website;
Views\SuppliersPage.xaml.cs:259:            var type = await DisplayPromptAsync(title, "Tip dobavlja─Źa (dijelovi, servis, laboratorij...):", initialValue: supplier.SupplierType);
Views\SuppliersPage.xaml.cs:260:            supplier.SupplierType = type ?? supplier.SupplierType;
Views\SuppliersPage.xaml.cs:262:            var notes = await DisplayPromptAsync(title, "Posebne napomene:", initialValue: supplier.Notes);
Views\SuppliersPage.xaml.cs:263:            supplier.Notes = notes ?? supplier.Notes;
Views\SuppliersPage.xaml.cs:265:            var contract = await DisplayPromptAsync(title, "Putanja do PDF ugovora/certifikata:", initialValue: supplier.ContractFile);
Views\SuppliersPage.xaml.cs:266:            supplier.ContractFile = contract ?? supplier.ContractFile;
Services\DatabaseService.Audit.QueryExtensions.cs:3:// Purpose: Read audit logs for an entity from system_event_log (fallback aware)
Services\DatabaseService.Audit.QueryExtensions.cs:20:        /// Prefers system_event_log and maps to AuditEntryDto.
Services\DatabaseService.Audit.QueryExtensions.cs:36:                                     FROM system_event_log
Services\DatabaseService.Audit.QueryExtensions.cs:72:                // Fallback: if system_event_log missing, return empty list.
Services\DatabaseService.Users.Extensions.cs:2:// File: Services/DatabaseService.Users.Extensions.cs
Services\DatabaseService.Users.Extensions.cs:7:// Extension API for DatabaseService focused on USERS & AUTH. This file is the
Services\DatabaseService.Users.Extensions.cs:24:// - Includes a tiny LogUserAuditShimAsync that maps to system_event_log; the name is unique so it
Services\DatabaseService.Users.Extensions.cs:25://   will NOT collide with RBAC's LogUserAuditAsync(User?, ...) even when call sites pass null.
Services\DatabaseService.Users.Extensions.cs:39:    /// <b>DatabaseServiceUsersExtensions</b> ÔÇô Users &amp; Authentication helpers exposed as
Services\DatabaseService.Users.Extensions.cs:45:        #region 07  USERS & AUTH (core queries)
Services\DatabaseService.Users.Extensions.cs:60:            const string sql = @"SELECT * FROM users WHERE id=@id LIMIT 1;";
Services\DatabaseService.Users.Extensions.cs:75:            const string sql = @"SELECT * FROM users WHERE LOWER(username)=LOWER(@u) LIMIT 1;";
Services\DatabaseService.Users.Extensions.cs:83:        /// Returns all users (basic fields).
Services\DatabaseService.Users.Extensions.cs:94:            var dt = await db.ExecuteSelectAsync("SELECT * FROM users ORDER BY username", null, token).ConfigureAwait(false);
Services\DatabaseService.Users.Extensions.cs:115:                ? @"INSERT INTO users
Services\DatabaseService.Users.Extensions.cs:118:                : @"UPDATE users SET
Services\DatabaseService.Users.Extensions.cs:143:                    ? @"INSERT INTO users /* ANALYZER_IGNORE: legacy schema */
Services\DatabaseService.Users.Extensions.cs:146:                    : @"UPDATE users /* ANALYZER_IGNORE: legacy schema */ SET
Services\DatabaseService.Users.Extensions.cs:171:                    "UPDATE users SET last_login=NOW(), failed_login_attempts=0 WHERE id=@id",
Services\DatabaseService.Users.Extensions.cs:177:                    "UPDATE users /* ANALYZER_IGNORE: legacy schema */ SET last_login=NOW(), failed_logins=0 WHERE id=@id",
Services\DatabaseService.Users.Extensions.cs:191:                    @"UPDATE users
Services\DatabaseService.Users.Extensions.cs:200:                    @"UPDATE users /* ANALYZER_IGNORE: legacy schema */
Services\DatabaseService.Users.Extensions.cs:210:        #region 07a  USERS & AUTH (account state helpers)
Services\DatabaseService.Users.Extensions.cs:214:            => db.ExecuteNonQueryAsync("UPDATE users SET is_locked=1 WHERE id=@id",
Services\DatabaseService.Users.Extensions.cs:230:                    "UPDATE users SET is_locked=0, failed_login_attempts=0 WHERE id=@id",
Services\DatabaseService.Users.Extensions.cs:236:                    "UPDATE users /* ANALYZER_IGNORE: legacy schema */ SET is_locked=0, failed_logins=0 WHERE id=@id",
Services\DatabaseService.Users.Extensions.cs:251:                "UPDATE users SET is_two_factor_enabled=@tfa WHERE id=@id",
Services\DatabaseService.Users.Extensions.cs:260:                    "UPDATE users SET password_reset_required=1 WHERE id=@id",
Services\DatabaseService.Users.Extensions.cs:282:            await db.ExecuteNonQueryAsync("DELETE FROM users WHERE id=@id",
Services\DatabaseService.Users.Extensions.cs:290:        #region 07b  USERS (compatibility & mapping)
Services\DatabaseService.Users.Extensions.cs:336:        /// Minimal, always-available audit shim for user actions that writes to <c>system_event_log</c>.
Services\DatabaseService.Users.Extensions.cs:338:        /// <c>LogUserAuditAsync(DatabaseService, User?, ...)</c> when call sites pass <c>null</c>.
Services\DatabaseService.Users.Extensions.cs:353:                tableName: "users",
Services\DatabaseService.Settings.Extensions.cs:2:// File: Services/DatabaseService.Settings.Extensions.cs
Services\DatabaseService.Settings.Extensions.cs:3:// Purpose: Minimal Settings export/delete/rollback + audit shim used by SettingsViewModel
Services\DatabaseService.Settings.Extensions.cs:20:                var dt = await db.ExecuteSelectAsync("SELECT * FROM settings /* ANALYZER_IGNORE: legacy table */ ORDER BY `key`", null, token).ConfigureAwait(false);
Services\DatabaseService.Settings.Extensions.cs:79:FROM system_parameters
Services\DatabaseService.Settings.Extensions.cs:122:            string insert = @"INSERT INTO settings /* ANALYZER_IGNORE: legacy table */ (`key`, `value`, default_value, value_type, min_value, max_value, description, category, subcategory, is_sensitive, is_global, user_id, role_id, approved_by_id, approved_at, digital_signature, status, updated_at, updated_by_id)
Services\DatabaseService.Settings.Extensions.cs:124:            string updateSql = @"UPDATE settings /* ANALYZER_IGNORE: legacy table */ SET `key`=@key, `value`=@val, default_value=@def, value_type=@type, min_value=@min, max_value=@max, description=@desc, category=@cat, subcategory=@sub, is_sensitive=@sens, is_global=@glob, user_id=@uid, role_id=@rid, approved_by_id=@apby, approved_at=@apat, digital_signature=@sig, status=@status, updated_at=NOW(), updated_by_id=@updby WHERE id=@id";
Services\DatabaseService.Settings.Extensions.cs:164:                // Fallback to system_parameters
Services\DatabaseService.Settings.Extensions.cs:165:                const string upsert = @"INSERT INTO system_parameters (param_name, param_value, updated_by, note)
Services\DatabaseService.Settings.Extensions.cs:178:            await db.LogSystemEventAsync(actorUserId, update ? "SETTING_UPDATE" : "SETTING_CREATE", "settings", "SettingsModule", setting.Id, setting.Key, ip, "audit", device, sessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.Settings.Extensions.cs:187:            try { await db.ExecuteNonQueryAsync("DELETE FROM settings /* ANALYZER_IGNORE: legacy table */ WHERE id=@id", new[] { new MySqlParameter("@id", settingId) }, token).ConfigureAwait(false); }
Services\DatabaseService.Settings.Extensions.cs:188:            catch (MySqlException ex) when (ex.Number == 1146) { /* no-op for system_parameters; not keyed by id */ }
Services\DatabaseService.Settings.Extensions.cs:189:            await db.LogSystemEventAsync(actorUserId, "SETTING_DELETE", "settings", "SettingsModule", settingId, null, ip, "audit", device, null, token: token).ConfigureAwait(false);
Services\DatabaseService.Settings.Extensions.cs:193:            => db.LogSystemEventAsync(actorUserId, "SETTING_ROLLBACK", "settings", "SettingsModule", settingId, null, ip, "audit", device, sessionId, token: token);
Services\DatabaseService.Settings.Extensions.cs:195:        // Name-keyed mapping helpers for system_parameters compatibility
Services\DatabaseService.Settings.Extensions.cs:206:                const string upsert = @"INSERT INTO system_parameters (param_name, param_value, updated_by, note)
Services\DatabaseService.Settings.Extensions.cs:216:                await db.LogSystemEventAsync(actorUserId, "SETTING_CREATE", "settings", "SettingsModule", null, key, ip, "audit", device, sessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.Settings.Extensions.cs:226:                await db.ExecuteNonQueryAsync("DELETE FROM settings WHERE `key`=@k", new[] { new MySqlParameter("@k", key) }, token).ConfigureAwait(false);
Services\DatabaseService.Settings.Extensions.cs:230:                await db.ExecuteNonQueryAsync("DELETE FROM system_parameters WHERE param_name=@k", new[] { new MySqlParameter("@k", key) }, token).ConfigureAwait(false);
Services\DatabaseService.Settings.Extensions.cs:232:            await db.LogSystemEventAsync(actorUserId, "SETTING_DELETE", "settings", "SettingsModule", null, key, ip, "audit", device, sessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.Settings.Extensions.cs:240:                await db.ExecuteNonQueryAsync("UPDATE settings SET `value`=default_value, updated_at=NOW(), updated_by_id=@u WHERE `key`=@k", new[] { new MySqlParameter("@u", actorUserId), new MySqlParameter("@k", key) }, token).ConfigureAwait(false);
Services\DatabaseService.Settings.Extensions.cs:245:                await db.ExecuteNonQueryAsync("DELETE FROM system_parameters WHERE param_name=@k", new[] { new MySqlParameter("@k", key) }, token).ConfigureAwait(false);
Services\DatabaseService.Settings.Extensions.cs:247:            await db.LogSystemEventAsync(actorUserId, "SETTING_ROLLBACK", "settings", "SettingsModule", null, key, ip, "audit", device, sessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.Settings.Extensions.cs:258:                path = YasGMP.Helpers.XlsxExporter.WriteSheet(items ?? new List<Setting>(), "settings",
Services\DatabaseService.Settings.Extensions.cs:270:                path = YasGMP.Helpers.PdfExporter.WriteTable(items ?? new List<Setting>(), "settings",
Services\DatabaseService.Settings.Extensions.cs:277:                    }, title: "Settings Export");
Services\DatabaseService.Settings.Extensions.cs:281:                path = YasGMP.Helpers.CsvExportHelper.WriteCsv(items ?? new List<Setting>(), "settings",
Services\DatabaseService.Settings.Extensions.cs:291:            return db.LogSystemEventAsync(actorUserId, "SETTING_EXPORT", "settings", "SettingsModule", null, $"format={format}; count={items?.Count ?? 0}; file={path}", ip, "info", device, sessionId, token: token);
Services\DatabaseService.Settings.Extensions.cs:295:            => db.LogSystemEventAsync(0, $"SETTING_{action}", "settings", "SettingsModule", setting?.Id, details ?? setting?.Value, ip, "audit", device, sessionId, token: token);
Models\WarehouseStock.cs:70:        /// <summary>Expiry date (if applicable, for perishable or time-sensitive parts).</summary>
Services\DatabaseService.Qualifications.Extensions.cs:20:            // Map from `component_qualifications` if available; otherwise return empty set.
Services\DatabaseService.Qualifications.Extensions.cs:21:            var dt = await db.ExecuteSelectAsync("SELECT * FROM component_qualifications ORDER BY qualification_date DESC, id DESC", null, token).ConfigureAwait(false);
Services\DatabaseService.Qualifications.Extensions.cs:32:                await db.ExecuteNonQueryAsync(@"INSERT INTO component_qualifications (component_id, supplier_id, qualification_date, status, certificate_number)
Services\DatabaseService.Qualifications.Extensions.cs:51:                await db.ExecuteNonQueryAsync(@"UPDATE component_qualifications SET component_id=@comp, supplier_id=@supp, qualification_date=@date, status=@status, certificate_number=@cert WHERE id=@id", new[]
Services\DatabaseService.Qualifications.Extensions.cs:67:            try { await db.ExecuteNonQueryAsync("DELETE FROM component_qualifications WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false); } catch { }
Services\PreventiveMaintenanceService.cs:107:        /// Accepts nullable <paramref name="frequency"/> to avoid CS8604 at call sites.
Services\DatabaseService.UserOps.Extensions.cs:26:        /// Convenience wrapper that returns all users via the canonical implementation
Services\DatabaseService.UserOps.Extensions.cs:31:        /// <returns>List of users.</returns>
Services\DatabaseService.SystemEvents.QueryExtensions.cs:3:// Purpose: Query system_event_log as SystemEvent POCOs with filters
Services\DatabaseService.SystemEvents.QueryExtensions.cs:30:            string sql = "SELECT id, ts_utc, user_id, event_type, table_name, related_module, record_id, field_name, old_value, new_value, description, source_ip, device_info, session_id, severity, processed FROM system_event_log WHERE 1=1";
Views\SuppliersPage.xaml:49:            ItemsSource="{Binding Suppliers}"
Models\SchemaMigrationLog.cs:66:        /// <summary>Optional attachments (json: logs, screenshots, rollback, PDFs, etc.).</summary>
Services\DatabaseService.TrainingRecords.Extensions.cs:37:FROM user_training
Services\DatabaseService.TrainingRecords.Extensions.cs:69:INSERT INTO user_training
Services\DatabaseService.TrainingRecords.Extensions.cs:108:UPDATE user_training
Services\DatabaseService.TrainingRecords.Extensions.cs:136:UPDATE user_training
Services\DatabaseService.TrainingRecords.Extensions.cs:160:UPDATE user_training
Services\DatabaseService.TrainingRecords.Extensions.cs:184:UPDATE user_training
Services\DatabaseService.TrainingRecords.Extensions.cs:217:INSERT INTO export_print_log (user_id, format, table_name, filter_used, file_path, source_ip, note)
Services\DatabaseService.TrainingRecords.Extensions.cs:218:VALUES (NULL,'csv','user_training',@filter,@path,@ip,'Training export')",
Services\DatabaseService.TrainingRecords.Extensions.cs:232:                tableName: "user_training",
Services\DatabaseService.TrainingRecords.Extensions.cs:264:                path = YasGMP.Helpers.XlsxExporter.WriteSheet(list, "user_training",
Services\DatabaseService.TrainingRecords.Extensions.cs:278:                path = YasGMP.Helpers.PdfExporter.WriteTable(list, "user_training",
Services\DatabaseService.TrainingRecords.Extensions.cs:291:                path = YasGMP.Helpers.CsvExportHelper.WriteCsv(list, "user_training",
Services\DatabaseService.TrainingRecords.Extensions.cs:304:            // Write export_print_log when present
Services\DatabaseService.TrainingRecords.Extensions.cs:308:INSERT INTO export_print_log (user_id, format, table_name, filter_used, file_path, source_ip, note)
Services\DatabaseService.TrainingRecords.Extensions.cs:309:VALUES (NULL,@fmt,'user_training',@filter,@path,@ip,'Training export')",
Services\DatabaseService.TrainingRecords.Extensions.cs:323:                tableName: "user_training",
Services\DatabaseService.TrainingRecords.Extensions.cs:374:                    tableName: "user_training",
Services\DatabaseService.TrainingRecords.Extensions.cs:394:            // core fields (schema-tolerant: support both training_records and user_training shapes)
Services\DatabaseService.Rbac.Extensions.cs:4://          (EXCLUDING core Users/Auth APIs which live in
Services\DatabaseService.Rbac.Extensions.cs:5://          DatabaseService.Users.Extensions.cs to avoid ambiguity).
Services\DatabaseService.Rbac.Extensions.cs:10://  ÔÇó AddUserAsync / UpdateUserAsync / DeleteUserAsync (call Users-extensions for I/U)
Services\DatabaseService.Rbac.Extensions.cs:11://  ÔÇó RBAC helpers: assign/remove roles & permissions, user lock/unlock, 2FA flag
Services\DatabaseService.Rbac.Extensions.cs:14://  ÔÇó Export helpers write to export_print_log when present
Services\DatabaseService.Rbac.Extensions.cs:34:    /// <b>Note:</b> Core Users/Auth APIs such as
Services\DatabaseService.Rbac.Extensions.cs:39:    /// live in <c>DatabaseService.Users.Extensions.cs</c> to prevent CS0121 ambiguity.
Services\DatabaseService.Rbac.Extensions.cs:45:        // USERS: READ
Services\DatabaseService.Rbac.Extensions.cs:49:        /// Returns all users (basic projection).
Services\DatabaseService.Rbac.Extensions.cs:55:            const string sql = @"SELECT * FROM users ORDER BY full_name, username, id;";
Services\DatabaseService.Rbac.Extensions.cs:75:        /// Returns all users and populates <see cref="User.RoleIds"/> /
Services\DatabaseService.Rbac.Extensions.cs:82:            var users = await GetAllUsersAsync(db, token).ConfigureAwait(false);
Services\DatabaseService.Rbac.Extensions.cs:83:            if (users.Count == 0) return users;
Services\DatabaseService.Rbac.Extensions.cs:85:            var userIds = users.Select(u => u.Id).ToList();
Services\DatabaseService.Rbac.Extensions.cs:89:            foreach (var u in users)
Services\DatabaseService.Rbac.Extensions.cs:95:            return users;
Services\DatabaseService.Rbac.Extensions.cs:106:            const string sql = @"SELECT * FROM users WHERE id=@id LIMIT 1;";
Services\DatabaseService.Rbac.Extensions.cs:112:        // USERS: CREATE / UPDATE / DELETE
Services\DatabaseService.Rbac.Extensions.cs:118:        /// to keep a single source of truth for the USERS core.
Services\DatabaseService.Rbac.Extensions.cs:136:                adminUserId, "USER_CREATE", "users", "RBAC",
Services\DatabaseService.Rbac.Extensions.cs:143:        /// Adds a user (signature overload). Insert is delegated to USERS core to avoid duplication.
Services\DatabaseService.Rbac.Extensions.cs:163:        /// Updates a user (signature overload). Update is delegated to USERS core to avoid duplication.
Services\DatabaseService.Rbac.Extensions.cs:198:                    "UPDATE users SET is_deleted=1, deleted_at=NOW() WHERE id=@id",
Services\DatabaseService.Rbac.Extensions.cs:209:                    "DELETE FROM users WHERE id=@id",
Services\DatabaseService.Rbac.Extensions.cs:244:                null, "USER_ROLLBACK", "users", "RBAC",
Services\DatabaseService.Rbac.Extensions.cs:249:        // RBAC: ROLES / PERMISSIONS
Services\DatabaseService.Rbac.Extensions.cs:252:        /// <summary>Returns all roles with tolerant mapping.</summary>
Services\DatabaseService.Rbac.Extensions.cs:257:            var dt = await db.ExecuteSelectAsync("SELECT * FROM roles ORDER BY name, id", null, token).ConfigureAwait(false);
Services\DatabaseService.Rbac.Extensions.cs:264:        /// <summary>Returns all permissions with tolerant mapping.</summary>
Services\DatabaseService.Rbac.Extensions.cs:269:            var dt = await db.ExecuteSelectAsync("SELECT * FROM permissions ORDER BY code, id", null, token).ConfigureAwait(false);
Services\DatabaseService.Rbac.Extensions.cs:288:INSERT INTO user_roles (user_id, role_id, granted_by, granted_at)
Services\DatabaseService.Rbac.Extensions.cs:315:                "DELETE FROM user_roles WHERE user_id=@u AND role_id=@r",
Services\DatabaseService.Rbac.Extensions.cs:334:INSERT INTO role_permissions (role_id, permission_id)
Services\DatabaseService.Rbac.Extensions.cs:360:                "DELETE FROM role_permissions WHERE role_id=@r AND permission_id=@p",
Services\DatabaseService.Rbac.Extensions.cs:401:INSERT INTO user_audit (user_id, action, description, created_at, source_ip, device_info, session_id)
Services\DatabaseService.Rbac.Extensions.cs:415:                await db.LogSystemEventAsync(null, "USER_AUDIT_FALLBACK", "users", "RBAC",
Services\DatabaseService.Rbac.Extensions.cs:446:INSERT INTO role_audit (role_id, action, description, created_at, source_ip, device_info, session_id)
Services\DatabaseService.Rbac.Extensions.cs:460:                await db.LogSystemEventAsync(null, "ROLE_AUDIT_FALLBACK", "roles", "RBAC",
Services\DatabaseService.Rbac.Extensions.cs:470:        /// Exports users and returns the file path (also logs into export_print_log if available).
Services\DatabaseService.Rbac.Extensions.cs:474:            IEnumerable<User> users,
Services\DatabaseService.Rbac.Extensions.cs:487:INSERT INTO export_print_log (user_id, format, table_name, filter_used, file_path, source_ip, note)
Services\DatabaseService.Rbac.Extensions.cs:488:VALUES (NULL,@fmt,'users',@filter,@path,@ip,'Users export')",
Services\DatabaseService.Rbac.Extensions.cs:492:                        new MySqlParameter("@filter", $"count={(users?.Count() ?? 0)}"),
Services\DatabaseService.Rbac.Extensions.cs:499:            await db.LogSystemEventAsync(null, "USER_EXPORT", "users", "RBAC",
Services\DatabaseService.Rbac.Extensions.cs:500:                null, $"Exported {(users?.Count() ?? 0)} users Ôćĺ {filePath}", ip, "audit", deviceInfo, sessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.Rbac.Extensions.cs:505:        /// <summary>Exports roles and returns a file path.</summary>
Services\DatabaseService.Rbac.Extensions.cs:508:            IEnumerable<Role> roles,
Services\DatabaseService.Rbac.Extensions.cs:521:INSERT INTO export_print_log (user_id, format, table_name, filter_used, file_path, source_ip, note)
Services\DatabaseService.Rbac.Extensions.cs:522:VALUES (NULL,@fmt,'roles',@filter,@path,@ip,'Roles export')",
Services\DatabaseService.Rbac.Extensions.cs:526:                        new MySqlParameter("@filter", $"count={(roles?.Count() ?? 0)}"),
Services\DatabaseService.Rbac.Extensions.cs:533:            await db.LogSystemEventAsync(null, "ROLE_EXPORT", "roles", "RBAC",
Services\DatabaseService.Rbac.Extensions.cs:534:                null, $"Exported {(roles?.Count() ?? 0)} roles Ôćĺ {filePath}", ip, "audit", deviceInfo, sessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.Rbac.Extensions.cs:539:        /// <summary>Exports permissions and returns a file path.</summary>
Services\DatabaseService.Rbac.Extensions.cs:555:INSERT INTO export_print_log (user_id, format, table_name, filter_used, file_path, source_ip, note)
Services\DatabaseService.Rbac.Extensions.cs:556:VALUES (NULL,@fmt,'permissions',@filter,@path,@ip,'Permissions export')",
Services\DatabaseService.Rbac.Extensions.cs:567:            await db.LogSystemEventAsync(null, "PERMISSION_EXPORT", "permissions", "RBAC",
Services\DatabaseService.Rbac.Extensions.cs:568:                null, $"Exported {(perms?.Count() ?? 0)} permissions Ôćĺ {filePath}", ip, "audit", deviceInfo, sessionId, token: token).ConfigureAwait(false);
Services\DatabaseService.Rbac.Extensions.cs:603:        /// upgraded <c>roles</c> schema (notes, audit fields, versioning, soft delete).
Services\DatabaseService.Rbac.Extensions.cs:657:                    $"SELECT user_id, role_id FROM user_roles WHERE user_id IN ({inClause})", pars, token)
Services\DatabaseService.Rbac.Extensions.cs:691:                    $"SELECT user_id, permission_id FROM user_permissions WHERE user_id IN ({inClause})", pars, token)
Models\ScheduledJob.cs:71:        /// <summary>Extra notes/comments.</summary>
ViewModels\SchedulerViewModel.cs:339:            var audits = await _dbService.GetAuditLogForEntityAsync("scheduled_jobs", jobId).ConfigureAwait(false);
Services\ExternalServicerService.cs:10:    /// Includes: CRUD for suppliers, integrations, contact management, and audit logging.
Services\ExternalServicerService.cs:21:        public async Task<List<Supplier>> GetAllAsync() => await _db.GetAllSuppliersAsync();
Services\ExternalServicerService.cs:23:        /// <summary>Returns the supplier by ID (throws if not found to satisfy non-nullable result and avoid CS8603).</summary>
Services\ExternalServicerService.cs:24:        public async Task<Supplier> GetByIdAsync(int id)
Services\ExternalServicerService.cs:27:            if (s == null) throw new KeyNotFoundException($"Supplier #{id} not found.");
Services\ExternalServicerService.cs:31:        public async Task CreateAsync(Supplier supplier)
Services\ExternalServicerService.cs:33:            await _db.InsertOrUpdateSupplierAsync(supplier, false);
Services\ExternalServicerService.cs:36:        public async Task UpdateAsync(Supplier supplier)
Services\ExternalServicerService.cs:38:            await _db.InsertOrUpdateSupplierAsync(supplier, true);
Views\RollbackPreviewPage.xaml.cs:11://        audit trail for Work Orders (work_orders), as per existing pattern
Views\RollbackPreviewPage.xaml.cs:17://      ÔÇó The primary, formally supported rollback flow is for the "work_orders"
Views\RollbackPreviewPage.xaml.cs:43:    /// (GMP/CSV/21 CFR Part 11) for supported entities (currently: <c>work_orders</c>).
Views\RollbackPreviewPage.xaml.cs:157:                    // Re-evaluate signature and permissions whenever selection changes.
Views\RollbackPreviewPage.xaml.cs:266:            /// For now, formally supports <c>work_orders</c> entity (GMP-compliant flow).
Views\RollbackPreviewPage.xaml.cs:273:                CanRollback = hasId && entity == "work_orders";
Views\RollbackPreviewPage.xaml.cs:374:                /// <summary>Entity/table name (e.g., "work_orders").</summary>
Services\DeviationService.cs:15:    /// Service for managing Deviations / Non-Conformances (GMP-compliant).
Services\DeviationService.cs:34:        /// <summary>Gets all deviations (sorted newest first).</summary>
Services\DeviationService.cs:194:        /// Builds a CSV string for the provided deviations.
Services\DatabaseService.Rbac.CoreExtensions.cs:25://   call sites like `_db.GetUserRoleIdsAsync(...)` keep working.
Services\DatabaseService.Rbac.CoreExtensions.cs:52:        /// <c>user_permissions</c> for the given permission <paramref name="permissionCode"/>.
Services\DatabaseService.Rbac.CoreExtensions.cs:62:FROM user_permissions up
Services\DatabaseService.Rbac.CoreExtensions.cs:63:JOIN permissions p ON p.id = up.permission_id
Services\DatabaseService.Rbac.CoreExtensions.cs:88:FROM user_roles
Services\DatabaseService.Rbac.CoreExtensions.cs:110:FROM role_permissions rp
Services\DatabaseService.Rbac.CoreExtensions.cs:111:JOIN permissions p ON p.id = rp.permission_id
Services\DatabaseService.Rbac.CoreExtensions.cs:136:FROM delegated_permissions d
Services\DatabaseService.Rbac.CoreExtensions.cs:137:JOIN permissions p ON p.id = d.permission_id
Services\DatabaseService.Rbac.CoreExtensions.cs:160:FROM user_permissions up
Services\DatabaseService.Rbac.CoreExtensions.cs:161:JOIN permissions p ON p.id = up.permission_id
Services\DatabaseService.Rbac.CoreExtensions.cs:185:FROM role_permissions rp
Services\DatabaseService.Rbac.CoreExtensions.cs:186:JOIN permissions p ON p.id=rp.permission_id
Services\DatabaseService.Rbac.CoreExtensions.cs:209:FROM delegated_permissions d
Services\DatabaseService.Rbac.CoreExtensions.cs:210:JOIN permissions p ON p.id = d.permission_id
Services\DatabaseService.Rbac.CoreExtensions.cs:244:INSERT INTO user_roles (user_id, role_id, granted_by, granted_at, expires_at)
Services\DatabaseService.Rbac.CoreExtensions.cs:288:                "DELETE FROM user_roles WHERE user_id=@uid AND role_id=@rid",
Services\DatabaseService.Rbac.CoreExtensions.cs:319:            var dt = await db.ExecuteSelectAsync("SELECT id FROM permissions WHERE code=@code LIMIT 1",
Services\DatabaseService.Rbac.CoreExtensions.cs:328:                "INSERT INTO permissions (code, name) VALUES (@code,@name)",
Services\DatabaseService.Rbac.CoreExtensions.cs:354:INSERT INTO user_permissions (user_id, permission_id, allowed, reason, granted_by, granted_at, expires_at)
Services\DatabaseService.Rbac.CoreExtensions.cs:401:                "DELETE FROM user_permissions WHERE user_id=@uid AND permission_id=@pid",
Services\DatabaseService.Rbac.CoreExtensions.cs:440:INSERT INTO delegated_permissions (from_user_id, to_user_id, permission_id, expires_at, reason, granted_by)
Services\DatabaseService.Rbac.CoreExtensions.cs:477:UPDATE delegated_permissions
Services\DatabaseService.Rbac.CoreExtensions.cs:486:                    "SELECT to_user_id, permission_id FROM delegated_permissions WHERE id=@id",
Services\DatabaseService.Rbac.CoreExtensions.cs:511:INSERT INTO permission_change_log (user_id, changed_by, change_type, role_id, permission_id, action)
Services\DatabaseService.Rbac.CoreExtensions.cs:513:FROM delegated_permissions WHERE id=@id;",
Services\DatabaseService.Rbac.CoreExtensions.cs:543:INSERT INTO permission_requests (user_id, permission_id, reason, status, requested_at)
Services\DatabaseService.Rbac.CoreExtensions.cs:564:            var dt = await db.ExecuteSelectAsync("SELECT * FROM permission_requests WHERE id=@id",
Services\DatabaseService.Rbac.CoreExtensions.cs:572:UPDATE permission_requests
Services\DatabaseService.Rbac.CoreExtensions.cs:594:            var dt = await db.ExecuteSelectAsync("SELECT * FROM permission_requests WHERE id=@id",
Services\DatabaseService.Rbac.CoreExtensions.cs:602:UPDATE permission_requests
Services\DatabaseService.Rbac.CoreExtensions.cs:630:        /// <summary>Returns all roles. Schema-tolerant mapping.</summary>
Services\DatabaseService.Rbac.CoreExtensions.cs:633:            var dt = await db.ExecuteSelectAsync("SELECT * FROM roles ORDER BY name, id", null, token).ConfigureAwait(false);
Services\DatabaseService.Rbac.CoreExtensions.cs:647:        /// <summary>Returns all permissions. Schema-tolerant mapping.</summary>
Services\DatabaseService.Rbac.CoreExtensions.cs:650:            var dt = await db.ExecuteSelectAsync("SELECT * FROM permissions ORDER BY code, id", null, token).ConfigureAwait(false);
Services\DatabaseService.Rbac.CoreExtensions.cs:669:        /// Back-compat shim so older call sites (e.g., <c>RBACService</c>) can call
Services\DatabaseService.Rbac.CoreExtensions.cs:710:INSERT INTO permission_change_log (user_id, changed_by, change_type, role_id, permission_id, action)
Services\CAPAService.cs:19:    /// Bonus: Partial hooks for multi-signature, attachments, ML/AI analytics, forensic logging.
Services\CAPAService.cs:184:        /// <param name="executionComment">Execution notes/comments.</param>
Services\CAPAService.cs:222:        /// <param name="closureComment">Closure notes/comments.</param>
Services\CAPAService.cs:340:        /// <summary>Partial method called when a CAPA is created (extensible for ML/AI, notifications, attachments, etc.).</summary>
Models\RolePermission.cs:12:    /// ÔÇó Designed for legal traceability, SOD, escalation, and compliance dashboards.
Models\RolePermission.cs:19:    [Table("role_permissions")]
ViewModels\DigitalSignatureViewModel.cs:180:                // Canonical insert method (internally logs to system_event_log):
ViewModels\DeviationViewModel.cs:78:        /// <summary>All deviations.</summary>
ViewModels\DeviationViewModel.cs:79:        public ObservableCollection<Deviation> Deviations
ViewModels\DeviationViewModel.cs:85:        /// <summary>Filtered deviations for the UI.</summary>
ViewModels\DeviationViewModel.cs:131:        /// <summary>Loads deviations from the database.</summary>
ViewModels\DeviationViewModel.cs:145:        /// <summary>Exports the filtered list of deviations.</summary>
ViewModels\DeviationViewModel.cs:155:        /// Loads all deviations using the canonical DB method (<c>GetAllDeviationsAsync</c>),
ViewModels\DeviationViewModel.cs:163:                var deviations = await _dbService.GetAllDeviationsAsync().ConfigureAwait(false);
ViewModels\DeviationViewModel.cs:164:                Deviations = new ObservableCollection<Deviation>(deviations);
ViewModels\DeviationViewModel.cs:166:                StatusMessage = $"Loaded {Deviations.Count} record(s).";
ViewModels\DeviationViewModel.cs:170:                StatusMessage = $"Error loading deviations: {ex.Message}";
ViewModels\DeviationViewModel.cs:183:            var q = Deviations.AsEnumerable();
ViewModels\DeviationViewModel.cs:401:                    tableName: "deviations",
ViewModels\DeviationViewModel.cs:405:                    note: "Deviations export"
ViewModels\DeviationViewModel.cs:412:                    tableName: "deviations",
ViewModels\DeviationViewModel.cs:415:                    description: $"Exported {FilteredDeviations.Count} deviations to {path}",
ViewModels\DeviationViewModel.cs:422:                StatusMessage = "Deviations exported.";
Services\Interfaces\ICalibrationService.cs:16:        /// Gets all calibrations.
Services\Interfaces\ICalibrationService.cs:18:        /// <returns>List of calibrations.</returns>
Services\Interfaces\ICalibrationService.cs:27:        /// Gets calibrations for a given component.
Services\Interfaces\ICalibrationService.cs:32:        /// Gets calibrations for a supplier.
Services\Interfaces\ICalibrationService.cs:37:        /// Gets calibrations within a date range.
Services\Interfaces\ICalibrationService.cs:42:        /// Gets calibrations that are overdue.
Services\PartService.cs:11:    /// <b>PartService</b> ÔÇô GMP/CSV compliant servis za upravljanje rezervnim dijelovima (Parts).
Services\PartService.cs:145:                       ?? part.SupplierPrices[0]?.Supplier?.Name
Services\ExportService.cs:28:    /// Exports calibrations and audit logs to Excel/PDF with audit logging.
Services\ExportService.cs:49:            _exportRoot = Path.Combine(FileSystem.Current.AppDataDirectory, "Exports", "Calibrations");
Services\ExportService.cs:62:        public Task ExportCalibrationsToExcel(ObservableCollection<Calibration> calibrations)
Services\ExportService.cs:63:            => ExportToExcelAsync(calibrations);
Services\ExportService.cs:66:        public Task ExportCalibrationsToPdf(ObservableCollection<Calibration> calibrations)
Services\ExportService.cs:67:            => ExportToPdfAsync(calibrations);
Services\ExportService.cs:70:        /// Exports calibrations to an Excel file and logs the action.
Services\ExportService.cs:72:        /// <param name="calibrations">Rows to export (null-safe).</param>
Services\ExportService.cs:75:        public async Task<string> ExportToExcelAsync(IEnumerable<Calibration> calibrations, string filterUsed = "")
Services\ExportService.cs:95:                foreach (var c in (calibrations ?? Array.Empty<Calibration>()))
Services\ExportService.cs:98:                    string supplier  = c?.Supplier?.Name ?? "-";
Services\ExportService.cs:105:                    ws.Cells[row, 3].Value = supplier;
Services\ExportService.cs:132:        /// Exports calibrations to a PDF file and logs the action.
Services\ExportService.cs:134:        /// <param name="calibrations">Rows to export (null-safe).</param>
Services\ExportService.cs:137:        public async Task<string> ExportToPdfAsync(IEnumerable<Calibration> calibrations, string filterUsed = "")
Services\ExportService.cs:166:            foreach (var c in (calibrations ?? Array.Empty<Calibration>()))
Services\ExportService.cs:169:                string supplier  = c?.Supplier?.Name ?? "-";
Services\ExportService.cs:177:                table.AddCell(new ITextCell().Add(new Paragraph(supplier).SetFont(fontRegular)));
Models\Role.cs:21:    [Table("roles")]
Models\Role.cs:63:        /// <summary>Regulatory tags (CSV/GMP/21CFR11) for dashboards, inspection, and reporting.</summary>
Models\Role.cs:71:        /// <summary>Permissions assigned to this role (many-to-many via role_permissions).</summary>
Models\Role.cs:73:        public virtual ICollection<Permission> Permissions { get; set; } = new List<Permission>();
Models\Role.cs:75:        /// <summary>Users with this role (many-to-many via user_roles).</summary>
Models\Role.cs:77:        public virtual ICollection<User> Users { get; set; } = new List<User>();
Services\Interfaces\IRBACService.cs:19:        // ---- User Ôćö Roles ----
Services\Interfaces\IRBACService.cs:25:        // ---- User Ôćö Permissions (direct) ----
Services\Interfaces\IRBACService.cs:43:        // ---- Roles CRUD (for Admin UI) ----
ViewModels\ChangeControlViewModel.cs:141:                var controls = await _dbService.ExecuteSelectAsync("SELECT * FROM change_controls").ConfigureAwait(false);
ViewModels\ChangeControlViewModel.cs:194:                    "INSERT INTO change_controls (code, title, description, status, requested_by_id, date_requested) VALUES (@code, @title, @desc, @status, @rbid, @dt)",
ViewModels\ChangeControlViewModel.cs:225:                    "UPDATE change_controls SET status=@status WHERE id=@id",
ViewModels\ChangeControlViewModel.cs:269:                    "UPDATE change_controls SET status=@status WHERE id=@id",
ViewModels\ChangeControlViewModel.cs:296:                    "UPDATE change_controls SET status=@status WHERE id=@id",
Services\Interfaces\ICAPAService.cs:95:        /// <param name="closureComment">Closure comments.</param>
ViewModels\MainPageViewModel.cs:24:        /// <summary>Komanda za dijelove (Parts).</summary>
ViewModels\MainPageViewModel.cs:81:        /// Otvara ekran za dijelove (Parts).
Services\Interfaces\ICapaAuditService.cs:12:    /// <para>Ôťö Supports forensic data, digital signatures, and advanced queries for inspections.</para>
ViewModels\DashboardViewModel.cs:16:    /// Ôťů Live KPI/statistics: overdue, in-progress, critical, compliance, calibration, CAPA, assets, users.
ViewModels\RiskAssessmentViewModel.cs:142:        public string[] AvailableCategories => new[] { "process","equipment","supplier","IT","product","validation","other" };
ViewModels\RiskAssessmentViewModel.cs:216:                    Attachments = new(),
ViewModels\RiskAssessmentViewModel.cs:407:            var audits = await _dbService.GetAuditLogForEntityAsync("risk_assessments", riskAssessmentId);
ViewModels\CAPAWorkflowViewModel.cs:36:        // Session context (nullable in storage; coalesce at use sites)
ViewModels\CAPAWorkflowViewModel.cs:119:        public string[] AvailableTypes => new[] { "corrective", "preventive", "supplier", "internal", "external" };
ViewModels\CAPAWorkflowViewModel.cs:403:                Attachments = cc.Attachments ?? new List<string>(),
ViewModels\CAPAWorkflowViewModel.cs:431:                Attachments = capa.Attachments ?? new List<string>(),
Services\Interfaces\IValidationAuditService.cs:9:    /// <para>Ôťö Ensures traceability of every action related to validations (create, update, execute, delete).</para>
Services\Interfaces\ISupplierAuditService.cs:7:    /// Interface for GMP-compliant audit service for Supplier actions.
ViewModels\ContractorInterventionViewModel.cs:17:    /// Ultra-robust ViewModel for contractor/servicer interventions (outsourced maintenance, calibrations, etc).
ViewModels\ContractorInterventionViewModel.cs:380:            var dtos   = await _dbService.GetAuditLogForEntityAsync("contractor_interventions", interventionId).ConfigureAwait(false)
Services\Interfaces\IUserService.cs:44:        /// <summary>Returns all users (authorization is implementation-specific).</summary>
Services\Interfaces\IUserService.cs:71:        // === ROLE, PERMISSIONS, PROFILE ===
ViewModels\AttachmentViewModel.cs:18:    /// <b>AttachmentViewModel</b> ÔÇô GMP/Annex 11/21 CFR Part 11 ViewModel for managing attachments.
ViewModels\AttachmentViewModel.cs:65:        /// <summary>All currently loaded attachments (raw list from the database).</summary>
ViewModels\AttachmentViewModel.cs:66:        public ObservableCollection<Attachment> Attachments
ViewModels\AttachmentViewModel.cs:72:        /// <summary>Filtered view over <see cref="Attachments"/> for the UI.</summary>
ViewModels\AttachmentViewModel.cs:142:        /// Loads attachments using server-side filtering (entity, type, search) and updates the filtered view.
ViewModels\AttachmentViewModel.cs:157:                Attachments = new ObservableCollection<Attachment>(list);
ViewModels\AttachmentViewModel.cs:159:                StatusMessage = $"Loaded {Attachments.Count} attachments.";
ViewModels\AttachmentViewModel.cs:163:                StatusMessage = $"Error loading attachments: {ex.Message}";
ViewModels\AttachmentViewModel.cs:191:                var relatedTable = string.IsNullOrWhiteSpace(EntityFilter) ? "attachments" : EntityFilter!;
ViewModels\AttachmentViewModel.cs:332:        /// Logs an export of the current filtered set of attachments.
ViewModels\AttachmentViewModel.cs:349:                    tableName: "attachments",
ViewModels\AttachmentViewModel.cs:353:                    note: "Attachments export").ConfigureAwait(false);
ViewModels\AttachmentViewModel.cs:355:                StatusMessage = $"Attachments export logged: {exportPath}.";
ViewModels\AttachmentViewModel.cs:365:        /// Applies client-side filters on <see cref="Attachments"/> into <see cref="FilteredAttachments"/>.
ViewModels\AttachmentViewModel.cs:369:            var filtered = Attachments.Where(a =>
ViewModels\AttachmentViewModel.cs:381:        /// Returns <c>true</c> if the current user has permission to manage attachments.
ViewModels\CapaCaseViewModel.cs:136:        /// <summary>Maps status to a recommended HEX color for quick UI tags.</summary>
ViewModels\CapaCaseViewModel.cs:520:            var auditDtos = await _dbService.GetAuditLogForEntityAsync("capa_cases", capaCaseId).ConfigureAwait(false)
Models\RiskAssessment.cs:12:    /// mitigation/action plan, owner/approval workflow, attachments and workflow history.<br/>
Models\RiskAssessment.cs:38:        /// <summary>Category of risk (process, equipment, supplier, IT, product, validation, other).</summary>
Models\RiskAssessment.cs:123:        /// <summary>Attachments (file paths/URIs). Keep simple string paths for portability.</summary>
Models\RiskAssessment.cs:125:        public List<string> Attachments { get; set; } = new();
Models\RiskAssessment.cs:148:        public List<DocumentControl> Documents { get; set; } = new();
ViewModels\CalibrationsViewModel.cs:30:        /// <summary>Backing store for all calibrations (source for filtering and analytics).</summary>
ViewModels\CalibrationsViewModel.cs:36:        /// <summary>Current list of suppliers for lookups.</summary>
ViewModels\CalibrationsViewModel.cs:37:        public List<Supplier> Suppliers { get; private set; } = new();
ViewModels\CalibrationsViewModel.cs:39:        /// <summary>Current list of users for lookups.</summary>
ViewModels\CalibrationsViewModel.cs:40:        public List<User> Users { get; private set; } = new();
ViewModels\CalibrationsViewModel.cs:47:        private Supplier? _supplierFilter;
ViewModels\CalibrationsViewModel.cs:56:        /// <summary>All calibrations for display. Bind this to the grid/list.</summary>
ViewModels\CalibrationsViewModel.cs:57:        public ObservableCollection<Calibration> Calibrations { get; } = new();
ViewModels\CalibrationsViewModel.cs:59:        /// <summary>Filtered calibrations bound to the UI.</summary>
ViewModels\CalibrationsViewModel.cs:105:        /// <summary>Supplier filter (by supplier/lab).</summary>
ViewModels\CalibrationsViewModel.cs:106:        public Supplier? SupplierFilter
ViewModels\CalibrationsViewModel.cs:112:        /// <summary>Due before filter (only calibrations due before this date).</summary>
ViewModels\CalibrationsViewModel.cs:140:        /// <summary>Total calibrations in the current view.</summary>
ViewModels\CalibrationsViewModel.cs:143:        /// <summary>Number of overdue calibrations.</summary>
ViewModels\CalibrationsViewModel.cs:146:        /// <summary>Number of calibrations due within 30 days.</summary>
ViewModels\CalibrationsViewModel.cs:149:        /// <summary>Number of rejected calibrations.</summary>
ViewModels\CalibrationsViewModel.cs:156:        /// <summary>Load all (lookups + calibrations).</summary>
ViewModels\CalibrationsViewModel.cs:219:        /// <summary>Loads all lookups and calibrations.</summary>
ViewModels\CalibrationsViewModel.cs:238:        /// <summary>Loads components, suppliers, and users for lookups.</summary>
ViewModels\CalibrationsViewModel.cs:242:            Suppliers  = (await _dbService.GetAllSuppliersAsync().ConfigureAwait(false))  ?? new List<Supplier>();
ViewModels\CalibrationsViewModel.cs:243:            Users      = (await _dbService.GetAllUsersAsync().ConfigureAwait(false))      ?? new List<User>();
ViewModels\CalibrationsViewModel.cs:246:        /// <summary>Loads all calibrations from the database (ordered, robust).</summary>
ViewModels\CalibrationsViewModel.cs:255:                await MainThread.InvokeOnMainThreadAsync(() => Calibrations.Clear());
ViewModels\CalibrationsViewModel.cs:258:                    .ExecuteSelectAsync("SELECT * FROM calibrations ORDER BY calibration_date DESC")
ViewModels\CalibrationsViewModel.cs:284:                await _auditService.LogCalibrationAuditAsync(0, "LOAD", $"Loaded {_allCalibrations.Count} calibrations").ConfigureAwait(false);
ViewModels\CalibrationsViewModel.cs:285:                StatusMessage = $"Loaded {_allCalibrations.Count} calibrations.";
ViewModels\CalibrationsViewModel.cs:289:                StatusMessage = $"Error loading calibrations: {ex.Message}";
ViewModels\CalibrationsViewModel.cs:310:                await _dbService.ExecuteNonQueryAsync("DELETE FROM calibrations WHERE id=@id", pars).ConfigureAwait(false);
ViewModels\CalibrationsViewModel.cs:317:                    Calibrations.Remove(toRemove);
ViewModels\CalibrationsViewModel.cs:340:        /// <para>Signature: <c>(isEdit, model, components, suppliers)</c></para>
ViewModels\CalibrationsViewModel.cs:342:        public event Action<bool, Calibration, List<MachineComponent>, List<Supplier>>? EditCalibrationRequested;
ViewModels\CalibrationsViewModel.cs:354:            EditCalibrationRequested?.Invoke(false, newCalibration, Components, Suppliers);
ViewModels\CalibrationsViewModel.cs:377:            EditCalibrationRequested?.Invoke(true, editCal, Components, Suppliers);
ViewModels\CalibrationsViewModel.cs:384:        /// <summary>Exports the currently filtered calibrations to Excel with auditing.</summary>
ViewModels\CalibrationsViewModel.cs:400:        /// <summary>Exports the currently filtered calibrations to PDF with auditing.</summary>
ViewModels\CalibrationsViewModel.cs:461:                StatusMessage = $"Filtered: {FilteredCalibrations.Count} calibrations shown.";
ViewModels\CalibrationsViewModel.cs:488:            $"query='{SearchTerm}', status={StatusFilter}, component={ComponentFilter?.Name}, supplier={SupplierFilter?.Name}, dueBefore={DueBeforeFilter?.ToString("yyyy-MM-dd")}";
ViewModels\ComponentViewModel.cs:101:        /// Search term (component name, code, supplier, etc).
ViewModels\ComponentViewModel.cs:314:                    (c.Supplier?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false)) &&
ViewModels\InspectionViewModel.cs:7:    /// ViewModel za Inspections ÔÇô GMP, HALMED, interne i druge inspekcije.
ViewModels\InspectionViewModel.cs:11:        public ObservableCollection<Inspection> Inspections { get; set; } = new ObservableCollection<Inspection>();
ViewModels\CalibrationEditDialogViewModel.cs:14:    /// <b>CalibrationEditDialogViewModel</b> ÔÇô ViewModel for adding/editing calibrations
ViewModels\CalibrationEditDialogViewModel.cs:25:        /// <param name="suppliers">All available suppliers (nullable allowed; replaced by empty list).</param>
ViewModels\CalibrationEditDialogViewModel.cs:30:            List<Supplier>? suppliers)
ViewModels\CalibrationEditDialogViewModel.cs:34:            Suppliers   = suppliers  ?? new List<Supplier>();
ViewModels\CalibrationEditDialogViewModel.cs:38:            _selectedSupplier  = Suppliers.FirstOrDefault(s => s.Id == Calibration.SupplierId);
ViewModels\CalibrationEditDialogViewModel.cs:63:        /// Gets the list of all available suppliers for the picker binding.
ViewModels\CalibrationEditDialogViewModel.cs:65:        public List<Supplier> Suppliers { get; }
ViewModels\CalibrationEditDialogViewModel.cs:87:        private Supplier? _selectedSupplier;
ViewModels\CalibrationEditDialogViewModel.cs:89:        /// Gets or sets the currently selected supplier in the dialog.
ViewModels\CalibrationEditDialogViewModel.cs:93:        public Supplier? SelectedSupplier
ViewModels\MachineViewModel.cs:87:        public ObservableCollection<Machine> Machines
ViewModels\MachineViewModel.cs:163:                var machines = await _dbService.GetAllMachinesAsync(includeAudit: true);
ViewModels\MachineViewModel.cs:164:                Machines = new ObservableCollection<Machine>(machines ?? Enumerable.Empty<Machine>());
ViewModels\MachineViewModel.cs:166:                StatusMessage = $"Loaded {Machines.Count} machines.";
ViewModels\MachineViewModel.cs:170:                StatusMessage = $"Error loading machines: {ex.Message}";
ViewModels\MachineViewModel.cs:323:                    note: "Machines export from view model.",
ViewModels\MachineViewModel.cs:328:                StatusMessage = "Machines exported successfully.";
ViewModels\MachineViewModel.cs:340:            var filtered = Machines.Where(m =>
ViewModels\MachineViewModel.cs:353:            var audits = await _dbService.GetAuditLogForEntityAsync("machines", machineId);
ViewModels\PartsStockViewModel.cs:12:        public ObservableCollection<Part> Parts { get; set; } = new ObservableCollection<Part>();
ViewModels\PartsStockViewModel.cs:13:        public ObservableCollection<Warehouse> Warehouses { get; set; } = new ObservableCollection<Warehouse>();
ViewModels\PartViewModel.cs:90:        /// Gets or sets the complete list of parts retrieved from the database.
ViewModels\PartViewModel.cs:92:        public ObservableCollection<Part> Parts
ViewModels\PartViewModel.cs:99:        /// Gets or sets the filtered view of <see cref="Parts"/> for UI binding.
ViewModels\PartViewModel.cs:186:        /// Gets a value indicating whether the current user can edit parts (admin / superadmin).
ViewModels\PartViewModel.cs:194:        /// <summary>Command: Loads all parts from the database.</summary>
ViewModels\PartViewModel.cs:209:        /// <summary>Command: Exports the filtered list of parts.</summary>
ViewModels\PartViewModel.cs:220:        /// Asynchronously loads all parts and applies current filters.
ViewModels\PartViewModel.cs:228:                var parts = await _dbService.GetAllPartsAsync();
ViewModels\PartViewModel.cs:229:                Parts = new ObservableCollection<Part>(parts ?? Enumerable.Empty<Part>());
ViewModels\PartViewModel.cs:231:                StatusMessage = $"Loaded {Parts.Count} parts.";
ViewModels\PartViewModel.cs:235:                StatusMessage = $"Error loading parts: {ex.Message}";
ViewModels\PartViewModel.cs:346:                StatusMessage = "Parts exported successfully.";
ViewModels\PartViewModel.cs:356:        /// Applies <see cref="SearchTerm"/>, <see cref="CategoryFilter"/>, and <see cref="StatusFilter"/> to <see cref="Parts"/>.
ViewModels\PartViewModel.cs:360:            var filtered = Parts.Where(p =>
ViewModels\PartViewModel.cs:379:            var audits = await _dbService.GetAuditLogForEntityAsync("parts", partId);
ViewModels\AuditLogViewModel.cs:33:    /// <c>system_event_log</c> entries (audit/system events).
ViewModels\AuditLogViewModel.cs:35:    /// Data source: DatabaseService.GetSystemEventsAsync (system_event_log-backed extension method).
ViewModels\AuditLogViewModel.cs:108:        /// <summary>Entity/table filter (e.g., "work_orders").</summary>
ViewModels\AuditLogViewModel.cs:198:                // Call DatabaseService (system_event_log-backed)
ViewModels\NotificationViewModel.cs:121:        /// <summary>Entity filter (e.g., work_orders, incidents, calibrations).</summary>
ViewModels\NotificationViewModel.cs:152:        /// <summary>True for admin/superadmin/QA users.</summary>
Models\Report.cs:9:    /// GMP/CSV/21 CFR Part 11/ISO/AI ready: includes forensic chain, versioning, filter params, signature, attachments, ML, regulatory links.
Models\Report.cs:75:        public List<string> Attachments { get; set; } = new();
ViewModels\PpmViewModel.cs:230:        // You can add properties here for attachments popup, audit trail, digital signature state, etc.
Views\AdminPanelPage.xaml.cs:10:    /// AdminPanelPage ÔÇö Central administration console with Users, RBAC, System, and Tools tabs.
Views\AdminPanelPage.xaml.cs:44:        /// <summary>Open the Users page via Shell route.</summary>
Views\AdminPanelPage.xaml.cs:49:                await Shell.Current.GoToAsync("routes/users").ConfigureAwait(false);
Views\MainPage.xaml:32:          <Button Text="Dijelovi (Parts)"         Command="{Binding OpenPartsCommand}"      />
ViewModels\ExternalContractorViewModel.cs:429:            var audits = await _dbService.GetAuditLogForEntityAsync("external_contractors", contractorId);
ViewModels\IncidentReportViewModel.cs:44:        // (coalesce to empty strings to satisfy non-nullable call sites)
ViewModels\IncidentReportViewModel.cs:491:        /// The DB service writes an export_print_log entry and a system event (IR_EXPORT).
Models\QualityEvent.cs:7:    /// <b>QualityEvent</b> ÔÇô Comprehensive GMP/CMMS record of all quality-related events (deviations, complaints, recalls, OOS, change control, audit, training, etc).
Models\QualityEvent.cs:10:    /// Ôťů Fully supports attachments, signatures, cross-linking to machines/components, and workflow.
Views\ComponentsPage.xaml.cs:5://      Pregled/unos/ure─Ĺivanje/brisanje strojnih komponenti (machine_components) ÔÇô MySQL.
Views\ComponentsPage.xaml.cs:7://      ÔÇó Poravnato s YASGMP.sql tablicom 'machine_components' (sop_doc, nullable machine_id)
Views\ComponentsPage.xaml.cs:24:    /// <b>ComponentsPage</b> ÔÇô pregled, unos, ure─Ĺivanje i brisanje komponenti strojeva (tablica <c>machine_components</c>).
Views\ComponentsPage.xaml.cs:73:FROM machine_components
Views\ComponentsPage.xaml.cs:125:INSERT INTO machine_components (machine_id, code, name, type, sop_doc, status, install_date)
Views\ComponentsPage.xaml.cs:179:UPDATE machine_components SET
Views\ComponentsPage.xaml.cs:221:                const string sql = @"UPDATE machine_components SET is_deleted=1, deleted_at=NOW() WHERE id=@id;";
Views\AuditLogPage.xaml:5:  Data source: system_event_log (via DatabaseService.GetSystemEventsAsync).
Views\AdminPanelPage.xaml:4:  Purpose: Admin console with Users, RBAC, System, Tools ÔÇö stock MAUI TabbedPage.
Views\AdminPanelPage.xaml:16:    <ToolbarItem Text="Users"
Views\AdminPanelPage.xaml:83:  <!-- ===================== Users ===================== -->
Views\AdminPanelPage.xaml:84:  <ContentPage Title="Users" ControlTemplate="{StaticResource AdminHeaderTemplate}">
Views\AdminPanelPage.xaml:101:        <!-- Users grid -->
Views\AdminPanelPage.xaml:120:                            ItemsSource="{Binding Users}"
Views\AdminPanelPage.xaml:174:                <Button Grid.Column="3" Text="Export Users"
Views\AdminPanelPage.xaml:202:        <!-- ROLES: CRUD -->
Views\AdminPanelPage.xaml:205:            <Label Text="Roles" FontAttributes="Bold" />
Views\AdminPanelPage.xaml:208:                     Placeholder="Filter roles (code/name)"
Views\AdminPanelPage.xaml:218:                              ItemsSource="{Binding Roles}"
Views\AdminPanelPage.xaml:249:        <!-- ROLE Ôćö PERMISSIONS -->
Views\AdminPanelPage.xaml:252:            <Label Text="Role Permissions" FontAttributes="Bold" />
Views\AdminPanelPage.xaml:254:              <Label Grid.Row="0" Grid.Column="0" Text="Available permissions" />
Views\AdminPanelPage.xaml:302:        <!-- USER Ôćö ROLES -->
Views\AdminPanelPage.xaml:305:            <Label Text="User Ôćö Roles" FontAttributes="Bold" />
Views\AdminPanelPage.xaml:307:              <Label Grid.Row="0" Grid.Column="0" Text="Available roles" />
ViewModels\DocumentControlViewModel.cs:579:            var audits = await _dbService.GetAuditLogForEntityAsync("sop_documents", documentId).ConfigureAwait(false)
Views\Debug\DebugDashboardPage.xaml.cs:35:            // No RBAC gate while app is in development; pages are visible for all users
Views\PartsPage.xaml.cs:5://      Pregled/unos/ure─Ĺivanje/brisanje rezervnih dijelova (Parts) uz MySQL backend.
Views\PartsPage.xaml.cs:26:    /// <b>PartsPage</b> ÔÇô pregled, unos, ure─Ĺivanje i brisanje rezervnih dijelova (Parts).
Views\PartsPage.xaml.cs:34:        public ObservableCollection<Part> Parts { get; } = new();
Views\PartsPage.xaml.cs:80:        /// U─Źitava sve dijelove iz baze i a┼żurira kolekciju <see cref="Parts"/> na glavnoj niti.
Views\PartsPage.xaml.cs:86:                const string sql = @"SELECT id, code, name, supplier, price, stock, location, image FROM parts";
Views\PartsPage.xaml.cs:98:                        Supplier = row["supplier"] == DBNull.Value ? null : row["supplier"]?.ToString(),
Views\PartsPage.xaml.cs:109:                    Parts.Clear();
Views\PartsPage.xaml.cs:111:                        Parts.Add(p);
Views\PartsPage.xaml.cs:131:                const string sql = @"INSERT INTO parts (code, name, supplier, price, stock, location, image)
Views\PartsPage.xaml.cs:132:                                     VALUES (@code, @name, @supplier, @price, @stock, @location, @image)";
Views\PartsPage.xaml.cs:137:                    new MySqlParameter("@supplier", (object?)newPart.Supplier ?? DBNull.Value),
Views\PartsPage.xaml.cs:171:                    Supplier = selected.Supplier,
Views\PartsPage.xaml.cs:181:                const string sql = @"UPDATE parts SET 
Views\PartsPage.xaml.cs:182:                                        code=@code, name=@name, supplier=@supplier, 
Views\PartsPage.xaml.cs:189:                    new MySqlParameter("@supplier", (object?)partToEdit.Supplier ?? DBNull.Value),
Views\PartsPage.xaml.cs:222:                const string sql = "DELETE FROM parts WHERE id=@id";
Views\PartsPage.xaml.cs:255:            var supplier = await PromptAsync(title, "Dobavlja─Ź:", part.Supplier);
Views\PartsPage.xaml.cs:256:            if (supplier is null) return false;
Views\PartsPage.xaml.cs:257:            part.Supplier = supplier;
Views\Dialogs\CapaEditDialog.xaml:31:                        ItemsSource="{Binding Users}"
Models\Qualification.cs:9:    /// <b>Qualification</b> ÔÇô Ultra-robust GMP/CMMS qualification record (IQ, OQ, PQ, Supplier, Component, Requalification, etc.)
Models\Qualification.cs:13:    /// Ôťů Forensically links to equipment, users, suppliers, documents, and change events.
Models\Qualification.cs:29:        /// <summary>Type of qualification (IQ, OQ, PQ, Supplier, Component, Requalification, etc.).</summary>
Models\Qualification.cs:67:        /// <summary>Supplier qualified (FK, optional).</summary>
Models\Qualification.cs:72:        public Supplier? Supplier { get; set; }
Models\Qualification.cs:104:        public List<DocumentControl> Documents { get; set; } = new List<DocumentControl>();
Models\Qualification.cs:132:        public string EquipmentName => Machine?.Name ?? Component?.Name ?? Supplier?.Name ?? string.Empty;
Models\Qualification.cs:155:                Supplier = Supplier,
Models\Qualification.cs:163:                Documents = new List<DocumentControl>(Documents ?? new()),
Views\DashboardPage.xaml.cs:25:            public const string Machines   = "routes/machines";
Views\DashboardPage.xaml.cs:26:            public const string Parts      = "routes/parts";
Views\DashboardPage.xaml.cs:121:        private async void OnMachinesClicked(object sender, EventArgs e)   => await NavigateToRouteAsync(AppRoutes.Machines);
Views\DashboardPage.xaml.cs:122:        private async void OnPartsClicked(object sender, EventArgs e)      => await NavigateToRouteAsync(AppRoutes.Parts);
Views\Dialogs\CalibrationEditDialog.xaml.cs:40:        /// <param name="suppliers">Lookup: suppliers.</param>
Views\Dialogs\CalibrationEditDialog.xaml.cs:45:            List<Supplier> suppliers) : this()
Views\Dialogs\CalibrationEditDialog.xaml.cs:49:            if (suppliers  is null) throw new ArgumentNullException(nameof(suppliers));
Views\Dialogs\CalibrationEditDialog.xaml.cs:51:            var vm = new CalibrationEditDialogViewModel(calibration, components, suppliers);
Views\PartsPage.xaml:4:  Purpose: YASTECH-themed UI for Parts inventory (MySQL-backed).
Views\PartsPage.xaml:56:                          ItemsSource="{Binding Parts}"
Views\PartsPage.xaml:77:                    <Label Text="{Binding Supplier}"
Views\Dialogs\CalibrationEditDialog.xaml:23:                ItemsSource="{Binding Suppliers}"
Models\PartSupplierPrice.cs:7:    /// <b>PartSupplierPrice</b> ÔÇô Super ultra mega robust price and contract record for a supplier-part relationship.
Models\PartSupplierPrice.cs:25:        /// <summary>FK to the supplier (Supplier).</summary>
Models\PartSupplierPrice.cs:28:        public Supplier? Supplier { get; set; }
Models\PartSupplierPrice.cs:30:        /// <summary>Supplier name (snapshot for history/report even if deleted/renamed).</summary>
Models\PartSupplierPrice.cs:50:        /// <summary>Region/country for this supplier price (for localization, export control).</summary>
Models\PartSupplierPrice.cs:115:            return $"Supplier: {SupplierName ?? Supplier?.Name} | {UnitPrice} {Currency} (Valid: {ValidFrom?.ToShortDateString()} - {ValidUntil?.ToShortDateString()})";
Views\MachinesPage.xaml:43:                          ItemsSource="{Binding Machines}"
Views\Dialogs\WorkOrderEditDialog.xaml:42:                        ItemsSource="{Binding Machines}"
Views\Dialogs\WorkOrderEditDialog.xaml:50:                        ItemsSource="{Binding Users}"
Models\NotificationLog.cs:56:        public List<Attachment> Attachments { get; set; } = new();
Models\NotificationLog.cs:109:                Attachments = new List<Attachment>(this.Attachments.ConvertAll(a => a.DeepCopy())),
Views\MachinesPage.xaml.cs:30:        public ObservableCollection<Machine> Machines { get; } = new();
Views\MachinesPage.xaml.cs:62:                                     FROM machines";
Views\MachinesPage.xaml.cs:86:                    Machines.Clear();
Views\MachinesPage.xaml.cs:88:                        Machines.Add(m);
Views\MachinesPage.xaml.cs:110:INSERT INTO machines (code, name, manufacturer, location, install_date, urs_doc, status, qr_code)
Views\MachinesPage.xaml.cs:164:UPDATE machines SET 
Views\MachinesPage.xaml.cs:206:                const string sql = "DELETE FROM machines WHERE id=@id";
Models\Notification.cs:15:    /// and supports attachments. Designed to work across in-app, email, SMS, push, Teams, webhooks, etc.
Models\Notification.cs:180:        // === Attachments ===
Models\Notification.cs:183:        /// Attachments associated with the notification (schema tolerant).
Models\Notification.cs:185:        public List<Attachment> Attachments { get; set; } = new();
Models\Notification.cs:190:        /// Creates a deep copy of this notification object, including attachments list.
Models\Notification.cs:219:                Attachments = new List<Attachment>(this.Attachments ?? new List<Attachment>())
Models\ProductRecallLog.cs:9:    /// Tracks every regulatory, root-cause, traceability, and closure step. Digital signature, attachments, chain-of-custody, inspector audit, AI/ML ready.
Models\ProductRecallLog.cs:55:        public List<string> Attachments { get; set; } = new();
Views\CalibrationsPage.xaml.cs:23:        public ObservableCollection<Calibration> Calibrations { get; } = new();
Views\CalibrationsPage.xaml.cs:30:        private List<Supplier> _suppliers = new();
Views\CalibrationsPage.xaml.cs:70:            _suppliers  = await _dbService.GetAllSuppliersAsync().ConfigureAwait(false)  ?? new List<Supplier>();
Views\CalibrationsPage.xaml.cs:81:                    .ExecuteSelectAsync("SELECT * FROM calibrations ORDER BY calibration_date DESC")
Views\CalibrationsPage.xaml.cs:162:                Calibrations.Clear();
Views\CalibrationsPage.xaml.cs:164:                    Calibrations.Add(item);
Views\CalibrationsPage.xaml.cs:214:                const string sql = @"INSERT INTO calibrations
Views\CalibrationsPage.xaml.cs:265:                const string sql = @"UPDATE calibrations SET
Views\CalibrationsPage.xaml.cs:304:            await _exportService.ExportToExcelAsync(Calibrations.ToList()).ConfigureAwait(false);
Views\CalibrationsPage.xaml.cs:315:            await _exportService.ExportToPdfAsync(Calibrations.ToList()).ConfigureAwait(false);
Views\CalibrationsPage.xaml.cs:333:                tableName: "calibrations",
Models\Permission.cs:14:    /// ÔÇó Supports compliance dashboards, risk analysis, audit, change tracking, and inspector reporting.
Models\Permission.cs:17:    /// - Maps to roles via <see cref="RolePermission"/>.<br/>
Models\Permission.cs:19:    /// - Add new permissions here and sync your UI, logic, and reporting modules.
Models\Permission.cs:22:    [Table("permissions")]
Models\Permission.cs:65:        /// Permission group/category (for UI, dashboards, regulatory grouping).
Models\Permission.cs:86:        /// List of child permissions (for UI tree, inheritance, export).
Models\Permission.cs:91:        /// Regulatory tags (e.g., "GMP;CSV;Annex 11;FDA", for dashboards/inspections).
Models\Permission.cs:178:        /// Roles that include this permission (many-to-many via role_permissions).
Models\Permission.cs:180:        public virtual ICollection<Role> Roles { get; set; } = new List<Role>();
Models\Permission.cs:183:        /// User-specific permission overrides (many-to-many via user_permissions).
Models\Permission.cs:185:        public virtual ICollection<User> Users { get; set; } = new List<User>();
Models\Permission.cs:198:        /// Delegated permissions involving this permission.
Models\Part.cs:10:    /// ÔÇó Full audit, digital signatures, multi-supplier, price history, attachments<br/>
Models\Part.cs:12:    /// ÔÇó Linked to warehouses, work orders, change logs, regulatory notes
Models\Part.cs:15:    /// Includes legacy-compat properties (<see cref="Supplier"/>, <see cref="Image"/>, <see cref="Description"/>, <see cref="Category"/>)
Models\Part.cs:59:        /// <summary>Default supplier (FK).</summary>
Models\Part.cs:62:        /// <summary>Navigation to default supplier (optional).</summary>
Models\Part.cs:63:        public Supplier? DefaultSupplier { get; set; }
Models\Part.cs:65:        /// <summary>Supplier price history and suppliers linked to this part.</summary>
Models\Part.cs:72:        /// <summary>Total quantity on hand (across warehouses).</summary>
Models\Part.cs:145:        /// <summary>List of warehouses this part is registered in.</summary>
Models\Part.cs:146:        public List<Warehouse> Warehouses { get; set; } = new();
Models\Part.cs:148:        /// <summary>Inspector/ML notes, alerts, or comments.</summary>
Models\Part.cs:156:        /// <b>Legacy/UI compat:</b> Free-text supplier name for simple grids/forms.
Models\Part.cs:157:        /// When using relational suppliers, keep this as a denormalized display value (e.g., from <see cref="DefaultSupplier"/> or <see cref="SupplierPrices"/>).
Models\Part.cs:160:        public string? Supplier { get; set; }
Models\Part.cs:171:        /// <summary>Main supplier name resolved from <see cref="DefaultSupplier"/> or first <see cref="SupplierPrices"/> row.</summary>
Models\Part.cs:174:            (SupplierPrices.Count > 0 ? (SupplierPrices[0].SupplierName ?? SupplierPrices[0].Supplier?.Name) : null) ??
Models\Part.cs:175:            Supplier;
Views\CalibrationsPage.xaml:67:            <CollectionView ItemsSource="{Binding Calibrations}"
Views\CalibrationsPage.xaml:79:                                <Label Text="{Binding Supplier.Name, StringFormat='­čĆó Serviser: {0}'}" FontSize="12" TextColor="#009688" />
Models\PartUsage.cs:11:    /// Ôťů Tracks which parts were used, in what quantity, by whom, on what work order/machine/component.<br/>
Models\PartUsage.cs:12:    /// Ôťů Supports batch/lot, serial, expiry, cost, supplier, warranty, attachments, and full audit.<br/>
Models\PartUsage.cs:88:        /// Supplier of the part (FK).
Models\PartUsage.cs:93:        public Supplier? Supplier { get; set; }
Models\PartUsage.cs:117:        /// Attachments (photo, doc, regulatory proof).
Models\PartUsage.cs:120:        public List<Attachment> Attachments { get; set; } = new List<Attachment>();
Models\PartUsage.cs:129:        /// Regulatory comments, escalation, notes.
Models\MaintenanceExecutionLog.cs:10:    /// Ôťů Tracks every detail: what, when, who, result, doc, root cause, photos, IoT, signature, device, IP  
Models\MaintenanceExecutionLog.cs:11:    /// Ôťů Inspector-ready: audit, rollback, comments, traceability  
Models\MaintenanceExecutionLog.cs:58:        /// Result of execution (e.g., "pass", "fail", "error recorded", "pending parts").
Models\MaintenanceExecutionLog.cs:76:        /// List of used spare parts or materials (for traceability, audit, warehouse tracking).
Models\MaintenanceExecutionLog.cs:83:        public List<Attachment> Attachments { get; set; } = new();
Models\MaintenanceExecutionLog.cs:86:        /// Additional notes or comments related to execution.
Models\PreventiveMaintenancePlan.cs:127:        public List<string> Attachments { get; set; } = new();
Models\PreventiveMaintenancePlan.cs:197:                Attachments = new List<string>(Attachments ?? new()),
Models\Photo.cs:10:    /// Ôťů Full audit, digital signature, hash, session, approval, chain-of-custody, AI tags, geo, device info  
