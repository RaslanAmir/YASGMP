.\reports\sql_scan_from_join_into_update.txt:739:.\Services\CAPAAuditService.cs:70:            const string sql = @"UPDATE capa_audit_log SET 
.\reports\sql_scan_from_join_into_update.txt:740:.\Services\CAPAAuditService.cs:93:            const string sql = @"DELETE FROM capa_audit_log WHERE id=@id";
.\reports\sql_scan_from_join_into_update.txt:1285:.\Views\SuppliersPage.xaml.cs:169:                const string sql = @"UPDATE suppliers SET 
.\reports\sql_scan_from_join_into_update.txt:1286:.\Views\SuppliersPage.xaml.cs:215:            const string sql = "DELETE FROM suppliers WHERE id=@id";
.\reports\sql_scan_from_join_into_update.txt:1288:.\Services\DatabaseService.RiskAssessments.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM risk_assessments ORDER BY id DESC", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1291:.\Views\ComponentsPage.xaml.cs:179:UPDATE machine_components SET
.\reports\sql_scan_from_join_into_update.txt:1292:.\Views\ComponentsPage.xaml.cs:221:                const string sql = @"UPDATE machine_components SET is_deleted=1, deleted_at=NOW() WHERE id=@id;";
.\reports\sql_scan_from_join_into_update.txt:1295:.\Services\DatabaseService.DeviationAudit.Extensions.cs:38:            const string sql = @"UPDATE deviation_audit SET deviation_id=@dev, user_id=@uid, action=@act, details=@det, changed_at=@chg, device_info=@devinfo, source_ip=@ip, session_id=@sid, digital_signature=@sig, regulatory_status=@reg, ai_anomaly_score=@ais, validated=@val, comment=@com, old_value=@old, new_value=@new, signature_type=@sigtype, signature_valid=@sigok, export_status=@expst, export_time=@exptm, exported_by=@expby, restored_from_snapshot=@restored, restoration_reference=@restref, approval_status=@apprst, approval_time=@apprtm, approved_by=@apprby, deleted=@del, deleted_at=@delat, deleted_by=@delby, updated_at=NOW(), related_file=@rfile, related_photo=@rphoto, iot_event_id=@iot WHERE id=@id";
.\reports\sql_scan_from_join_into_update.txt:1296:.\Services\DatabaseService.DeviationAudit.Extensions.cs:48:            await db.ExecuteNonQueryAsync("DELETE FROM deviation_audit WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1297:.\Services\DatabaseService.DeviationAudit.Extensions.cs:55:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviation_audit WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1298:.\Services\DatabaseService.DeviationAudit.Extensions.cs:62:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviation_audit WHERE deviation_id=@id ORDER BY changed_at DESC, id DESC", new[] { new MySqlParameter("@id", deviationId) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1299:.\Services\DatabaseService.DeviationAudit.Extensions.cs:68:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviation_audit WHERE user_id=@id ORDER BY changed_at DESC, id DESC", new[] { new MySqlParameter("@id", userId) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1300:.\Services\DatabaseService.DeviationAudit.Extensions.cs:74:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviation_audit WHERE action=@a ORDER BY changed_at DESC, id DESC", new[] { new MySqlParameter("@a", action) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1301:.\Services\DatabaseService.DeviationAudit.Extensions.cs:80:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviation_audit WHERE changed_at BETWEEN @f AND @t ORDER BY changed_at DESC, id DESC",
.\reports\sql_scan_from_join_into_update.txt:1302:.\Services\DatabaseService.Incidents.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM incidents ORDER BY id DESC", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1303:.\Services\DatabaseService.Incidents.Extensions.cs:28:            var dt = await db.ExecuteSelectAsync("SELECT * FROM incidents WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1305:.\Services\DatabaseService.Incidents.Extensions.cs:37:            string updateSql = @"UPDATE incidents SET title=@t, description=@d, type=@type, priority=@prio, detected_at=@det, reported_at=@rep, reported_by_id=@rby, assigned_to_id=@assn, work_order_id=@wo, capa_case_id=@capa, status=@status, root_cause=@rc, closed_at=@closed, closed_by_id=@cby, digital_signature=@sig, last_modified=NOW(), last_modified_by_id=@lmb, source_ip=@ip, notes=@notes, is_deleted=@del, anomaly_score=@anom, risk_level=@risk, assigned_investigator=@invest, classification=@class, linked_deviation_id=@ldev, linked_capa_id=@lcapa, closure_comment=@clos, is_critical=@critical WHERE id=@id";
.\reports\sql_scan_from_join_into_update.txt:1306:.\Services\DatabaseService.Incidents.Extensions.cs:88:            await db.ExecuteNonQueryAsync("DELETE FROM incidents WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1307:.\Services\DatabaseService.Documents.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM documentcontrol ORDER BY id DESC", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1309:.\Services\DatabaseService.Documents.Extensions.cs:50:                await db.ExecuteNonQueryAsync("UPDATE documentcontrol SET revision=@rev, file_path=@file WHERE id=@id", new[]
.\reports\sql_scan_from_join_into_update.txt:1310:.\Services\DatabaseService.Documents.Extensions.cs:66:            try { await db.ExecuteNonQueryAsync("UPDATE documentcontrol SET status='approved' WHERE id=@id", new[] { new MySqlParameter("@id", documentId) }, token).ConfigureAwait(false); } catch { }
.\reports\sql_scan_from_join_into_update.txt:1311:.\Services\DatabaseService.Documents.Extensions.cs:72:            try { await db.ExecuteNonQueryAsync("UPDATE documentcontrol SET status='published' WHERE id=@id", new[] { new MySqlParameter("@id", documentId) }, token).ConfigureAwait(false); } catch { }
.\reports\sql_scan_from_join_into_update.txt:1312:.\Services\DatabaseService.Documents.Extensions.cs:78:            try { await db.ExecuteNonQueryAsync("UPDATE documentcontrol SET status='expired' WHERE id=@id", new[] { new MySqlParameter("@id", documentId) }, token).ConfigureAwait(false); } catch { }
.\reports\sql_scan_from_join_into_update.txt:1313:.\Services\DatabaseService.Documents.Extensions.cs:87:                await db.ExecuteNonQueryAsync("UPDATE documentcontrol SET linked_change_controls = CONCAT(IFNULL(linked_change_controls,''), CASE WHEN linked_change_controls IS NULL OR linked_change_controls='' THEN '' ELSE ',' END, @cc) WHERE id=@id",
.\reports\sql_scan_from_join_into_update.txt:1314:.\Services\DatabaseService.CapaExtensions.cs:26:            // TODO: SELECT * FROM capa_action_log WHERE id = @id;
.\reports\sql_scan_from_join_into_update.txt:1315:.\Services\DatabaseService.CapaExtensions.cs:35:            // TODO: SELECT * FROM capa_action_log WHERE capa_case_id = @capaId ORDER BY performed_at DESC;
.\reports\sql_scan_from_join_into_update.txt:1316:.\Services\DatabaseService.CapaExtensions.cs:44:            // TODO: SELECT * FROM capa_action_log WHERE performed_by = @userId ORDER BY performed_at DESC;
.\reports\sql_scan_from_join_into_update.txt:1317:.\Services\DatabaseService.CapaExtensions.cs:53:            // TODO: SELECT * FROM capa_action_log WHERE action_type = @action ORDER BY performed_at DESC;
.\reports\sql_scan_from_join_into_update.txt:1318:.\Services\DatabaseService.CapaExtensions.cs:63:            // TODO: SELECT * FROM capa_action_log WHERE performed_at BETWEEN @from AND @to ORDER BY performed_at DESC;
.\reports\sql_scan_from_join_into_update.txt:1321:.\Services\DatabaseService.Rbac.Extensions.cs:55:            const string sql = @"SELECT * FROM users ORDER BY full_name, username, id;";
.\reports\sql_scan_from_join_into_update.txt:1322:.\Services\DatabaseService.Rbac.Extensions.cs:106:            const string sql = @"SELECT * FROM users WHERE id=@id LIMIT 1;";
.\reports\sql_scan_from_join_into_update.txt:1323:.\Services\DatabaseService.Rbac.Extensions.cs:198:                    "UPDATE users SET is_deleted=1, deleted_at=NOW() WHERE id=@id",
.\reports\sql_scan_from_join_into_update.txt:1324:.\Services\DatabaseService.Rbac.Extensions.cs:209:                    "DELETE FROM users WHERE id=@id",
.\reports\sql_scan_from_join_into_update.txt:1325:.\Services\DatabaseService.Rbac.Extensions.cs:257:            var dt = await db.ExecuteSelectAsync("SELECT * FROM roles ORDER BY name, id", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1326:.\Services\DatabaseService.Rbac.Extensions.cs:269:            var dt = await db.ExecuteSelectAsync("SELECT * FROM permissions ORDER BY code, id", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1329:.\Services\DatabaseService.Rbac.Extensions.cs:315:                "DELETE FROM user_roles WHERE user_id=@u AND role_id=@r",
.\reports\sql_scan_from_join_into_update.txt:1332:.\Services\DatabaseService.Rbac.Extensions.cs:360:                "DELETE FROM role_permissions WHERE role_id=@r AND permission_id=@p",
.\reports\sql_scan_from_join_into_update.txt:1527:.\Services\DatabaseService.IncidentReports.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM incidents ORDER BY reported_at DESC, id DESC", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1529:.\Services\DatabaseService.IncidentReports.Extensions.cs:53:            try { await db.ExecuteNonQueryAsync("UPDATE incidents SET assigned_to_id=@u WHERE id=@id", new[] { new MySqlParameter("@u", userId), new MySqlParameter("@id", incidentId) }, token).ConfigureAwait(false); } catch { }
.\reports\sql_scan_from_join_into_update.txt:1530:.\Services\DatabaseService.IncidentReports.Extensions.cs:63:            try { await db.ExecuteNonQueryAsync("UPDATE incidents SET status='investigated' WHERE id=@id", new[] { new MySqlParameter("@id", report.Id) }, token).ConfigureAwait(false); } catch { }
.\reports\sql_scan_from_join_into_update.txt:1531:.\Services\DatabaseService.IncidentReports.Extensions.cs:69:            try { await db.ExecuteNonQueryAsync("UPDATE incidents SET status='approved' WHERE id=@id", new[] { new MySqlParameter("@id", incidentId) }, token).ConfigureAwait(false); } catch { }
.\reports\sql_scan_from_join_into_update.txt:1532:.\Services\DatabaseService.IncidentReports.Extensions.cs:78:            try { await db.ExecuteNonQueryAsync("UPDATE incidents SET status='closed', closed_at=NOW(), closed_by_id=@u WHERE id=@id", new[] { new MySqlParameter("@id", incidentId), new MySqlParameter("@u", actorUserId) }, token).ConfigureAwait(false); } catch { }
.\reports\sql_scan_from_join_into_update.txt:1533:.\Services\DatabaseService.Capa.Cases.Extensions.cs:20:            const string sql = @"SELECT * FROM capa_cases ORDER BY id DESC";
.\reports\sql_scan_from_join_into_update.txt:1534:.\Services\DatabaseService.Capa.Cases.Extensions.cs:29:            const string sql = @"SELECT * FROM capa_cases WHERE id=@id LIMIT 1";
.\reports\sql_scan_from_join_into_update.txt:1536:.\Services\DatabaseService.Capa.Cases.Extensions.cs:72:            const string sql = @"UPDATE capa_cases SET title=@t, description=@d, component_id=@cid, date_open=@open, date_close=@close, assigned_to_id=@assn, priority=@prio, status=@status, root_cause=@rc, corrective_action=@corr, preventive_action=@prev, reason=@reason, actions=@acts, doc_file=@doc, digital_signature=@sig WHERE id=@id";
.\reports\sql_scan_from_join_into_update.txt:1537:.\Services\DatabaseService.Capa.Cases.Extensions.cs:189:            await db.ExecuteNonQueryAsync("DELETE FROM capa_cases WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1552:.\Services\DatabaseService.Rbac.CoreExtensions.cs:288:                "DELETE FROM user_roles WHERE user_id=@uid AND role_id=@rid",
.\reports\sql_scan_from_join_into_update.txt:1556:.\Services\DatabaseService.Rbac.CoreExtensions.cs:401:                "DELETE FROM user_permissions WHERE user_id=@uid AND permission_id=@pid",
.\reports\sql_scan_from_join_into_update.txt:1563:.\Services\DatabaseService.Rbac.CoreExtensions.cs:564:            var dt = await db.ExecuteSelectAsync("SELECT * FROM permission_requests WHERE id=@id",
.\reports\sql_scan_from_join_into_update.txt:1565:.\Services\DatabaseService.Rbac.CoreExtensions.cs:594:            var dt = await db.ExecuteSelectAsync("SELECT * FROM permission_requests WHERE id=@id",
.\reports\sql_scan_from_join_into_update.txt:1567:.\Services\DatabaseService.Rbac.CoreExtensions.cs:633:            var dt = await db.ExecuteSelectAsync("SELECT * FROM roles ORDER BY name, id", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1568:.\Services\DatabaseService.Rbac.CoreExtensions.cs:650:            var dt = await db.ExecuteSelectAsync("SELECT * FROM permissions ORDER BY code, id", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1572:.\Services\DatabaseService.DigitalSignatures.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM digital_signatures ORDER BY signed_at DESC, id DESC", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1574:.\Services\DatabaseService.DigitalSignatures.Extensions.cs:56:                await db.ExecuteNonQueryAsync("UPDATE digital_signatures SET status='revoked', note=@note WHERE id=@id", new[]
.\reports\sql_scan_from_join_into_update.txt:1576:.\Services\ValidationAuditService.cs:79:                "SELECT * FROM validation_audit WHERE validation_id=@vid ORDER BY changed_at DESC",
.\reports\sql_scan_from_join_into_update.txt:1577:.\Services\ValidationAuditService.cs:91:                "SELECT * FROM validation_audit WHERE id=@id",
.\reports\sql_scan_from_join_into_update.txt:1578:.\Services\ValidationAuditService.cs:101:                "DELETE FROM validation_audit WHERE id=@id",
.\reports\sql_scan_from_join_into_update.txt:1579:.\Views\CalibrationsPage.xaml.cs:81:                    .ExecuteSelectAsync("SELECT * FROM calibrations ORDER BY calibration_date DESC")
.\reports\sql_scan_from_join_into_update.txt:1581:.\Views\CalibrationsPage.xaml.cs:265:                const string sql = @"UPDATE calibrations SET
.\reports\sql_scan_from_join_into_update.txt:1585:.\Views\PartsPage.xaml.cs:181:                const string sql = @"UPDATE parts SET 
.\reports\sql_scan_from_join_into_update.txt:1586:.\Views\PartsPage.xaml.cs:222:                const string sql = "DELETE FROM parts WHERE id=@id";
.\reports\sql_scan_from_join_into_update.txt:1588:.\Services\DatabaseService.IncidentAudits.Extensions.cs:48:            var dt = await db.ExecuteSelectAsync("SELECT * FROM incident_audit WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1589:.\Services\DatabaseService.IncidentAudits.Extensions.cs:54:            var dt = await db.ExecuteSelectAsync("SELECT * FROM incident_audit WHERE incident_id=@id ORDER BY action_at DESC, id DESC", new[] { new MySqlParameter("@id", incidentId) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1590:.\Services\DatabaseService.IncidentAudits.Extensions.cs:60:            var dt = await db.ExecuteSelectAsync("SELECT * FROM incident_audit WHERE user_id=@id ORDER BY action_at DESC, id DESC", new[] { new MySqlParameter("@id", userId) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1591:.\Services\DatabaseService.Attachments.Extensions.cs:20:            string sql = "SELECT * FROM attachments WHERE 1=1";
.\reports\sql_scan_from_join_into_update.txt:1593:.\Services\DatabaseService.Attachments.Extensions.cs:54:            await db.ExecuteNonQueryAsync("DELETE FROM attachments WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1594:.\Services\DatabaseService.Calibrations.Extensions.cs:20:            const string sql = @"SELECT * FROM calibrations ORDER BY calibration_date DESC, id DESC";
.\reports\sql_scan_from_join_into_update.txt:1595:.\Services\DatabaseService.Calibrations.Extensions.cs:29:            const string sql = @"SELECT * FROM calibrations WHERE id=@id LIMIT 1";
.\reports\sql_scan_from_join_into_update.txt:1596:.\Services\DatabaseService.Calibrations.Extensions.cs:36:            const string sql = @"SELECT * FROM calibrations WHERE component_id=@cid ORDER BY calibration_date DESC, id DESC";
.\reports\sql_scan_from_join_into_update.txt:1597:.\Services\DatabaseService.Calibrations.Extensions.cs:45:            const string sql = @"SELECT * FROM calibrations WHERE supplier_id=@sid ORDER BY calibration_date DESC, id DESC";
.\reports\sql_scan_from_join_into_update.txt:1598:.\Services\DatabaseService.Calibrations.Extensions.cs:54:            const string sql = @"SELECT * FROM calibrations WHERE calibration_date BETWEEN @f AND @t ORDER BY calibration_date DESC, id DESC";
.\reports\sql_scan_from_join_into_update.txt:1600:.\Services\DatabaseService.Calibrations.Extensions.cs:68:            string updateSql = @"UPDATE calibrations SET component_id=@cid, supplier_id=@sid, calibration_date=@cd, next_due=@due, cert_doc=@doc, result=@res, comment=@comm, digital_signature=@sig WHERE id=@id";
.\reports\sql_scan_from_join_into_update.txt:1601:.\Services\DatabaseService.Calibrations.Extensions.cs:104:            await db.ExecuteNonQueryAsync("DELETE FROM calibrations WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1602:.\Services\DatabaseService.Qualifications.Extensions.cs:21:            var dt = await db.ExecuteSelectAsync("SELECT * FROM component_qualifications ORDER BY qualification_date DESC, id DESC", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1604:.\Services\DatabaseService.Qualifications.Extensions.cs:51:                await db.ExecuteNonQueryAsync(@"UPDATE component_qualifications SET component_id=@comp, supplier_id=@supp, qualification_date=@date, status=@status, certificate_number=@cert WHERE id=@id", new[]
.\reports\sql_scan_from_join_into_update.txt:1605:.\Services\DatabaseService.Qualifications.Extensions.cs:67:            try { await db.ExecuteNonQueryAsync("DELETE FROM component_qualifications WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false); } catch { }
.\reports\sql_scan_from_join_into_update.txt:1609:.\Services\DatabaseService.ContractorInterventions.Extensions.cs:122:            string updateSql = @"UPDATE contractor_interventions SET contractor_id=@cid, component_id=@comp, intervention_date=@date, reason=@reason, result=@result, gmp_compliance=@gmp, doc_file=@doc WHERE id=@id";
.\reports\sql_scan_from_join_into_update.txt:1610:.\Services\DatabaseService.ContractorInterventions.Extensions.cs:224:            const string sql = "DELETE FROM contractor_interventions WHERE id=@id;";
.\reports\sql_scan_from_join_into_update.txt:1612:.\Services\DatabaseService.Deviations.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviations ORDER BY id DESC", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1613:.\Services\DatabaseService.Deviations.Extensions.cs:28:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviations WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1615:.\Services\DatabaseService.Deviations.Extensions.cs:37:            string updateSql = @"UPDATE deviations SET code=@code, title=@title, description=@desc, reported_at=@rep, reported_by_id=@rby, severity=@sev, is_critical=@crit, status=@status, assigned_investigator_id=@assid, assigned_investigator_name=@assname, investigation_started_at=@invstart, root_cause=@rc, linked_capa_id=@lcapa, closure_comment=@clos, closed_at=@closed, digital_signature=@sig, risk_score=@risk, anomaly_score=@anom, last_modified=NOW(), last_modified_by_id=@lmb, source_ip=@ip, audit_note=@audit WHERE id=@id";
.\reports\sql_scan_from_join_into_update.txt:1616:.\Services\DatabaseService.Deviations.Extensions.cs:82:            await db.ExecuteNonQueryAsync("DELETE FROM deviations WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1617:.\Services\DatabaseService.ExternalServicers.Extensions.cs:21:            var dt = await db.ExecuteSelectAsync("SELECT * FROM external_contractors ORDER BY name, id", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1619:.\Services\DatabaseService.ExternalServicers.Extensions.cs:32:            string updateSql = @"UPDATE external_contractors SET name=@name, code=@code, registration_number=@reg, contact_person=@contact, email=@em, phone=@ph, address=@addr, type=@type, status=@status, cooperation_start=@start, cooperation_end=@end, comment=@comm, digital_signature=@sig WHERE id=@id";
.\reports\sql_scan_from_join_into_update.txt:1620:.\Services\DatabaseService.ExternalServicers.Extensions.cs:84:            => db.ExecuteNonQueryAsync("DELETE FROM external_contractors WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token);
.\reports\sql_scan_from_join_into_update.txt:1621:.\Services\DatabaseService.Assets.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM machines ORDER BY name, id", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:1623:.\Services\DatabaseService.Assets.Extensions.cs:58:                const string sql = @"UPDATE machines SET code=@code, name=@name, description=@desc, model=@model, manufacturer=@mf, location=@loc, status=@status, urs_doc=@urs, digital_signature=@sig WHERE id=@id";
.\reports\sql_scan_from_join_into_update.txt:1624:.\Services\DatabaseService.Assets.Extensions.cs:80:            try { await db.ExecuteNonQueryAsync("DELETE FROM machines WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false); } catch { }
.\reports\sql_scan_from_join_into_update.txt:2116:.\Services\UserService.cs:245:                "UPDATE users SET password_hash=@ph WHERE id=@id",
.\reports\sql_scan_from_join_into_update.txt:2118:.\Services\DatabaseService.Machines.CoreExtensions.cs:21:            var dt = await db.ExecuteSelectAsync("SELECT * FROM machines ORDER BY name, id", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2119:.\Services\DatabaseService.Machines.CoreExtensions.cs:50:            var dt = await db.ExecuteSelectAsync("SELECT * FROM machines WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2121:.\Services\DatabaseService.Machines.CoreExtensions.cs:76:            string updateSql = @"UPDATE machines SET code=@code, name=@name, description=@desc, model=@model, manufacturer=@mf, location=@loc, install_date=@inst, procurement_date=@proc, status=@status, urs_doc=@urs, serial_number=@sn, acquisition_cost=@cost, rfid_tag=@rfid, qr_code=@qr, iot_device_id=@iot, cloud_device_guid=@cloud WHERE id=@id";
.\reports\sql_scan_from_join_into_update.txt:2122:.\Services\DatabaseService.Machines.CoreExtensions.cs:151:                await db.ExecuteNonQueryAsync("DELETE FROM machines WHERE id=@id", new[] { new MySqlConnector.MySqlParameter("@id", machineId) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2123:.\Services\DatabaseService.Ppm.Extensions.cs:23:                var dt = await db.ExecuteSelectAsync("SELECT * FROM preventive_maintenance_plans ORDER BY id DESC", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2124:.\Services\DatabaseService.Ppm.Extensions.cs:28:                var dt = await db.ExecuteSelectAsync("SELECT * FROM ppm_plans ORDER BY id DESC", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2125:.\Services\DatabaseService.Ppm.Extensions.cs:37:                var dt = await db.ExecuteSelectAsync("SELECT * FROM preventive_maintenance_plans WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2126:.\Services\DatabaseService.Ppm.Extensions.cs:42:                var dt = await db.ExecuteSelectAsync("SELECT * FROM ppm_plans WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2128:.\Services\DatabaseService.Ppm.Extensions.cs:53:            string updateSql = @"UPDATE preventive_maintenance_plans SET code=@code, name=@name, description=@desc, machine_id=@mid, component_id=@cid, frequency=@freq, checklist_file=@file, next_due=@due, status=@status WHERE id=@id";
.\reports\sql_scan_from_join_into_update.txt:2129:.\Services\DatabaseService.Ppm.Extensions.cs:105:                await db.ExecuteNonQueryAsync("DELETE FROM preventive_maintenance_plans WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2130:.\Services\DatabaseService.Ppm.Extensions.cs:109:                await db.ExecuteNonQueryAsync("DELETE FROM ppm_plans WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2131:.\Services\DatabaseService.Notifications.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM notifications ORDER BY created_at DESC, id DESC", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2133:.\Services\DatabaseService.Notifications.Extensions.cs:70:            try { await db.ExecuteNonQueryAsync("UPDATE notifications SET status='acknowledged', acked_by=@u, acked_at=NOW() WHERE id=@id", new[] { new MySqlParameter("@u", actorUserId), new MySqlParameter("@id", notificationId) }, token).ConfigureAwait(false); } catch { }
.\reports\sql_scan_from_join_into_update.txt:2134:.\Services\DatabaseService.Notifications.Extensions.cs:76:            try { await db.ExecuteNonQueryAsync("UPDATE notifications SET status='muted', muted_until=@until WHERE id=@id", new[] { new MySqlParameter("@until", mutedUntilUtc), new MySqlParameter("@id", notificationId) }, token).ConfigureAwait(false); } catch { }
.\reports\sql_scan_from_join_into_update.txt:2135:.\Services\DatabaseService.Notifications.Extensions.cs:82:            try { await db.ExecuteNonQueryAsync("DELETE FROM notifications WHERE id=@id", new[] { new MySqlParameter("@id", notificationId) }, token).ConfigureAwait(false); } catch { }
.\reports\sql_scan_from_join_into_update.txt:2136:.\Services\DatabaseService.Components.QueryExtensions.cs:23:            const string sql = @"SELECT * FROM machine_components ORDER BY id DESC";
.\reports\sql_scan_from_join_into_update.txt:2137:.\Services\DatabaseService.Components.QueryExtensions.cs:36:            const string sql = @"SELECT * FROM machine_components WHERE id=@id LIMIT 1";
.\reports\sql_scan_from_join_into_update.txt:2140:.\Views\MachinesPage.xaml.cs:164:UPDATE machines SET 
.\reports\sql_scan_from_join_into_update.txt:2141:.\Views\MachinesPage.xaml.cs:206:                const string sql = "DELETE FROM machines WHERE id=@id";
.\reports\sql_scan_from_join_into_update.txt:2143:.\Services\DatabaseService.ComponentOverloads.cs:53:                : @"UPDATE machine_components SET
.\reports\sql_scan_from_join_into_update.txt:2144:.\Services\DatabaseService.ComponentOverloads.cs:199:                "DELETE FROM machine_components WHERE id=@id",
.\reports\sql_scan_from_join_into_update.txt:2145:.\Services\DatabaseService.ComponentOverloads.cs:231:                "DELETE FROM machine_components WHERE id=@id",
.\reports\sql_scan_from_join_into_update.txt:2148:.\Services\RBACService.cs:335:            const string sql = "DELETE FROM role_permissions WHERE role_id=@r AND permission_id=@p";
.\reports\sql_scan_from_join_into_update.txt:2151:.\Services\RBACService.cs:416:                "UPDATE roles SET is_deleted=1, updated_at=UTC_TIMESTAMP(), last_modified_by_id=@by, version=version+1 WHERE id=@id",
.\reports\sql_scan_from_join_into_update.txt:2152:.\Services\RBACService.cs:421:                "DELETE FROM role_permissions WHERE role_id=@id",
.\reports\sql_scan_from_join_into_update.txt:2153:.\Services\RBACService.cs:426:                "DELETE FROM user_roles WHERE role_id=@id",
.\reports\sql_scan_from_join_into_update.txt:2163:.\Services\DatabaseService.WorkOrders.Extensions.cs:28:            const string sql = @"SELECT * FROM work_orders ORDER BY date_open DESC, id DESC";
.\reports\sql_scan_from_join_into_update.txt:2164:.\Services\DatabaseService.WorkOrders.Extensions.cs:45:            const string sql = @"SELECT * FROM work_orders WHERE id=@id LIMIT 1";
.\reports\sql_scan_from_join_into_update.txt:2166:.\Services\DatabaseService.WorkOrders.Extensions.cs:72:            string updateSql = @"UPDATE work_orders SET
.\reports\sql_scan_from_join_into_update.txt:2168:.\Services\DatabaseService.WorkOrders.Extensions.cs:114:                string updateMin = @"UPDATE work_orders SET machine_id=@mid, type=@type, description=@desc, status=@status, priority=@prio WHERE id=@id";
.\reports\sql_scan_from_join_into_update.txt:2169:.\Services\DatabaseService.WorkOrders.Extensions.cs:191:            await db.ExecuteNonQueryAsync("DELETE FROM work_orders WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2170:.\Services\DatabaseService.WorkOrders.Extensions.cs:204:            await db.ExecuteNonQueryAsync("DELETE FROM work_orders WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2171:.\Services\DatabaseService.WorkOrders.Extensions.cs:231:            await db.ExecuteNonQueryAsync("UPDATE work_orders SET status='zavrsen' WHERE id=@id", new[] { new MySqlParameter("@id", workOrderId) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2172:.\Services\DatabaseService.WorkOrders.Extensions.cs:241:            await db.ExecuteNonQueryAsync("UPDATE work_orders SET status='zavrsen', date_close=NOW() WHERE id=@id", new[] { new MySqlParameter("@id", workOrderId) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2176:.\Services\DatabaseService.Validations.Extensions.cs:34:            const string sql = @"SELECT * FROM validations
.\reports\sql_scan_from_join_into_update.txt:2177:.\Services\DatabaseService.Validations.Extensions.cs:50:            const string sql = @"SELECT * FROM validations WHERE id=@id LIMIT 1";
.\reports\sql_scan_from_join_into_update.txt:2179:.\Services\DatabaseService.Validations.Extensions.cs:101:UPDATE validations SET
.\reports\sql_scan_from_join_into_update.txt:2180:.\Services\DatabaseService.Validations.Extensions.cs:174:            const string sql = @"DELETE FROM validations WHERE id=@id";
.\reports\sql_scan_from_join_into_update.txt:2183:.\Services\DatabaseService.Suppliers.Extensions.cs:23:                var dt = await db.ExecuteSelectAsync("SELECT * FROM suppliers ORDER BY name, id", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2184:.\Services\DatabaseService.Suppliers.Extensions.cs:28:                var dt = await db.ExecuteSelectAsync("SELECT * FROM supplier ORDER BY name, id", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2185:.\Services\DatabaseService.Suppliers.Extensions.cs:37:                var dt = await db.ExecuteSelectAsync("SELECT * FROM suppliers WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2186:.\Services\DatabaseService.Suppliers.Extensions.cs:42:                var dt = await db.ExecuteSelectAsync("SELECT * FROM supplier WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2188:.\Services\DatabaseService.Suppliers.Extensions.cs:53:            string updateSql = @"UPDATE suppliers SET name=@name, vat_number=@vat, address=@addr, city=@city, country=@country, email=@em, phone=@ph, website=@web, supplier_type=@type, notes=@notes, contract_file=@contract, status=@status WHERE id=@id";
.\reports\sql_scan_from_join_into_update.txt:2189:.\Services\DatabaseService.Suppliers.Extensions.cs:109:                await db.ExecuteNonQueryAsync("DELETE FROM suppliers WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2190:.\Services\DatabaseService.Suppliers.Extensions.cs:113:                await db.ExecuteNonQueryAsync("DELETE FROM supplier WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2191:.\Services\DatabaseService.Users.Extensions.cs:60:            const string sql = @"SELECT * FROM users WHERE id=@id LIMIT 1;";
.\reports\sql_scan_from_join_into_update.txt:2192:.\Services\DatabaseService.Users.Extensions.cs:75:            const string sql = @"SELECT * FROM users WHERE LOWER(username)=LOWER(@u) LIMIT 1;";
.\reports\sql_scan_from_join_into_update.txt:2193:.\Services\DatabaseService.Users.Extensions.cs:94:            var dt = await db.ExecuteSelectAsync("SELECT * FROM users ORDER BY username", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2195:.\Services\DatabaseService.Users.Extensions.cs:118:                : @"UPDATE users SET
.\reports\sql_scan_from_join_into_update.txt:2197:.\Services\DatabaseService.Users.Extensions.cs:146:                    : @"UPDATE users SET
.\reports\sql_scan_from_join_into_update.txt:2198:.\Services\DatabaseService.Users.Extensions.cs:171:                    "UPDATE users SET last_login=NOW(), failed_login_attempts=0 WHERE id=@id",
.\reports\sql_scan_from_join_into_update.txt:2199:.\Services\DatabaseService.Users.Extensions.cs:177:                    "UPDATE users SET last_login=NOW(), failed_logins=0 WHERE id=@id",
.\reports\sql_scan_from_join_into_update.txt:2202:.\Services\DatabaseService.Users.Extensions.cs:214:            => db.ExecuteNonQueryAsync("UPDATE users SET is_locked=1 WHERE id=@id",
.\reports\sql_scan_from_join_into_update.txt:2203:.\Services\DatabaseService.Users.Extensions.cs:230:                    "UPDATE users SET is_locked=0, failed_login_attempts=0 WHERE id=@id",
.\reports\sql_scan_from_join_into_update.txt:2204:.\Services\DatabaseService.Users.Extensions.cs:236:                    "UPDATE users SET is_locked=0, failed_logins=0 WHERE id=@id",
.\reports\sql_scan_from_join_into_update.txt:2205:.\Services\DatabaseService.Users.Extensions.cs:251:                "UPDATE users SET is_two_factor_enabled=@tfa WHERE id=@id",
.\reports\sql_scan_from_join_into_update.txt:2206:.\Services\DatabaseService.Users.Extensions.cs:260:                    "UPDATE users SET password_reset_required=1 WHERE id=@id",
.\reports\sql_scan_from_join_into_update.txt:2207:.\Services\DatabaseService.Users.Extensions.cs:282:            await db.ExecuteNonQueryAsync("DELETE FROM users WHERE id=@id",
.\reports\sql_scan_from_join_into_update.txt:2208:.\Services\DatabaseService.SpareParts.Extensions.cs:23:            var dt = await db.ExecuteSelectAsync("SELECT * FROM parts WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2209:.\Services\DatabaseService.SpareParts.Extensions.cs:38:            var dt = await db.ExecuteSelectAsync("SELECT * FROM parts ORDER BY name, id", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2211:.\Services\DatabaseService.SpareParts.Extensions.cs:61:            string update = @"UPDATE parts SET code=@code, name=@name, description=@desc, category=@cat, barcode=@bar, rfid=@rfid, serial_or_lot=@serial, default_supplier_id=@supp, price=@price, stock=@stock, min_stock_alert=@min, location=@loc, image=@img, status=@status, blocked=@blocked, regulatory_certificates=@reg, digital_signature=@sig, last_modified=NOW(), last_modified_by_id=@lmb, source_ip=@ip WHERE id=@id";
.\reports\sql_scan_from_join_into_update.txt:2212:.\Services\DatabaseService.SpareParts.Extensions.cs:70:            await db.ExecuteNonQueryAsync("DELETE FROM parts WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2213:.\Services\DatabaseService.Settings.Extensions.cs:18:            var dt = await db.ExecuteSelectAsync("SELECT * FROM settings ORDER BY `key`", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2215:.\Services\DatabaseService.Settings.Extensions.cs:60:            string updateSql = @"UPDATE settings SET `key`=@key, `value`=@val, default_value=@def, value_type=@type, min_value=@min, max_value=@max, description=@desc, category=@cat, subcategory=@sub, is_sensitive=@sens, is_global=@glob, user_id=@uid, role_id=@rid, approved_by_id=@apby, approved_at=@apat, digital_signature=@sig, status=@status, updated_at=NOW(), updated_by_id=@updby WHERE id=@id";
.\reports\sql_scan_from_join_into_update.txt:2216:.\Services\DatabaseService.Settings.Extensions.cs:105:            await db.ExecuteNonQueryAsync("DELETE FROM settings WHERE id=@id", new[] { new MySqlParameter("@id", settingId) }, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2217:.\ViewModels\CalibrationsViewModel.cs:258:                    .ExecuteSelectAsync("SELECT * FROM calibrations ORDER BY calibration_date DESC")
.\reports\sql_scan_from_join_into_update.txt:2218:.\ViewModels\CalibrationsViewModel.cs:310:                await _dbService.ExecuteNonQueryAsync("DELETE FROM calibrations WHERE id=@id", pars).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2219:.\Services\DatabaseService.Scheduler.Extensions.cs:17:            var dt = await db.ExecuteSelectAsync("SELECT * FROM scheduled_jobs ORDER BY next_due, id", null, token).ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2220:.\ViewModels\ChangeControlViewModel.cs:141:                var controls = await _dbService.ExecuteSelectAsync("SELECT * FROM change_controls").ConfigureAwait(false);
.\reports\sql_scan_from_join_into_update.txt:2222:.\ViewModels\ChangeControlViewModel.cs:225:                    "UPDATE change_controls SET status=@status WHERE id=@id",
.\reports\sql_scan_from_join_into_update.txt:2223:.\ViewModels\ChangeControlViewModel.cs:269:                    "UPDATE change_controls SET status=@status WHERE id=@id",
.\reports\sql_scan_from_join_into_update.txt:2224:.\ViewModels\ChangeControlViewModel.cs:296:                    "UPDATE change_controls SET status=@status WHERE id=@id",
.\db execute\02_smoke_tests.sql:10:DELETE FROM `capa_cases` WHERE `id`=@capa_id;
.\db execute\02_smoke_tests.sql:16:DELETE FROM `deviations` WHERE `id`=@dev_id;
.\db execute\02_smoke_tests.sql:22:DELETE FROM `system_parameters` WHERE `param_name`='CLI_TEST_PARAM';
.\db execute\02_smoke_tests.sql:29:DELETE FROM `api_usage_log` WHERE `api_key_id`=@key_id;
.\db execute\02_smoke_tests.sql:30:DELETE FROM `api_keys` WHERE `id`=@key_id;
.\db execute\02_smoke_tests.sql:37:DELETE FROM `user_login_audit` WHERE `id`=@ula;
.\Services\DatabaseService.Assets.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM machines ORDER BY name, id", null, token).ConfigureAwait(false);
.\Services\DatabaseService.Assets.Extensions.cs:58:                const string sql = @"UPDATE machines SET code=@code, name=@name, description=@desc, model=@model, manufacturer=@mf, location=@loc, status=@status, urs_doc=@urs, digital_signature=@sig WHERE id=@id";
.\Services\DatabaseService.Assets.Extensions.cs:80:            try { await db.ExecuteNonQueryAsync("DELETE FROM machines WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false); } catch { }
.\Services\CAPAAuditService.cs:70:            const string sql = @"UPDATE capa_audit_log SET 
.\Services\CAPAAuditService.cs:93:            const string sql = @"DELETE FROM capa_audit_log WHERE id=@id";
.\scripts\align_and_smoke.sql:36:DELETE FROM `capa_cases` WHERE `id`=@capa_id;
.\scripts\align_and_smoke.sql:42:DELETE FROM `deviations` WHERE `id`=@dev_id;
.\scripts\align_and_smoke.sql:48:DELETE FROM `system_parameters` WHERE `param_name`='CLI_TEST_PARAM';
.\scripts\align_and_smoke.sql:55:DELETE FROM `api_usage_log` WHERE `api_key_id`=@key_id;
.\scripts\align_and_smoke.sql:56:DELETE FROM `api_keys` WHERE `id`=@key_id;
.\scripts\align_and_smoke.sql:63:DELETE FROM `user_login_audit` WHERE `id`=@ula;
.\Services\DatabaseService.Deviations.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviations ORDER BY id DESC", null, token).ConfigureAwait(false);
.\Services\DatabaseService.Deviations.Extensions.cs:28:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviations WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.Deviations.Extensions.cs:37:            string updateSql = @"UPDATE deviations SET code=@code, title=@title, description=@desc, reported_at=@rep, reported_by_id=@rby, severity=@sev, is_critical=@crit, status=@status, assigned_investigator_id=@assid, assigned_investigator_name=@assname, investigation_started_at=@invstart, root_cause=@rc, linked_capa_id=@lcapa, closure_comment=@clos, closed_at=@closed, digital_signature=@sig, risk_score=@risk, anomaly_score=@anom, last_modified=NOW(), last_modified_by_id=@lmb, source_ip=@ip, audit_note=@audit WHERE id=@id";
.\Services\DatabaseService.Deviations.Extensions.cs:82:            await db.ExecuteNonQueryAsync("DELETE FROM deviations WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.DeviationAudit.Extensions.cs:38:            const string sql = @"UPDATE deviation_audit SET deviation_id=@dev, user_id=@uid, action=@act, details=@det, changed_at=@chg, device_info=@devinfo, source_ip=@ip, session_id=@sid, digital_signature=@sig, regulatory_status=@reg, ai_anomaly_score=@ais, validated=@val, comment=@com, old_value=@old, new_value=@new, signature_type=@sigtype, signature_valid=@sigok, export_status=@expst, export_time=@exptm, exported_by=@expby, restored_from_snapshot=@restored, restoration_reference=@restref, approval_status=@apprst, approval_time=@apprtm, approved_by=@apprby, deleted=@del, deleted_at=@delat, deleted_by=@delby, updated_at=NOW(), related_file=@rfile, related_photo=@rphoto, iot_event_id=@iot WHERE id=@id";
.\Services\DatabaseService.DeviationAudit.Extensions.cs:48:            await db.ExecuteNonQueryAsync("DELETE FROM deviation_audit WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.DeviationAudit.Extensions.cs:55:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviation_audit WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.DeviationAudit.Extensions.cs:62:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviation_audit WHERE deviation_id=@id ORDER BY changed_at DESC, id DESC", new[] { new MySqlParameter("@id", deviationId) }, token).ConfigureAwait(false);
.\Services\DatabaseService.DeviationAudit.Extensions.cs:68:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviation_audit WHERE user_id=@id ORDER BY changed_at DESC, id DESC", new[] { new MySqlParameter("@id", userId) }, token).ConfigureAwait(false);
.\Services\DatabaseService.DeviationAudit.Extensions.cs:74:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviation_audit WHERE action=@a ORDER BY changed_at DESC, id DESC", new[] { new MySqlParameter("@a", action) }, token).ConfigureAwait(false);
.\Services\DatabaseService.DeviationAudit.Extensions.cs:80:            var dt = await db.ExecuteSelectAsync("SELECT * FROM deviation_audit WHERE changed_at BETWEEN @f AND @t ORDER BY changed_at DESC, id DESC",
.\Services\DatabaseService.ContractorInterventions.Extensions.cs:39:SELECT *
.\Services\DatabaseService.ContractorInterventions.Extensions.cs:122:            string updateSql = @"UPDATE contractor_interventions SET contractor_id=@cid, component_id=@comp, intervention_date=@date, reason=@reason, result=@result, gmp_compliance=@gmp, doc_file=@doc WHERE id=@id";
.\Services\DatabaseService.ContractorInterventions.Extensions.cs:224:            const string sql = "DELETE FROM contractor_interventions WHERE id=@id;";
.\Services\DatabaseService.Components.QueryExtensions.cs:23:            const string sql = @"SELECT * FROM machine_components ORDER BY id DESC";
.\Services\DatabaseService.Components.QueryExtensions.cs:36:            const string sql = @"SELECT * FROM machine_components WHERE id=@id LIMIT 1";
.\Services\DatabaseService.ComponentOverloads.cs:53:                : @"UPDATE machine_components SET
.\Services\DatabaseService.ComponentOverloads.cs:199:                "DELETE FROM machine_components WHERE id=@id",
.\Services\DatabaseService.ComponentOverloads.cs:231:                "DELETE FROM machine_components WHERE id=@id",
.\Services\DatabaseService.CapaExtensions.cs:26:            // TODO: SELECT * FROM capa_action_log WHERE id = @id;
.\Services\DatabaseService.CapaExtensions.cs:35:            // TODO: SELECT * FROM capa_action_log WHERE capa_case_id = @capaId ORDER BY performed_at DESC;
.\Services\DatabaseService.CapaExtensions.cs:44:            // TODO: SELECT * FROM capa_action_log WHERE performed_by = @userId ORDER BY performed_at DESC;
.\Services\DatabaseService.CapaExtensions.cs:53:            // TODO: SELECT * FROM capa_action_log WHERE action_type = @action ORDER BY performed_at DESC;
.\Services\DatabaseService.CapaExtensions.cs:63:            // TODO: SELECT * FROM capa_action_log WHERE performed_at BETWEEN @from AND @to ORDER BY performed_at DESC;
.\Services\DatabaseService.Capa.Cases.Extensions.cs:20:            const string sql = @"SELECT * FROM capa_cases ORDER BY id DESC";
.\Services\DatabaseService.Capa.Cases.Extensions.cs:29:            const string sql = @"SELECT * FROM capa_cases WHERE id=@id LIMIT 1";
.\Services\DatabaseService.Capa.Cases.Extensions.cs:72:            const string sql = @"UPDATE capa_cases SET title=@t, description=@d, component_id=@cid, date_open=@open, date_close=@close, assigned_to_id=@assn, priority=@prio, status=@status, root_cause=@rc, corrective_action=@corr, preventive_action=@prev, reason=@reason, actions=@acts, doc_file=@doc, digital_signature=@sig WHERE id=@id";
.\Services\DatabaseService.Capa.Cases.Extensions.cs:189:            await db.ExecuteNonQueryAsync("DELETE FROM capa_cases WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.Calibrations.Extensions.cs:20:            const string sql = @"SELECT * FROM calibrations ORDER BY calibration_date DESC, id DESC";
.\Services\DatabaseService.Calibrations.Extensions.cs:29:            const string sql = @"SELECT * FROM calibrations WHERE id=@id LIMIT 1";
.\Services\DatabaseService.Calibrations.Extensions.cs:36:            const string sql = @"SELECT * FROM calibrations WHERE component_id=@cid ORDER BY calibration_date DESC, id DESC";
.\Services\DatabaseService.Calibrations.Extensions.cs:45:            const string sql = @"SELECT * FROM calibrations WHERE supplier_id=@sid ORDER BY calibration_date DESC, id DESC";
.\Services\DatabaseService.Calibrations.Extensions.cs:54:            const string sql = @"SELECT * FROM calibrations WHERE calibration_date BETWEEN @f AND @t ORDER BY calibration_date DESC, id DESC";
.\Services\DatabaseService.Calibrations.Extensions.cs:68:            string updateSql = @"UPDATE calibrations SET component_id=@cid, supplier_id=@sid, calibration_date=@cd, next_due=@due, cert_doc=@doc, result=@res, comment=@comm, digital_signature=@sig WHERE id=@id";
.\Services\DatabaseService.Calibrations.Extensions.cs:104:            await db.ExecuteNonQueryAsync("DELETE FROM calibrations WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.Attachments.Extensions.cs:20:            string sql = "SELECT * FROM attachments WHERE 1=1";
.\Services\DatabaseService.Attachments.Extensions.cs:54:            await db.ExecuteNonQueryAsync("DELETE FROM attachments WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.Suppliers.Extensions.cs:23:                var dt = await db.ExecuteSelectAsync("SELECT * FROM suppliers ORDER BY name, id", null, token).ConfigureAwait(false);
.\Services\DatabaseService.Suppliers.Extensions.cs:28:                var dt = await db.ExecuteSelectAsync("SELECT * FROM supplier ORDER BY name, id", null, token).ConfigureAwait(false);
.\Services\DatabaseService.Suppliers.Extensions.cs:37:                var dt = await db.ExecuteSelectAsync("SELECT * FROM suppliers WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.Suppliers.Extensions.cs:42:                var dt = await db.ExecuteSelectAsync("SELECT * FROM supplier WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.Suppliers.Extensions.cs:53:            string updateSql = @"UPDATE suppliers SET name=@name, vat_number=@vat, address=@addr, city=@city, country=@country, email=@em, phone=@ph, website=@web, supplier_type=@type, notes=@notes, contract_file=@contract, status=@status WHERE id=@id";
.\Services\DatabaseService.Suppliers.Extensions.cs:109:                await db.ExecuteNonQueryAsync("DELETE FROM suppliers WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.Suppliers.Extensions.cs:113:                await db.ExecuteNonQueryAsync("DELETE FROM supplier WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.SpareParts.Extensions.cs:23:            var dt = await db.ExecuteSelectAsync("SELECT * FROM parts WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.SpareParts.Extensions.cs:38:            var dt = await db.ExecuteSelectAsync("SELECT * FROM parts ORDER BY name, id", null, token).ConfigureAwait(false);
.\Services\DatabaseService.SpareParts.Extensions.cs:61:            string update = @"UPDATE parts SET code=@code, name=@name, description=@desc, category=@cat, barcode=@bar, rfid=@rfid, serial_or_lot=@serial, default_supplier_id=@supp, price=@price, stock=@stock, min_stock_alert=@min, location=@loc, image=@img, status=@status, blocked=@blocked, regulatory_certificates=@reg, digital_signature=@sig, last_modified=NOW(), last_modified_by_id=@lmb, source_ip=@ip WHERE id=@id";
.\Services\DatabaseService.SpareParts.Extensions.cs:70:            await db.ExecuteNonQueryAsync("DELETE FROM parts WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.Settings.Extensions.cs:18:            var dt = await db.ExecuteSelectAsync("SELECT * FROM settings ORDER BY `key`", null, token).ConfigureAwait(false);
.\Services\DatabaseService.Settings.Extensions.cs:60:            string updateSql = @"UPDATE settings SET `key`=@key, `value`=@val, default_value=@def, value_type=@type, min_value=@min, max_value=@max, description=@desc, category=@cat, subcategory=@sub, is_sensitive=@sens, is_global=@glob, user_id=@uid, role_id=@rid, approved_by_id=@apby, approved_at=@apat, digital_signature=@sig, status=@status, updated_at=NOW(), updated_by_id=@updby WHERE id=@id";
.\Services\DatabaseService.Settings.Extensions.cs:105:            await db.ExecuteNonQueryAsync("DELETE FROM settings WHERE id=@id", new[] { new MySqlParameter("@id", settingId) }, token).ConfigureAwait(false);
.\Services\DatabaseService.Scheduler.Extensions.cs:17:            var dt = await db.ExecuteSelectAsync("SELECT * FROM scheduled_jobs ORDER BY next_due, id", null, token).ConfigureAwait(false);
.\Services\DatabaseService.RiskAssessments.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM risk_assessments ORDER BY id DESC", null, token).ConfigureAwait(false);
.\Views\SuppliersPage.xaml.cs:169:                const string sql = @"UPDATE suppliers SET 
.\Views\SuppliersPage.xaml.cs:215:            const string sql = "DELETE FROM suppliers WHERE id=@id";
.\Services\DatabaseService.Rbac.Extensions.cs:55:            const string sql = @"SELECT * FROM users ORDER BY full_name, username, id;";
.\Services\DatabaseService.Rbac.Extensions.cs:106:            const string sql = @"SELECT * FROM users WHERE id=@id LIMIT 1;";
.\Services\DatabaseService.Rbac.Extensions.cs:198:                    "UPDATE users SET is_deleted=1, deleted_at=NOW() WHERE id=@id",
.\Services\DatabaseService.Rbac.Extensions.cs:209:                    "DELETE FROM users WHERE id=@id",
.\Services\DatabaseService.Rbac.Extensions.cs:257:            var dt = await db.ExecuteSelectAsync("SELECT * FROM roles ORDER BY name, id", null, token).ConfigureAwait(false);
.\Services\DatabaseService.Rbac.Extensions.cs:269:            var dt = await db.ExecuteSelectAsync("SELECT * FROM permissions ORDER BY code, id", null, token).ConfigureAwait(false);
.\Services\DatabaseService.Rbac.Extensions.cs:315:                "DELETE FROM user_roles WHERE user_id=@u AND role_id=@r",
.\Services\DatabaseService.Rbac.Extensions.cs:360:                "DELETE FROM role_permissions WHERE role_id=@r AND permission_id=@p",
.\Services\DatabaseService.Rbac.CoreExtensions.cs:288:                "DELETE FROM user_roles WHERE user_id=@uid AND role_id=@rid",
.\Services\DatabaseService.Rbac.CoreExtensions.cs:401:                "DELETE FROM user_permissions WHERE user_id=@uid AND permission_id=@pid",
.\Services\DatabaseService.Rbac.CoreExtensions.cs:564:            var dt = await db.ExecuteSelectAsync("SELECT * FROM permission_requests WHERE id=@id",
.\Services\DatabaseService.Rbac.CoreExtensions.cs:594:            var dt = await db.ExecuteSelectAsync("SELECT * FROM permission_requests WHERE id=@id",
.\Services\DatabaseService.Rbac.CoreExtensions.cs:633:            var dt = await db.ExecuteSelectAsync("SELECT * FROM roles ORDER BY name, id", null, token).ConfigureAwait(false);
.\Services\DatabaseService.Rbac.CoreExtensions.cs:650:            var dt = await db.ExecuteSelectAsync("SELECT * FROM permissions ORDER BY code, id", null, token).ConfigureAwait(false);
.\Services\DatabaseService.Rbac.CoreExtensions.cs:708:                // Minimal, schema-safe legacy INSERT (no fragile columns like 'changed_at' or optional fields).
.\Services\DatabaseService.Qualifications.Extensions.cs:21:            var dt = await db.ExecuteSelectAsync("SELECT * FROM component_qualifications ORDER BY qualification_date DESC, id DESC", null, token).ConfigureAwait(false);
.\Services\DatabaseService.Qualifications.Extensions.cs:51:                await db.ExecuteNonQueryAsync(@"UPDATE component_qualifications SET component_id=@comp, supplier_id=@supp, qualification_date=@date, status=@status, certificate_number=@cert WHERE id=@id", new[]
.\Services\DatabaseService.Qualifications.Extensions.cs:67:            try { await db.ExecuteNonQueryAsync("DELETE FROM component_qualifications WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false); } catch { }
.\Services\DatabaseService.Ppm.Extensions.cs:23:                var dt = await db.ExecuteSelectAsync("SELECT * FROM preventive_maintenance_plans ORDER BY id DESC", null, token).ConfigureAwait(false);
.\Services\DatabaseService.Ppm.Extensions.cs:28:                var dt = await db.ExecuteSelectAsync("SELECT * FROM ppm_plans ORDER BY id DESC", null, token).ConfigureAwait(false);
.\Services\DatabaseService.Ppm.Extensions.cs:37:                var dt = await db.ExecuteSelectAsync("SELECT * FROM preventive_maintenance_plans WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.Ppm.Extensions.cs:42:                var dt = await db.ExecuteSelectAsync("SELECT * FROM ppm_plans WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.Ppm.Extensions.cs:53:            string updateSql = @"UPDATE preventive_maintenance_plans SET code=@code, name=@name, description=@desc, machine_id=@mid, component_id=@cid, frequency=@freq, checklist_file=@file, next_due=@due, status=@status WHERE id=@id";
.\Services\DatabaseService.Ppm.Extensions.cs:105:                await db.ExecuteNonQueryAsync("DELETE FROM preventive_maintenance_plans WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.Ppm.Extensions.cs:109:                await db.ExecuteNonQueryAsync("DELETE FROM ppm_plans WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.Notifications.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM notifications ORDER BY created_at DESC, id DESC", null, token).ConfigureAwait(false);
.\Services\DatabaseService.Notifications.Extensions.cs:70:            try { await db.ExecuteNonQueryAsync("UPDATE notifications SET status='acknowledged', acked_by=@u, acked_at=NOW() WHERE id=@id", new[] { new MySqlParameter("@u", actorUserId), new MySqlParameter("@id", notificationId) }, token).ConfigureAwait(false); } catch { }
.\Services\DatabaseService.Notifications.Extensions.cs:76:            try { await db.ExecuteNonQueryAsync("UPDATE notifications SET status='muted', muted_until=@until WHERE id=@id", new[] { new MySqlParameter("@until", mutedUntilUtc), new MySqlParameter("@id", notificationId) }, token).ConfigureAwait(false); } catch { }
.\Services\DatabaseService.Notifications.Extensions.cs:82:            try { await db.ExecuteNonQueryAsync("DELETE FROM notifications WHERE id=@id", new[] { new MySqlParameter("@id", notificationId) }, token).ConfigureAwait(false); } catch { }
.\Services\DatabaseService.Machines.CoreExtensions.cs:21:            var dt = await db.ExecuteSelectAsync("SELECT * FROM machines ORDER BY name, id", null, token).ConfigureAwait(false);
.\Services\DatabaseService.Machines.CoreExtensions.cs:50:            var dt = await db.ExecuteSelectAsync("SELECT * FROM machines WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.Machines.CoreExtensions.cs:76:            string updateSql = @"UPDATE machines SET code=@code, name=@name, description=@desc, model=@model, manufacturer=@mf, location=@loc, install_date=@inst, procurement_date=@proc, status=@status, urs_doc=@urs, serial_number=@sn, acquisition_cost=@cost, rfid_tag=@rfid, qr_code=@qr, iot_device_id=@iot, cloud_device_guid=@cloud WHERE id=@id";
.\Services\DatabaseService.Machines.CoreExtensions.cs:151:                await db.ExecuteNonQueryAsync("DELETE FROM machines WHERE id=@id", new[] { new MySqlConnector.MySqlParameter("@id", machineId) }, token).ConfigureAwait(false);
.\Views\PartsPage.xaml.cs:181:                const string sql = @"UPDATE parts SET 
.\Views\PartsPage.xaml.cs:222:                const string sql = "DELETE FROM parts WHERE id=@id";
.\Services\DatabaseService.Incidents.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM incidents ORDER BY id DESC", null, token).ConfigureAwait(false);
.\Services\DatabaseService.Incidents.Extensions.cs:28:            var dt = await db.ExecuteSelectAsync("SELECT * FROM incidents WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.Incidents.Extensions.cs:37:            string updateSql = @"UPDATE incidents SET title=@t, description=@d, type=@type, priority=@prio, detected_at=@det, reported_at=@rep, reported_by_id=@rby, assigned_to_id=@assn, work_order_id=@wo, capa_case_id=@capa, status=@status, root_cause=@rc, closed_at=@closed, closed_by_id=@cby, digital_signature=@sig, last_modified=NOW(), last_modified_by_id=@lmb, source_ip=@ip, notes=@notes, is_deleted=@del, anomaly_score=@anom, risk_level=@risk, assigned_investigator=@invest, classification=@class, linked_deviation_id=@ldev, linked_capa_id=@lcapa, closure_comment=@clos, is_critical=@critical WHERE id=@id";
.\Services\DatabaseService.Incidents.Extensions.cs:88:            await db.ExecuteNonQueryAsync("DELETE FROM incidents WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\ValidationAuditService.cs:79:                "SELECT * FROM validation_audit WHERE validation_id=@vid ORDER BY changed_at DESC",
.\Services\ValidationAuditService.cs:91:                "SELECT * FROM validation_audit WHERE id=@id",
.\Services\ValidationAuditService.cs:101:                "DELETE FROM validation_audit WHERE id=@id",
.\Services\DatabaseService.IncidentReports.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM incidents ORDER BY reported_at DESC, id DESC", null, token).ConfigureAwait(false);
.\Services\DatabaseService.IncidentReports.Extensions.cs:53:            try { await db.ExecuteNonQueryAsync("UPDATE incidents SET assigned_to_id=@u WHERE id=@id", new[] { new MySqlParameter("@u", userId), new MySqlParameter("@id", incidentId) }, token).ConfigureAwait(false); } catch { }
.\Services\DatabaseService.IncidentReports.Extensions.cs:63:            try { await db.ExecuteNonQueryAsync("UPDATE incidents SET status='investigated' WHERE id=@id", new[] { new MySqlParameter("@id", report.Id) }, token).ConfigureAwait(false); } catch { }
.\Services\DatabaseService.IncidentReports.Extensions.cs:69:            try { await db.ExecuteNonQueryAsync("UPDATE incidents SET status='approved' WHERE id=@id", new[] { new MySqlParameter("@id", incidentId) }, token).ConfigureAwait(false); } catch { }
.\Services\DatabaseService.IncidentReports.Extensions.cs:78:            try { await db.ExecuteNonQueryAsync("UPDATE incidents SET status='closed', closed_at=NOW(), closed_by_id=@u WHERE id=@id", new[] { new MySqlParameter("@id", incidentId), new MySqlParameter("@u", actorUserId) }, token).ConfigureAwait(false); } catch { }
.\Services\DatabaseService.IncidentAudits.Extensions.cs:48:            var dt = await db.ExecuteSelectAsync("SELECT * FROM incident_audit WHERE id=@id LIMIT 1", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.IncidentAudits.Extensions.cs:54:            var dt = await db.ExecuteSelectAsync("SELECT * FROM incident_audit WHERE incident_id=@id ORDER BY action_at DESC, id DESC", new[] { new MySqlParameter("@id", incidentId) }, token).ConfigureAwait(false);
.\Services\DatabaseService.IncidentAudits.Extensions.cs:60:            var dt = await db.ExecuteSelectAsync("SELECT * FROM incident_audit WHERE user_id=@id ORDER BY action_at DESC, id DESC", new[] { new MySqlParameter("@id", userId) }, token).ConfigureAwait(false);
.\Views\MachinesPage.xaml.cs:164:UPDATE machines SET 
.\Views\MachinesPage.xaml.cs:206:                const string sql = "DELETE FROM machines WHERE id=@id";
.\Services\UserService.cs:245:                "UPDATE users SET password_hash=@ph WHERE id=@id",
.\Services\DatabaseService.ExternalServicers.Extensions.cs:21:            var dt = await db.ExecuteSelectAsync("SELECT * FROM external_contractors ORDER BY name, id", null, token).ConfigureAwait(false);
.\Services\DatabaseService.ExternalServicers.Extensions.cs:32:            string updateSql = @"UPDATE external_contractors SET name=@name, code=@code, registration_number=@reg, contact_person=@contact, email=@em, phone=@ph, address=@addr, type=@type, status=@status, cooperation_start=@start, cooperation_end=@end, comment=@comm, digital_signature=@sig WHERE id=@id";
.\Services\DatabaseService.ExternalServicers.Extensions.cs:84:            => db.ExecuteNonQueryAsync("DELETE FROM external_contractors WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token);
.\Services\DatabaseService.Documents.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM documentcontrol ORDER BY id DESC", null, token).ConfigureAwait(false);
.\Services\DatabaseService.Documents.Extensions.cs:50:                await db.ExecuteNonQueryAsync("UPDATE documentcontrol SET revision=@rev, file_path=@file WHERE id=@id", new[]
.\Services\DatabaseService.Documents.Extensions.cs:66:            try { await db.ExecuteNonQueryAsync("UPDATE documentcontrol SET status='approved' WHERE id=@id", new[] { new MySqlParameter("@id", documentId) }, token).ConfigureAwait(false); } catch { }
.\Services\DatabaseService.Documents.Extensions.cs:72:            try { await db.ExecuteNonQueryAsync("UPDATE documentcontrol SET status='published' WHERE id=@id", new[] { new MySqlParameter("@id", documentId) }, token).ConfigureAwait(false); } catch { }
.\Services\DatabaseService.Documents.Extensions.cs:78:            try { await db.ExecuteNonQueryAsync("UPDATE documentcontrol SET status='expired' WHERE id=@id", new[] { new MySqlParameter("@id", documentId) }, token).ConfigureAwait(false); } catch { }
.\Services\DatabaseService.Documents.Extensions.cs:87:                await db.ExecuteNonQueryAsync("UPDATE documentcontrol SET linked_change_controls = CONCAT(IFNULL(linked_change_controls,''), CASE WHEN linked_change_controls IS NULL OR linked_change_controls='' THEN '' ELSE ',' END, @cc) WHERE id=@id",
.\Services\DatabaseService.DigitalSignatures.Extensions.cs:20:            var dt = await db.ExecuteSelectAsync("SELECT * FROM digital_signatures ORDER BY signed_at DESC, id DESC", null, token).ConfigureAwait(false);
.\Services\DatabaseService.DigitalSignatures.Extensions.cs:56:                await db.ExecuteNonQueryAsync("UPDATE digital_signatures SET status='revoked', note=@note WHERE id=@id", new[]
.\Services\RBACService.cs:335:            const string sql = "DELETE FROM role_permissions WHERE role_id=@r AND permission_id=@p";
.\Services\RBACService.cs:416:                "UPDATE roles SET is_deleted=1, updated_at=UTC_TIMESTAMP(), last_modified_by_id=@by, version=version+1 WHERE id=@id",
.\Services\RBACService.cs:421:                "DELETE FROM role_permissions WHERE role_id=@id",
.\Services\RBACService.cs:426:                "DELETE FROM user_roles WHERE role_id=@id",
.\Services\DatabaseService.WorkOrders.Extensions.cs:28:            const string sql = @"SELECT * FROM work_orders ORDER BY date_open DESC, id DESC";
.\Services\DatabaseService.WorkOrders.Extensions.cs:45:            const string sql = @"SELECT * FROM work_orders WHERE id=@id LIMIT 1";
.\Services\DatabaseService.WorkOrders.Extensions.cs:72:            string updateSql = @"UPDATE work_orders SET
.\Services\DatabaseService.WorkOrders.Extensions.cs:114:                string updateMin = @"UPDATE work_orders SET machine_id=@mid, type=@type, description=@desc, status=@status, priority=@prio WHERE id=@id";
.\Services\DatabaseService.WorkOrders.Extensions.cs:191:            await db.ExecuteNonQueryAsync("DELETE FROM work_orders WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.WorkOrders.Extensions.cs:204:            await db.ExecuteNonQueryAsync("DELETE FROM work_orders WHERE id=@id", new[] { new MySqlParameter("@id", id) }, token).ConfigureAwait(false);
.\Services\DatabaseService.WorkOrders.Extensions.cs:231:            await db.ExecuteNonQueryAsync("UPDATE work_orders SET status='zavrsen' WHERE id=@id", new[] { new MySqlParameter("@id", workOrderId) }, token).ConfigureAwait(false);
.\Services\DatabaseService.WorkOrders.Extensions.cs:241:            await db.ExecuteNonQueryAsync("UPDATE work_orders SET status='zavrsen', date_close=NOW() WHERE id=@id", new[] { new MySqlParameter("@id", workOrderId) }, token).ConfigureAwait(false);
.\Services\DatabaseService.Validations.Extensions.cs:34:            const string sql = @"SELECT * FROM validations
.\Services\DatabaseService.Validations.Extensions.cs:50:            const string sql = @"SELECT * FROM validations WHERE id=@id LIMIT 1";
.\Services\DatabaseService.Validations.Extensions.cs:101:UPDATE validations SET
.\Services\DatabaseService.Validations.Extensions.cs:174:            const string sql = @"DELETE FROM validations WHERE id=@id";
.\Services\DatabaseService.Users.Extensions.cs:60:            const string sql = @"SELECT * FROM users WHERE id=@id LIMIT 1;";
.\Services\DatabaseService.Users.Extensions.cs:75:            const string sql = @"SELECT * FROM users WHERE LOWER(username)=LOWER(@u) LIMIT 1;";
.\Services\DatabaseService.Users.Extensions.cs:94:            var dt = await db.ExecuteSelectAsync("SELECT * FROM users ORDER BY username", null, token).ConfigureAwait(false);
.\Services\DatabaseService.Users.Extensions.cs:118:                : @"UPDATE users SET
.\Services\DatabaseService.Users.Extensions.cs:146:                    : @"UPDATE users SET
.\Services\DatabaseService.Users.Extensions.cs:171:                    "UPDATE users SET last_login=NOW(), failed_login_attempts=0 WHERE id=@id",
.\Services\DatabaseService.Users.Extensions.cs:177:                    "UPDATE users SET last_login=NOW(), failed_logins=0 WHERE id=@id",
.\Services\DatabaseService.Users.Extensions.cs:214:            => db.ExecuteNonQueryAsync("UPDATE users SET is_locked=1 WHERE id=@id",
.\Services\DatabaseService.Users.Extensions.cs:230:                    "UPDATE users SET is_locked=0, failed_login_attempts=0 WHERE id=@id",
.\Services\DatabaseService.Users.Extensions.cs:236:                    "UPDATE users SET is_locked=0, failed_logins=0 WHERE id=@id",
.\Services\DatabaseService.Users.Extensions.cs:251:                "UPDATE users SET is_two_factor_enabled=@tfa WHERE id=@id",
.\Services\DatabaseService.Users.Extensions.cs:260:                    "UPDATE users SET password_reset_required=1 WHERE id=@id",
.\Services\DatabaseService.Users.Extensions.cs:282:            await db.ExecuteNonQueryAsync("DELETE FROM users WHERE id=@id",
.\Services\DatabaseService.TrainingRecords.Extensions.cs:36:SELECT *
.\Views\CalibrationsPage.xaml.cs:81:                    .ExecuteSelectAsync("SELECT * FROM calibrations ORDER BY calibration_date DESC")
.\Views\CalibrationsPage.xaml.cs:265:                const string sql = @"UPDATE calibrations SET
.\Views\ComponentsPage.xaml.cs:179:UPDATE machine_components SET
.\Views\ComponentsPage.xaml.cs:221:                const string sql = @"UPDATE machine_components SET is_deleted=1, deleted_at=NOW() WHERE id=@id;";
.\ViewModels\ChangeControlViewModel.cs:141:                var controls = await _dbService.ExecuteSelectAsync("SELECT * FROM change_controls").ConfigureAwait(false);
.\ViewModels\ChangeControlViewModel.cs:225:                    "UPDATE change_controls SET status=@status WHERE id=@id",
.\ViewModels\ChangeControlViewModel.cs:269:                    "UPDATE change_controls SET status=@status WHERE id=@id",
.\ViewModels\ChangeControlViewModel.cs:296:                    "UPDATE change_controls SET status=@status WHERE id=@id",
.\ViewModels\CalibrationsViewModel.cs:258:                    .ExecuteSelectAsync("SELECT * FROM calibrations ORDER BY calibration_date DESC")
.\ViewModels\CalibrationsViewModel.cs:310:                await _dbService.ExecuteNonQueryAsync("DELETE FROM calibrations WHERE id=@id", pars).ConfigureAwait(false);
