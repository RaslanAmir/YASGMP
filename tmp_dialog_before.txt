using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Maui.Controls;
using Microsoft.Maui.Storage;
using YasGMP.Models;
using YasGMP.Services;

namespace YasGMP.Views.Dialogs
{
    public partial class WorkOrderEditDialog : ContentPage
    {
        private readonly DatabaseService _db;
        private readonly DocumentService _docs;
        private readonly int _currentUserId;

        public WorkOrder WorkOrder { get; }
        public TaskCompletionSource<bool> _tcs = new();
        public Task<bool> Result => _tcs.Task;

        private List<(string name, int id)> _machines = new();
        private List<(string name, int id)> _components = new();

        public WorkOrderEditDialog(WorkOrder wo, DatabaseService db, int currentUserId)
        {
            InitializeComponent();
            WorkOrder = wo;
            _db = db;
            _docs = new DocumentService(db);
            _currentUserId = currentUserId;
            BindingContext = WorkOrder;
            _ = LoadLookupsAsync();
        }

        private async Task LoadLookupsAsync()
        {
            try
            {
                var types = new[] { "korektivni", "preventivni", "vanredni" };
                var prios = new[] { "nizak", "srednji", "visok", "kritican" };
                var stats = new[] { "otvoren", "u_tijeku", "zavrsen", "odbijen", "planiran" };
                await MainThread.InvokeOnMainThreadAsync(() =>
                {
                    TypePicker.ItemsSource = types;
                    PriorityPicker.ItemsSource = prios;
                    StatusPicker.ItemsSource = stats;
                });

                var dtM = await _db.ExecuteSelectAsync("SELECT id, name FROM machines ORDER BY name");
                _machines = dtM.Rows.Cast<System.Data.DataRow>()
                    .Select(r => (r["name"]?.ToString() ?? string.Empty, Convert.ToInt32(r["id"])) ).ToList();
                await MainThread.InvokeOnMainThreadAsync(() =>
                {
                    MachinePicker.ItemsSource = _machines.Select(t => t.name).ToList();
                    if (WorkOrder.MachineId > 0)
                    {
                        var idx = _machines.FindIndex(x => x.id == WorkOrder.MachineId);
                        if (idx >= 0) MachinePicker.SelectedIndex = idx;
                    }
                });

                if (WorkOrder.MachineId > 0)
                    await LoadComponentsAsync(WorkOrder.MachineId);
            }
            catch (Exception ex)
            {
                await DisplayAlert("GreĹˇka", ex.Message, "OK");
            }
        }

        private async Task LoadComponentsAsync(int machineId)
        {
            var dtC = await _db.ExecuteSelectAsync("SELECT id, name FROM machine_components WHERE machine_id=@m ORDER BY name",
                new[] { new MySqlConnector.MySqlParameter("@m", machineId) });
            _components = dtC.Rows.Cast<System.Data.DataRow>()
                .Select(r => (r["name"]?.ToString() ?? string.Empty, Convert.ToInt32(r["id"])) ).ToList();
            await MainThread.InvokeOnMainThreadAsync(() =>
            {
                ComponentPicker.ItemsSource = _components.Select(t => t.name).ToList();
                if (WorkOrder.ComponentId.HasValue)
                {
                    var idx = _components.FindIndex(x => x.id == WorkOrder.ComponentId.Value);
                    if (idx >= 0) ComponentPicker.SelectedIndex = idx;
                }
            });
        }

        private async void OnMachineChanged(object? sender, EventArgs e)
        {
            if (MachinePicker.SelectedIndex >= 0 && MachinePicker.SelectedIndex < _machines.Count)
            {
                var sel = _machines[MachinePicker.SelectedIndex];
                WorkOrder.MachineId = sel.id;
                await LoadComponentsAsync(sel.id);
            }
        }

        private async void OnSignClicked(object? sender, EventArgs e)
        {
            string? reason = await DisplayPromptAsync("Potpis", "Razlog/napomena potpisa:");
            string payload = $"WO:{WorkOrder.Id}|{WorkOrder.Title}|{DateTime.UtcNow:O}|{reason}";
            using var sha = System.Security.Cryptography.SHA256.Create();
            var hash = Convert.ToBase64String(sha.ComputeHash(System.Text.Encoding.UTF8.GetBytes(payload)));
            await _db.AddWorkOrderSignatureAsync(WorkOrder.Id, _currentUserId, hash, reason);
            await DisplayAlert("OK", "Potpis spremljen.", "Zatvori");
        }

        private async Task AddPhotosAsync(string kind)
        {
            try
            {
                var files = await FilePicker.PickMultipleAsync();
                if (files == null) return;
                foreach (var f in files)
                {
                    using var fs = File.OpenRead(f.FullPath);
                    await _db.AttachWorkOrderPhotoAsync(WorkOrder.Id, fs, Path.GetFileName(f.FullPath), kind, _currentUserId);
                }
                await DisplayAlert("OK", "Slike dodane.", "Zatvori");
            }
            catch (Exception ex)
            {
                await DisplayAlert("GreĹˇka", ex.Message, "OK");
            }
        }

        private async void OnAddBeforePhotosClicked(object? sender, EventArgs e) => await AddPhotosAsync("before");
        private async void OnAddAfterPhotosClicked(object? sender, EventArgs e) => await AddPhotosAsync("after");

        private async void OnSaveClicked(object? sender, EventArgs e)
        {
            _tcs.TrySetResult(true);
            await Navigation.PopModalAsync();
        }

        private async void OnCancelClicked(object? sender, EventArgs e)
        {
            _tcs.TrySetResult(false);
            await Navigation.PopModalAsync();
        }
    }
}

